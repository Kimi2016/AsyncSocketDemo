// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "SmartWatch.pb.h"
// @@protoc_insertion_point(imports)

@implementation SmartWatchRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [SmartWatchRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface Protocols ()
@property UInt32 protocolVersion;
@property (strong) NSString* version;
@property UInt32 clientType;
@property UInt32 customerId;
@property UInt64 reqId;
@property UInt32 type;
@property (strong) Watch* watch;
@property (strong) Mobile* mobile;
@property (strong) Chat* chat;
@property (strong) Setting* setting;
@property (strong) NSMutableArray * alarmsArray;
@property (strong) NSMutableArray * locksArray;
@property (strong) NSMutableArray * familyMembersArray;
@property (strong) PowerSwitch* powerSwitch;
@property (strong) NSMutableArray * fencesArray;
@property (strong) Server* server;
@property (strong) NSMutableArray * watchesArray;
@property (strong) NSMutableArray * balanceQueryArray;
@property (strong) NSMutableArray * phoneBooksArray;
@property (strong) Weather* weather;
@property (strong) NSMutableArray * messageArray;
@end

@implementation Protocols

- (BOOL) hasProtocolVersion {
  return !!hasProtocolVersion_;
}
- (void) setHasProtocolVersion:(BOOL) _value_ {
  hasProtocolVersion_ = !!_value_;
}
@synthesize protocolVersion;
- (BOOL) hasVersion {
  return !!hasVersion_;
}
- (void) setHasVersion:(BOOL) _value_ {
  hasVersion_ = !!_value_;
}
@synthesize version;
- (BOOL) hasClientType {
  return !!hasClientType_;
}
- (void) setHasClientType:(BOOL) _value_ {
  hasClientType_ = !!_value_;
}
@synthesize clientType;
- (BOOL) hasCustomerId {
  return !!hasCustomerId_;
}
- (void) setHasCustomerId:(BOOL) _value_ {
  hasCustomerId_ = !!_value_;
}
@synthesize customerId;
- (BOOL) hasReqId {
  return !!hasReqId_;
}
- (void) setHasReqId:(BOOL) _value_ {
  hasReqId_ = !!_value_;
}
@synthesize reqId;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasWatch {
  return !!hasWatch_;
}
- (void) setHasWatch:(BOOL) _value_ {
  hasWatch_ = !!_value_;
}
@synthesize watch;
- (BOOL) hasMobile {
  return !!hasMobile_;
}
- (void) setHasMobile:(BOOL) _value_ {
  hasMobile_ = !!_value_;
}
@synthesize mobile;
- (BOOL) hasChat {
  return !!hasChat_;
}
- (void) setHasChat:(BOOL) _value_ {
  hasChat_ = !!_value_;
}
@synthesize chat;
- (BOOL) hasSetting {
  return !!hasSetting_;
}
- (void) setHasSetting:(BOOL) _value_ {
  hasSetting_ = !!_value_;
}
@synthesize setting;
@synthesize alarmsArray;
@dynamic alarms;
@synthesize locksArray;
@dynamic locks;
@synthesize familyMembersArray;
@dynamic familyMembers;
- (BOOL) hasPowerSwitch {
  return !!hasPowerSwitch_;
}
- (void) setHasPowerSwitch:(BOOL) _value_ {
  hasPowerSwitch_ = !!_value_;
}
@synthesize powerSwitch;
@synthesize fencesArray;
@dynamic fences;
- (BOOL) hasServer {
  return !!hasServer_;
}
- (void) setHasServer:(BOOL) _value_ {
  hasServer_ = !!_value_;
}
@synthesize server;
@synthesize watchesArray;
@dynamic watches;
@synthesize balanceQueryArray;
@dynamic balanceQuery;
@synthesize phoneBooksArray;
@dynamic phoneBooks;
- (BOOL) hasWeather {
  return !!hasWeather_;
}
- (void) setHasWeather:(BOOL) _value_ {
  hasWeather_ = !!_value_;
}
@synthesize weather;
@synthesize messageArray;
@dynamic message;
- (instancetype) init {
  if ((self = [super init])) {
    self.protocolVersion = 1;
    self.version = @"1.0";
    self.clientType = 0;
    self.customerId = 1;
    self.reqId = 0L;
    self.type = 0;
    self.watch = [Watch defaultInstance];
    self.mobile = [Mobile defaultInstance];
    self.chat = [Chat defaultInstance];
    self.setting = [Setting defaultInstance];
    self.powerSwitch = [PowerSwitch defaultInstance];
    self.server = [Server defaultInstance];
    self.weather = [Weather defaultInstance];
  }
  return self;
}
static Protocols* defaultProtocolsInstance = nil;
+ (void) initialize {
  if (self == [Protocols class]) {
    defaultProtocolsInstance = [[Protocols alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultProtocolsInstance;
}
- (instancetype) defaultInstance {
  return defaultProtocolsInstance;
}
- (NSArray *)alarms {
  return alarmsArray;
}
- (Alarm*)alarmsAtIndex:(NSUInteger)index {
  return [alarmsArray objectAtIndex:index];
}
- (NSArray *)locks {
  return locksArray;
}
- (Lock*)locksAtIndex:(NSUInteger)index {
  return [locksArray objectAtIndex:index];
}
- (NSArray *)familyMembers {
  return familyMembersArray;
}
- (FamilyMember*)familyMembersAtIndex:(NSUInteger)index {
  return [familyMembersArray objectAtIndex:index];
}
- (NSArray *)fences {
  return fencesArray;
}
- (Fence*)fencesAtIndex:(NSUInteger)index {
  return [fencesArray objectAtIndex:index];
}
- (NSArray *)watches {
  return watchesArray;
}
- (Watch*)watchesAtIndex:(NSUInteger)index {
  return [watchesArray objectAtIndex:index];
}
- (NSArray *)balanceQuery {
  return balanceQueryArray;
}
- (BalanceQuery*)balanceQueryAtIndex:(NSUInteger)index {
  return [balanceQueryArray objectAtIndex:index];
}
- (NSArray *)phoneBooks {
  return phoneBooksArray;
}
- (PhoneBook*)phoneBooksAtIndex:(NSUInteger)index {
  return [phoneBooksArray objectAtIndex:index];
}
- (NSArray *)message {
  return messageArray;
}
- (NSString*)messageAtIndex:(NSUInteger)index {
  return [messageArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasProtocolVersion) {
    return NO;
  }
  if (!self.hasVersion) {
    return NO;
  }
  if (!self.hasClientType) {
    return NO;
  }
  if (!self.hasCustomerId) {
    return NO;
  }
  if (!self.hasType) {
    return NO;
  }
  if (!self.hasWatch) {
    return NO;
  }
  if (!self.watch.isInitialized) {
    return NO;
  }
  if (self.hasMobile) {
    if (!self.mobile.isInitialized) {
      return NO;
    }
  }
  if (self.hasChat) {
    if (!self.chat.isInitialized) {
      return NO;
    }
  }
  __block BOOL isInitfences = YES;
   [self.fences enumerateObjectsUsingBlock:^(Fence *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitfences = NO;
      *stop = YES;
    }
  }];
  if (!isInitfences) return isInitfences;
  __block BOOL isInitwatches = YES;
   [self.watches enumerateObjectsUsingBlock:^(Watch *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitwatches = NO;
      *stop = YES;
    }
  }];
  if (!isInitwatches) return isInitwatches;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasProtocolVersion) {
    [output writeUInt32:1 value:self.protocolVersion];
  }
  if (self.hasVersion) {
    [output writeString:2 value:self.version];
  }
  if (self.hasClientType) {
    [output writeUInt32:3 value:self.clientType];
  }
  if (self.hasCustomerId) {
    [output writeUInt32:4 value:self.customerId];
  }
  if (self.hasReqId) {
    [output writeUInt64:5 value:self.reqId];
  }
  if (self.hasType) {
    [output writeUInt32:6 value:self.type];
  }
  if (self.hasWatch) {
    [output writeMessage:7 value:self.watch];
  }
  if (self.hasMobile) {
    [output writeMessage:8 value:self.mobile];
  }
  if (self.hasChat) {
    [output writeMessage:9 value:self.chat];
  }
  if (self.hasSetting) {
    [output writeMessage:10 value:self.setting];
  }
  [self.alarmsArray enumerateObjectsUsingBlock:^(Alarm *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:11 value:element];
  }];
  [self.locksArray enumerateObjectsUsingBlock:^(Lock *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:12 value:element];
  }];
  [self.familyMembersArray enumerateObjectsUsingBlock:^(FamilyMember *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:13 value:element];
  }];
  if (self.hasPowerSwitch) {
    [output writeMessage:14 value:self.powerSwitch];
  }
  [self.fencesArray enumerateObjectsUsingBlock:^(Fence *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:15 value:element];
  }];
  if (self.hasServer) {
    [output writeMessage:17 value:self.server];
  }
  [self.watchesArray enumerateObjectsUsingBlock:^(Watch *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:18 value:element];
  }];
  [self.balanceQueryArray enumerateObjectsUsingBlock:^(BalanceQuery *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:19 value:element];
  }];
  [self.phoneBooksArray enumerateObjectsUsingBlock:^(PhoneBook *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:20 value:element];
  }];
  if (self.hasWeather) {
    [output writeMessage:21 value:self.weather];
  }
  [self.messageArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:22 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasProtocolVersion) {
    size_ += computeUInt32Size(1, self.protocolVersion);
  }
  if (self.hasVersion) {
    size_ += computeStringSize(2, self.version);
  }
  if (self.hasClientType) {
    size_ += computeUInt32Size(3, self.clientType);
  }
  if (self.hasCustomerId) {
    size_ += computeUInt32Size(4, self.customerId);
  }
  if (self.hasReqId) {
    size_ += computeUInt64Size(5, self.reqId);
  }
  if (self.hasType) {
    size_ += computeUInt32Size(6, self.type);
  }
  if (self.hasWatch) {
    size_ += computeMessageSize(7, self.watch);
  }
  if (self.hasMobile) {
    size_ += computeMessageSize(8, self.mobile);
  }
  if (self.hasChat) {
    size_ += computeMessageSize(9, self.chat);
  }
  if (self.hasSetting) {
    size_ += computeMessageSize(10, self.setting);
  }
  [self.alarmsArray enumerateObjectsUsingBlock:^(Alarm *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(11, element);
  }];
  [self.locksArray enumerateObjectsUsingBlock:^(Lock *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(12, element);
  }];
  [self.familyMembersArray enumerateObjectsUsingBlock:^(FamilyMember *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(13, element);
  }];
  if (self.hasPowerSwitch) {
    size_ += computeMessageSize(14, self.powerSwitch);
  }
  [self.fencesArray enumerateObjectsUsingBlock:^(Fence *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(15, element);
  }];
  if (self.hasServer) {
    size_ += computeMessageSize(17, self.server);
  }
  [self.watchesArray enumerateObjectsUsingBlock:^(Watch *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(18, element);
  }];
  [self.balanceQueryArray enumerateObjectsUsingBlock:^(BalanceQuery *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(19, element);
  }];
  [self.phoneBooksArray enumerateObjectsUsingBlock:^(PhoneBook *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(20, element);
  }];
  if (self.hasWeather) {
    size_ += computeMessageSize(21, self.weather);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.messageArray.count;
    [self.messageArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Protocols*) parseFromData:(NSData*) data {
  return (Protocols*)[[[Protocols builder] mergeFromData:data] build];
}
+ (Protocols*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Protocols*)[[[Protocols builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Protocols*) parseFromInputStream:(NSInputStream*) input {
  return (Protocols*)[[[Protocols builder] mergeFromInputStream:input] build];
}
+ (Protocols*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Protocols*)[[[Protocols builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Protocols*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Protocols*)[[[Protocols builder] mergeFromCodedInputStream:input] build];
}
+ (Protocols*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Protocols*)[[[Protocols builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ProtocolsBuilder*) builder {
  return [[ProtocolsBuilder alloc] init];
}
+ (ProtocolsBuilder*) builderWithPrototype:(Protocols*) prototype {
  return [[Protocols builder] mergeFrom:prototype];
}
- (ProtocolsBuilder*) builder {
  return [Protocols builder];
}
- (ProtocolsBuilder*) toBuilder {
  return [Protocols builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasProtocolVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"protocolVersion", [NSNumber numberWithInteger:self.protocolVersion]];
  }
  if (self.hasVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"version", self.version];
  }
  if (self.hasClientType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clientType", [NSNumber numberWithInteger:self.clientType]];
  }
  if (self.hasCustomerId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"customerId", [NSNumber numberWithInteger:self.customerId]];
  }
  if (self.hasReqId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"reqId", [NSNumber numberWithLongLong:self.reqId]];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  if (self.hasWatch) {
    [output appendFormat:@"%@%@ {\n", indent, @"watch"];
    [self.watch writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasMobile) {
    [output appendFormat:@"%@%@ {\n", indent, @"mobile"];
    [self.mobile writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasChat) {
    [output appendFormat:@"%@%@ {\n", indent, @"chat"];
    [self.chat writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasSetting) {
    [output appendFormat:@"%@%@ {\n", indent, @"setting"];
    [self.setting writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.alarmsArray enumerateObjectsUsingBlock:^(Alarm *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"alarms"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.locksArray enumerateObjectsUsingBlock:^(Lock *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"locks"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.familyMembersArray enumerateObjectsUsingBlock:^(FamilyMember *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"familyMembers"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasPowerSwitch) {
    [output appendFormat:@"%@%@ {\n", indent, @"powerSwitch"];
    [self.powerSwitch writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.fencesArray enumerateObjectsUsingBlock:^(Fence *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"fences"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasServer) {
    [output appendFormat:@"%@%@ {\n", indent, @"server"];
    [self.server writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.watchesArray enumerateObjectsUsingBlock:^(Watch *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"watches"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.balanceQueryArray enumerateObjectsUsingBlock:^(BalanceQuery *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"balanceQuery"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.phoneBooksArray enumerateObjectsUsingBlock:^(PhoneBook *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"phoneBooks"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasWeather) {
    [output appendFormat:@"%@%@ {\n", indent, @"weather"];
    [self.weather writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.messageArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"message", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasProtocolVersion) {
    [dictionary setObject: [NSNumber numberWithInteger:self.protocolVersion] forKey: @"protocolVersion"];
  }
  if (self.hasVersion) {
    [dictionary setObject: self.version forKey: @"version"];
  }
  if (self.hasClientType) {
    [dictionary setObject: [NSNumber numberWithInteger:self.clientType] forKey: @"clientType"];
  }
  if (self.hasCustomerId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.customerId] forKey: @"customerId"];
  }
  if (self.hasReqId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.reqId] forKey: @"reqId"];
  }
  if (self.hasType) {
    [dictionary setObject: [NSNumber numberWithInteger:self.type] forKey: @"type"];
  }
  if (self.hasWatch) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.watch storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"watch"];
  }
  if (self.hasMobile) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.mobile storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"mobile"];
  }
  if (self.hasChat) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.chat storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"chat"];
  }
  if (self.hasSetting) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.setting storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"setting"];
  }
  for (Alarm* element in self.alarmsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"alarms"];
  }
  for (Lock* element in self.locksArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"locks"];
  }
  for (FamilyMember* element in self.familyMembersArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"familyMembers"];
  }
  if (self.hasPowerSwitch) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.powerSwitch storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"powerSwitch"];
  }
  for (Fence* element in self.fencesArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"fences"];
  }
  if (self.hasServer) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.server storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"server"];
  }
  for (Watch* element in self.watchesArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"watches"];
  }
  for (BalanceQuery* element in self.balanceQueryArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"balanceQuery"];
  }
  for (PhoneBook* element in self.phoneBooksArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"phoneBooks"];
  }
  if (self.hasWeather) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.weather storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"weather"];
  }
  [dictionary setObject:self.message forKey: @"message"];
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Protocols class]]) {
    return NO;
  }
  Protocols *otherMessage = other;
  return
      self.hasProtocolVersion == otherMessage.hasProtocolVersion &&
      (!self.hasProtocolVersion || self.protocolVersion == otherMessage.protocolVersion) &&
      self.hasVersion == otherMessage.hasVersion &&
      (!self.hasVersion || [self.version isEqual:otherMessage.version]) &&
      self.hasClientType == otherMessage.hasClientType &&
      (!self.hasClientType || self.clientType == otherMessage.clientType) &&
      self.hasCustomerId == otherMessage.hasCustomerId &&
      (!self.hasCustomerId || self.customerId == otherMessage.customerId) &&
      self.hasReqId == otherMessage.hasReqId &&
      (!self.hasReqId || self.reqId == otherMessage.reqId) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasWatch == otherMessage.hasWatch &&
      (!self.hasWatch || [self.watch isEqual:otherMessage.watch]) &&
      self.hasMobile == otherMessage.hasMobile &&
      (!self.hasMobile || [self.mobile isEqual:otherMessage.mobile]) &&
      self.hasChat == otherMessage.hasChat &&
      (!self.hasChat || [self.chat isEqual:otherMessage.chat]) &&
      self.hasSetting == otherMessage.hasSetting &&
      (!self.hasSetting || [self.setting isEqual:otherMessage.setting]) &&
      [self.alarmsArray isEqualToArray:otherMessage.alarmsArray] &&
      [self.locksArray isEqualToArray:otherMessage.locksArray] &&
      [self.familyMembersArray isEqualToArray:otherMessage.familyMembersArray] &&
      self.hasPowerSwitch == otherMessage.hasPowerSwitch &&
      (!self.hasPowerSwitch || [self.powerSwitch isEqual:otherMessage.powerSwitch]) &&
      [self.fencesArray isEqualToArray:otherMessage.fencesArray] &&
      self.hasServer == otherMessage.hasServer &&
      (!self.hasServer || [self.server isEqual:otherMessage.server]) &&
      [self.watchesArray isEqualToArray:otherMessage.watchesArray] &&
      [self.balanceQueryArray isEqualToArray:otherMessage.balanceQueryArray] &&
      [self.phoneBooksArray isEqualToArray:otherMessage.phoneBooksArray] &&
      self.hasWeather == otherMessage.hasWeather &&
      (!self.hasWeather || [self.weather isEqual:otherMessage.weather]) &&
      [self.messageArray isEqualToArray:otherMessage.messageArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasProtocolVersion) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.protocolVersion] hash];
  }
  if (self.hasVersion) {
    hashCode = hashCode * 31 + [self.version hash];
  }
  if (self.hasClientType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.clientType] hash];
  }
  if (self.hasCustomerId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.customerId] hash];
  }
  if (self.hasReqId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.reqId] hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.type] hash];
  }
  if (self.hasWatch) {
    hashCode = hashCode * 31 + [self.watch hash];
  }
  if (self.hasMobile) {
    hashCode = hashCode * 31 + [self.mobile hash];
  }
  if (self.hasChat) {
    hashCode = hashCode * 31 + [self.chat hash];
  }
  if (self.hasSetting) {
    hashCode = hashCode * 31 + [self.setting hash];
  }
  [self.alarmsArray enumerateObjectsUsingBlock:^(Alarm *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.locksArray enumerateObjectsUsingBlock:^(Lock *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.familyMembersArray enumerateObjectsUsingBlock:^(FamilyMember *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasPowerSwitch) {
    hashCode = hashCode * 31 + [self.powerSwitch hash];
  }
  [self.fencesArray enumerateObjectsUsingBlock:^(Fence *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasServer) {
    hashCode = hashCode * 31 + [self.server hash];
  }
  [self.watchesArray enumerateObjectsUsingBlock:^(Watch *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.balanceQueryArray enumerateObjectsUsingBlock:^(BalanceQuery *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.phoneBooksArray enumerateObjectsUsingBlock:^(PhoneBook *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasWeather) {
    hashCode = hashCode * 31 + [self.weather hash];
  }
  [self.messageArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ProtocolsBuilder()
@property (strong) Protocols* resultProtocols;
@end

@implementation ProtocolsBuilder
@synthesize resultProtocols;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultProtocols = [[Protocols alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultProtocols;
}
- (ProtocolsBuilder*) clear {
  self.resultProtocols = [[Protocols alloc] init];
  return self;
}
- (ProtocolsBuilder*) clone {
  return [Protocols builderWithPrototype:resultProtocols];
}
- (Protocols*) defaultInstance {
  return [Protocols defaultInstance];
}
- (Protocols*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Protocols*) buildPartial {
  Protocols* returnMe = resultProtocols;
  self.resultProtocols = nil;
  return returnMe;
}
- (ProtocolsBuilder*) mergeFrom:(Protocols*) other {
  if (other == [Protocols defaultInstance]) {
    return self;
  }
  if (other.hasProtocolVersion) {
    [self setProtocolVersion:other.protocolVersion];
  }
  if (other.hasVersion) {
    [self setVersion:other.version];
  }
  if (other.hasClientType) {
    [self setClientType:other.clientType];
  }
  if (other.hasCustomerId) {
    [self setCustomerId:other.customerId];
  }
  if (other.hasReqId) {
    [self setReqId:other.reqId];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasWatch) {
    [self mergeWatch:other.watch];
  }
  if (other.hasMobile) {
    [self mergeMobile:other.mobile];
  }
  if (other.hasChat) {
    [self mergeChat:other.chat];
  }
  if (other.hasSetting) {
    [self mergeSetting:other.setting];
  }
  if (other.alarmsArray.count > 0) {
    if (resultProtocols.alarmsArray == nil) {
      resultProtocols.alarmsArray = [[NSMutableArray alloc] initWithArray:other.alarmsArray];
    } else {
      [resultProtocols.alarmsArray addObjectsFromArray:other.alarmsArray];
    }
  }
  if (other.locksArray.count > 0) {
    if (resultProtocols.locksArray == nil) {
      resultProtocols.locksArray = [[NSMutableArray alloc] initWithArray:other.locksArray];
    } else {
      [resultProtocols.locksArray addObjectsFromArray:other.locksArray];
    }
  }
  if (other.familyMembersArray.count > 0) {
    if (resultProtocols.familyMembersArray == nil) {
      resultProtocols.familyMembersArray = [[NSMutableArray alloc] initWithArray:other.familyMembersArray];
    } else {
      [resultProtocols.familyMembersArray addObjectsFromArray:other.familyMembersArray];
    }
  }
  if (other.hasPowerSwitch) {
    [self mergePowerSwitch:other.powerSwitch];
  }
  if (other.fencesArray.count > 0) {
    if (resultProtocols.fencesArray == nil) {
      resultProtocols.fencesArray = [[NSMutableArray alloc] initWithArray:other.fencesArray];
    } else {
      [resultProtocols.fencesArray addObjectsFromArray:other.fencesArray];
    }
  }
  if (other.hasServer) {
    [self mergeServer:other.server];
  }
  if (other.watchesArray.count > 0) {
    if (resultProtocols.watchesArray == nil) {
      resultProtocols.watchesArray = [[NSMutableArray alloc] initWithArray:other.watchesArray];
    } else {
      [resultProtocols.watchesArray addObjectsFromArray:other.watchesArray];
    }
  }
  if (other.balanceQueryArray.count > 0) {
    if (resultProtocols.balanceQueryArray == nil) {
      resultProtocols.balanceQueryArray = [[NSMutableArray alloc] initWithArray:other.balanceQueryArray];
    } else {
      [resultProtocols.balanceQueryArray addObjectsFromArray:other.balanceQueryArray];
    }
  }
  if (other.phoneBooksArray.count > 0) {
    if (resultProtocols.phoneBooksArray == nil) {
      resultProtocols.phoneBooksArray = [[NSMutableArray alloc] initWithArray:other.phoneBooksArray];
    } else {
      [resultProtocols.phoneBooksArray addObjectsFromArray:other.phoneBooksArray];
    }
  }
  if (other.hasWeather) {
    [self mergeWeather:other.weather];
  }
  if (other.messageArray.count > 0) {
    if (resultProtocols.messageArray == nil) {
      resultProtocols.messageArray = [[NSMutableArray alloc] initWithArray:other.messageArray];
    } else {
      [resultProtocols.messageArray addObjectsFromArray:other.messageArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ProtocolsBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ProtocolsBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setProtocolVersion:[input readUInt32]];
        break;
      }
      case 18: {
        [self setVersion:[input readString]];
        break;
      }
      case 24: {
        [self setClientType:[input readUInt32]];
        break;
      }
      case 32: {
        [self setCustomerId:[input readUInt32]];
        break;
      }
      case 40: {
        [self setReqId:[input readUInt64]];
        break;
      }
      case 48: {
        [self setType:[input readUInt32]];
        break;
      }
      case 58: {
        WatchBuilder* subBuilder = [Watch builder];
        if (self.hasWatch) {
          [subBuilder mergeFrom:self.watch];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setWatch:[subBuilder buildPartial]];
        break;
      }
      case 66: {
        MobileBuilder* subBuilder = [Mobile builder];
        if (self.hasMobile) {
          [subBuilder mergeFrom:self.mobile];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setMobile:[subBuilder buildPartial]];
        break;
      }
      case 74: {
        ChatBuilder* subBuilder = [Chat builder];
        if (self.hasChat) {
          [subBuilder mergeFrom:self.chat];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setChat:[subBuilder buildPartial]];
        break;
      }
      case 82: {
        SettingBuilder* subBuilder = [Setting builder];
        if (self.hasSetting) {
          [subBuilder mergeFrom:self.setting];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSetting:[subBuilder buildPartial]];
        break;
      }
      case 90: {
        AlarmBuilder* subBuilder = [Alarm builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAlarms:[subBuilder buildPartial]];
        break;
      }
      case 98: {
        LockBuilder* subBuilder = [Lock builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addLocks:[subBuilder buildPartial]];
        break;
      }
      case 106: {
        FamilyMemberBuilder* subBuilder = [FamilyMember builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addFamilyMembers:[subBuilder buildPartial]];
        break;
      }
      case 114: {
        PowerSwitchBuilder* subBuilder = [PowerSwitch builder];
        if (self.hasPowerSwitch) {
          [subBuilder mergeFrom:self.powerSwitch];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setPowerSwitch:[subBuilder buildPartial]];
        break;
      }
      case 122: {
        FenceBuilder* subBuilder = [Fence builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addFences:[subBuilder buildPartial]];
        break;
      }
      case 138: {
        ServerBuilder* subBuilder = [Server builder];
        if (self.hasServer) {
          [subBuilder mergeFrom:self.server];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setServer:[subBuilder buildPartial]];
        break;
      }
      case 146: {
        WatchBuilder* subBuilder = [Watch builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addWatches:[subBuilder buildPartial]];
        break;
      }
      case 154: {
        BalanceQueryBuilder* subBuilder = [BalanceQuery builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addBalanceQuery:[subBuilder buildPartial]];
        break;
      }
      case 162: {
        PhoneBookBuilder* subBuilder = [PhoneBook builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPhoneBooks:[subBuilder buildPartial]];
        break;
      }
      case 170: {
        WeatherBuilder* subBuilder = [Weather builder];
        if (self.hasWeather) {
          [subBuilder mergeFrom:self.weather];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setWeather:[subBuilder buildPartial]];
        break;
      }
      case 178: {
        [self addMessage:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasProtocolVersion {
  return resultProtocols.hasProtocolVersion;
}
- (UInt32) protocolVersion {
  return resultProtocols.protocolVersion;
}
- (ProtocolsBuilder*) setProtocolVersion:(UInt32) value {
  resultProtocols.hasProtocolVersion = YES;
  resultProtocols.protocolVersion = value;
  return self;
}
- (ProtocolsBuilder*) clearProtocolVersion {
  resultProtocols.hasProtocolVersion = NO;
  resultProtocols.protocolVersion = 1;
  return self;
}
- (BOOL) hasVersion {
  return resultProtocols.hasVersion;
}
- (NSString*) version {
  return resultProtocols.version;
}
- (ProtocolsBuilder*) setVersion:(NSString*) value {
  resultProtocols.hasVersion = YES;
  resultProtocols.version = value;
  return self;
}
- (ProtocolsBuilder*) clearVersion {
  resultProtocols.hasVersion = NO;
  resultProtocols.version = @"1.0";
  return self;
}
- (BOOL) hasClientType {
  return resultProtocols.hasClientType;
}
- (UInt32) clientType {
  return resultProtocols.clientType;
}
- (ProtocolsBuilder*) setClientType:(UInt32) value {
  resultProtocols.hasClientType = YES;
  resultProtocols.clientType = value;
  return self;
}
- (ProtocolsBuilder*) clearClientType {
  resultProtocols.hasClientType = NO;
  resultProtocols.clientType = 0;
  return self;
}
- (BOOL) hasCustomerId {
  return resultProtocols.hasCustomerId;
}
- (UInt32) customerId {
  return resultProtocols.customerId;
}
- (ProtocolsBuilder*) setCustomerId:(UInt32) value {
  resultProtocols.hasCustomerId = YES;
  resultProtocols.customerId = value;
  return self;
}
- (ProtocolsBuilder*) clearCustomerId {
  resultProtocols.hasCustomerId = NO;
  resultProtocols.customerId = 1;
  return self;
}
- (BOOL) hasReqId {
  return resultProtocols.hasReqId;
}
- (UInt64) reqId {
  return resultProtocols.reqId;
}
- (ProtocolsBuilder*) setReqId:(UInt64) value {
  resultProtocols.hasReqId = YES;
  resultProtocols.reqId = value;
  return self;
}
- (ProtocolsBuilder*) clearReqId {
  resultProtocols.hasReqId = NO;
  resultProtocols.reqId = 0L;
  return self;
}
- (BOOL) hasType {
  return resultProtocols.hasType;
}
- (UInt32) type {
  return resultProtocols.type;
}
- (ProtocolsBuilder*) setType:(UInt32) value {
  resultProtocols.hasType = YES;
  resultProtocols.type = value;
  return self;
}
- (ProtocolsBuilder*) clearType {
  resultProtocols.hasType = NO;
  resultProtocols.type = 0;
  return self;
}
- (BOOL) hasWatch {
  return resultProtocols.hasWatch;
}
- (Watch*) watch {
  return resultProtocols.watch;
}
- (ProtocolsBuilder*) setWatch:(Watch*) value {
  resultProtocols.hasWatch = YES;
  resultProtocols.watch = value;
  return self;
}
- (ProtocolsBuilder*) setWatchBuilder:(WatchBuilder*) builderForValue {
  return [self setWatch:[builderForValue build]];
}
- (ProtocolsBuilder*) mergeWatch:(Watch*) value {
  if (resultProtocols.hasWatch &&
      resultProtocols.watch != [Watch defaultInstance]) {
    resultProtocols.watch =
      [[[Watch builderWithPrototype:resultProtocols.watch] mergeFrom:value] buildPartial];
  } else {
    resultProtocols.watch = value;
  }
  resultProtocols.hasWatch = YES;
  return self;
}
- (ProtocolsBuilder*) clearWatch {
  resultProtocols.hasWatch = NO;
  resultProtocols.watch = [Watch defaultInstance];
  return self;
}
- (BOOL) hasMobile {
  return resultProtocols.hasMobile;
}
- (Mobile*) mobile {
  return resultProtocols.mobile;
}
- (ProtocolsBuilder*) setMobile:(Mobile*) value {
  resultProtocols.hasMobile = YES;
  resultProtocols.mobile = value;
  return self;
}
- (ProtocolsBuilder*) setMobileBuilder:(MobileBuilder*) builderForValue {
  return [self setMobile:[builderForValue build]];
}
- (ProtocolsBuilder*) mergeMobile:(Mobile*) value {
  if (resultProtocols.hasMobile &&
      resultProtocols.mobile != [Mobile defaultInstance]) {
    resultProtocols.mobile =
      [[[Mobile builderWithPrototype:resultProtocols.mobile] mergeFrom:value] buildPartial];
  } else {
    resultProtocols.mobile = value;
  }
  resultProtocols.hasMobile = YES;
  return self;
}
- (ProtocolsBuilder*) clearMobile {
  resultProtocols.hasMobile = NO;
  resultProtocols.mobile = [Mobile defaultInstance];
  return self;
}
- (BOOL) hasChat {
  return resultProtocols.hasChat;
}
- (Chat*) chat {
  return resultProtocols.chat;
}
- (ProtocolsBuilder*) setChat:(Chat*) value {
  resultProtocols.hasChat = YES;
  resultProtocols.chat = value;
  return self;
}
- (ProtocolsBuilder*) setChatBuilder:(ChatBuilder*) builderForValue {
  return [self setChat:[builderForValue build]];
}
- (ProtocolsBuilder*) mergeChat:(Chat*) value {
  if (resultProtocols.hasChat &&
      resultProtocols.chat != [Chat defaultInstance]) {
    resultProtocols.chat =
      [[[Chat builderWithPrototype:resultProtocols.chat] mergeFrom:value] buildPartial];
  } else {
    resultProtocols.chat = value;
  }
  resultProtocols.hasChat = YES;
  return self;
}
- (ProtocolsBuilder*) clearChat {
  resultProtocols.hasChat = NO;
  resultProtocols.chat = [Chat defaultInstance];
  return self;
}
- (BOOL) hasSetting {
  return resultProtocols.hasSetting;
}
- (Setting*) setting {
  return resultProtocols.setting;
}
- (ProtocolsBuilder*) setSetting:(Setting*) value {
  resultProtocols.hasSetting = YES;
  resultProtocols.setting = value;
  return self;
}
- (ProtocolsBuilder*) setSettingBuilder:(SettingBuilder*) builderForValue {
  return [self setSetting:[builderForValue build]];
}
- (ProtocolsBuilder*) mergeSetting:(Setting*) value {
  if (resultProtocols.hasSetting &&
      resultProtocols.setting != [Setting defaultInstance]) {
    resultProtocols.setting =
      [[[Setting builderWithPrototype:resultProtocols.setting] mergeFrom:value] buildPartial];
  } else {
    resultProtocols.setting = value;
  }
  resultProtocols.hasSetting = YES;
  return self;
}
- (ProtocolsBuilder*) clearSetting {
  resultProtocols.hasSetting = NO;
  resultProtocols.setting = [Setting defaultInstance];
  return self;
}
- (NSMutableArray *)alarms {
  return resultProtocols.alarmsArray;
}
- (Alarm*)alarmsAtIndex:(NSUInteger)index {
  return [resultProtocols alarmsAtIndex:index];
}
- (ProtocolsBuilder *)addAlarms:(Alarm*)value {
  if (resultProtocols.alarmsArray == nil) {
    resultProtocols.alarmsArray = [[NSMutableArray alloc]init];
  }
  [resultProtocols.alarmsArray addObject:value];
  return self;
}
- (ProtocolsBuilder *)setAlarmsArray:(NSArray *)array {
  resultProtocols.alarmsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ProtocolsBuilder *)clearAlarms {
  resultProtocols.alarmsArray = nil;
  return self;
}
- (NSMutableArray *)locks {
  return resultProtocols.locksArray;
}
- (Lock*)locksAtIndex:(NSUInteger)index {
  return [resultProtocols locksAtIndex:index];
}
- (ProtocolsBuilder *)addLocks:(Lock*)value {
  if (resultProtocols.locksArray == nil) {
    resultProtocols.locksArray = [[NSMutableArray alloc]init];
  }
  [resultProtocols.locksArray addObject:value];
  return self;
}
- (ProtocolsBuilder *)setLocksArray:(NSArray *)array {
  resultProtocols.locksArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ProtocolsBuilder *)clearLocks {
  resultProtocols.locksArray = nil;
  return self;
}
- (NSMutableArray *)familyMembers {
  return resultProtocols.familyMembersArray;
}
- (FamilyMember*)familyMembersAtIndex:(NSUInteger)index {
  return [resultProtocols familyMembersAtIndex:index];
}
- (ProtocolsBuilder *)addFamilyMembers:(FamilyMember*)value {
  if (resultProtocols.familyMembersArray == nil) {
    resultProtocols.familyMembersArray = [[NSMutableArray alloc]init];
  }
  [resultProtocols.familyMembersArray addObject:value];
  return self;
}
- (ProtocolsBuilder *)setFamilyMembersArray:(NSArray *)array {
  resultProtocols.familyMembersArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ProtocolsBuilder *)clearFamilyMembers {
  resultProtocols.familyMembersArray = nil;
  return self;
}
- (BOOL) hasPowerSwitch {
  return resultProtocols.hasPowerSwitch;
}
- (PowerSwitch*) powerSwitch {
  return resultProtocols.powerSwitch;
}
- (ProtocolsBuilder*) setPowerSwitch:(PowerSwitch*) value {
  resultProtocols.hasPowerSwitch = YES;
  resultProtocols.powerSwitch = value;
  return self;
}
- (ProtocolsBuilder*) setPowerSwitchBuilder:(PowerSwitchBuilder*) builderForValue {
  return [self setPowerSwitch:[builderForValue build]];
}
- (ProtocolsBuilder*) mergePowerSwitch:(PowerSwitch*) value {
  if (resultProtocols.hasPowerSwitch &&
      resultProtocols.powerSwitch != [PowerSwitch defaultInstance]) {
    resultProtocols.powerSwitch =
      [[[PowerSwitch builderWithPrototype:resultProtocols.powerSwitch] mergeFrom:value] buildPartial];
  } else {
    resultProtocols.powerSwitch = value;
  }
  resultProtocols.hasPowerSwitch = YES;
  return self;
}
- (ProtocolsBuilder*) clearPowerSwitch {
  resultProtocols.hasPowerSwitch = NO;
  resultProtocols.powerSwitch = [PowerSwitch defaultInstance];
  return self;
}
- (NSMutableArray *)fences {
  return resultProtocols.fencesArray;
}
- (Fence*)fencesAtIndex:(NSUInteger)index {
  return [resultProtocols fencesAtIndex:index];
}
- (ProtocolsBuilder *)addFences:(Fence*)value {
  if (resultProtocols.fencesArray == nil) {
    resultProtocols.fencesArray = [[NSMutableArray alloc]init];
  }
  [resultProtocols.fencesArray addObject:value];
  return self;
}
- (ProtocolsBuilder *)setFencesArray:(NSArray *)array {
  resultProtocols.fencesArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ProtocolsBuilder *)clearFences {
  resultProtocols.fencesArray = nil;
  return self;
}
- (BOOL) hasServer {
  return resultProtocols.hasServer;
}
- (Server*) server {
  return resultProtocols.server;
}
- (ProtocolsBuilder*) setServer:(Server*) value {
  resultProtocols.hasServer = YES;
  resultProtocols.server = value;
  return self;
}
- (ProtocolsBuilder*) setServerBuilder:(ServerBuilder*) builderForValue {
  return [self setServer:[builderForValue build]];
}
- (ProtocolsBuilder*) mergeServer:(Server*) value {
  if (resultProtocols.hasServer &&
      resultProtocols.server != [Server defaultInstance]) {
    resultProtocols.server =
      [[[Server builderWithPrototype:resultProtocols.server] mergeFrom:value] buildPartial];
  } else {
    resultProtocols.server = value;
  }
  resultProtocols.hasServer = YES;
  return self;
}
- (ProtocolsBuilder*) clearServer {
  resultProtocols.hasServer = NO;
  resultProtocols.server = [Server defaultInstance];
  return self;
}
- (NSMutableArray *)watches {
  return resultProtocols.watchesArray;
}
- (Watch*)watchesAtIndex:(NSUInteger)index {
  return [resultProtocols watchesAtIndex:index];
}
- (ProtocolsBuilder *)addWatches:(Watch*)value {
  if (resultProtocols.watchesArray == nil) {
    resultProtocols.watchesArray = [[NSMutableArray alloc]init];
  }
  [resultProtocols.watchesArray addObject:value];
  return self;
}
- (ProtocolsBuilder *)setWatchesArray:(NSArray *)array {
  resultProtocols.watchesArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ProtocolsBuilder *)clearWatches {
  resultProtocols.watchesArray = nil;
  return self;
}
- (NSMutableArray *)balanceQuery {
  return resultProtocols.balanceQueryArray;
}
- (BalanceQuery*)balanceQueryAtIndex:(NSUInteger)index {
  return [resultProtocols balanceQueryAtIndex:index];
}
- (ProtocolsBuilder *)addBalanceQuery:(BalanceQuery*)value {
  if (resultProtocols.balanceQueryArray == nil) {
    resultProtocols.balanceQueryArray = [[NSMutableArray alloc]init];
  }
  [resultProtocols.balanceQueryArray addObject:value];
  return self;
}
- (ProtocolsBuilder *)setBalanceQueryArray:(NSArray *)array {
  resultProtocols.balanceQueryArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ProtocolsBuilder *)clearBalanceQuery {
  resultProtocols.balanceQueryArray = nil;
  return self;
}
- (NSMutableArray *)phoneBooks {
  return resultProtocols.phoneBooksArray;
}
- (PhoneBook*)phoneBooksAtIndex:(NSUInteger)index {
  return [resultProtocols phoneBooksAtIndex:index];
}
- (ProtocolsBuilder *)addPhoneBooks:(PhoneBook*)value {
  if (resultProtocols.phoneBooksArray == nil) {
    resultProtocols.phoneBooksArray = [[NSMutableArray alloc]init];
  }
  [resultProtocols.phoneBooksArray addObject:value];
  return self;
}
- (ProtocolsBuilder *)setPhoneBooksArray:(NSArray *)array {
  resultProtocols.phoneBooksArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ProtocolsBuilder *)clearPhoneBooks {
  resultProtocols.phoneBooksArray = nil;
  return self;
}
- (BOOL) hasWeather {
  return resultProtocols.hasWeather;
}
- (Weather*) weather {
  return resultProtocols.weather;
}
- (ProtocolsBuilder*) setWeather:(Weather*) value {
  resultProtocols.hasWeather = YES;
  resultProtocols.weather = value;
  return self;
}
- (ProtocolsBuilder*) setWeatherBuilder:(WeatherBuilder*) builderForValue {
  return [self setWeather:[builderForValue build]];
}
- (ProtocolsBuilder*) mergeWeather:(Weather*) value {
  if (resultProtocols.hasWeather &&
      resultProtocols.weather != [Weather defaultInstance]) {
    resultProtocols.weather =
      [[[Weather builderWithPrototype:resultProtocols.weather] mergeFrom:value] buildPartial];
  } else {
    resultProtocols.weather = value;
  }
  resultProtocols.hasWeather = YES;
  return self;
}
- (ProtocolsBuilder*) clearWeather {
  resultProtocols.hasWeather = NO;
  resultProtocols.weather = [Weather defaultInstance];
  return self;
}
- (NSMutableArray *)message {
  return resultProtocols.messageArray;
}
- (NSString*)messageAtIndex:(NSUInteger)index {
  return [resultProtocols messageAtIndex:index];
}
- (ProtocolsBuilder *)addMessage:(NSString*)value {
  if (resultProtocols.messageArray == nil) {
    resultProtocols.messageArray = [[NSMutableArray alloc]init];
  }
  [resultProtocols.messageArray addObject:value];
  return self;
}
- (ProtocolsBuilder *)setMessageArray:(NSArray *)array {
  resultProtocols.messageArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (ProtocolsBuilder *)clearMessage {
  resultProtocols.messageArray = nil;
  return self;
}
@end

@interface Weather ()
@property (strong) WeatherLive* live;
@property (strong) NSMutableArray * forecastsArray;
@property (strong) NSMutableArray * alarmsArray;
@end

@implementation Weather

- (BOOL) hasLive {
  return !!hasLive_;
}
- (void) setHasLive:(BOOL) _value_ {
  hasLive_ = !!_value_;
}
@synthesize live;
@synthesize forecastsArray;
@dynamic forecasts;
@synthesize alarmsArray;
@dynamic alarms;
- (instancetype) init {
  if ((self = [super init])) {
    self.live = [WeatherLive defaultInstance];
  }
  return self;
}
static Weather* defaultWeatherInstance = nil;
+ (void) initialize {
  if (self == [Weather class]) {
    defaultWeatherInstance = [[Weather alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultWeatherInstance;
}
- (instancetype) defaultInstance {
  return defaultWeatherInstance;
}
- (NSArray *)forecasts {
  return forecastsArray;
}
- (WeatherForecast*)forecastsAtIndex:(NSUInteger)index {
  return [forecastsArray objectAtIndex:index];
}
- (NSArray *)alarms {
  return alarmsArray;
}
- (WeatherAlarm*)alarmsAtIndex:(NSUInteger)index {
  return [alarmsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasLive) {
    [output writeMessage:1 value:self.live];
  }
  [self.forecastsArray enumerateObjectsUsingBlock:^(WeatherForecast *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  [self.alarmsArray enumerateObjectsUsingBlock:^(WeatherAlarm *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:3 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasLive) {
    size_ += computeMessageSize(1, self.live);
  }
  [self.forecastsArray enumerateObjectsUsingBlock:^(WeatherForecast *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  [self.alarmsArray enumerateObjectsUsingBlock:^(WeatherAlarm *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(3, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Weather*) parseFromData:(NSData*) data {
  return (Weather*)[[[Weather builder] mergeFromData:data] build];
}
+ (Weather*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Weather*)[[[Weather builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Weather*) parseFromInputStream:(NSInputStream*) input {
  return (Weather*)[[[Weather builder] mergeFromInputStream:input] build];
}
+ (Weather*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Weather*)[[[Weather builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Weather*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Weather*)[[[Weather builder] mergeFromCodedInputStream:input] build];
}
+ (Weather*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Weather*)[[[Weather builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (WeatherBuilder*) builder {
  return [[WeatherBuilder alloc] init];
}
+ (WeatherBuilder*) builderWithPrototype:(Weather*) prototype {
  return [[Weather builder] mergeFrom:prototype];
}
- (WeatherBuilder*) builder {
  return [Weather builder];
}
- (WeatherBuilder*) toBuilder {
  return [Weather builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasLive) {
    [output appendFormat:@"%@%@ {\n", indent, @"live"];
    [self.live writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.forecastsArray enumerateObjectsUsingBlock:^(WeatherForecast *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"forecasts"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.alarmsArray enumerateObjectsUsingBlock:^(WeatherAlarm *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"alarms"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasLive) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.live storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"live"];
  }
  for (WeatherForecast* element in self.forecastsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"forecasts"];
  }
  for (WeatherAlarm* element in self.alarmsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"alarms"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Weather class]]) {
    return NO;
  }
  Weather *otherMessage = other;
  return
      self.hasLive == otherMessage.hasLive &&
      (!self.hasLive || [self.live isEqual:otherMessage.live]) &&
      [self.forecastsArray isEqualToArray:otherMessage.forecastsArray] &&
      [self.alarmsArray isEqualToArray:otherMessage.alarmsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasLive) {
    hashCode = hashCode * 31 + [self.live hash];
  }
  [self.forecastsArray enumerateObjectsUsingBlock:^(WeatherForecast *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.alarmsArray enumerateObjectsUsingBlock:^(WeatherAlarm *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface WeatherBuilder()
@property (strong) Weather* resultWeather;
@end

@implementation WeatherBuilder
@synthesize resultWeather;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultWeather = [[Weather alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultWeather;
}
- (WeatherBuilder*) clear {
  self.resultWeather = [[Weather alloc] init];
  return self;
}
- (WeatherBuilder*) clone {
  return [Weather builderWithPrototype:resultWeather];
}
- (Weather*) defaultInstance {
  return [Weather defaultInstance];
}
- (Weather*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Weather*) buildPartial {
  Weather* returnMe = resultWeather;
  self.resultWeather = nil;
  return returnMe;
}
- (WeatherBuilder*) mergeFrom:(Weather*) other {
  if (other == [Weather defaultInstance]) {
    return self;
  }
  if (other.hasLive) {
    [self mergeLive:other.live];
  }
  if (other.forecastsArray.count > 0) {
    if (resultWeather.forecastsArray == nil) {
      resultWeather.forecastsArray = [[NSMutableArray alloc] initWithArray:other.forecastsArray];
    } else {
      [resultWeather.forecastsArray addObjectsFromArray:other.forecastsArray];
    }
  }
  if (other.alarmsArray.count > 0) {
    if (resultWeather.alarmsArray == nil) {
      resultWeather.alarmsArray = [[NSMutableArray alloc] initWithArray:other.alarmsArray];
    } else {
      [resultWeather.alarmsArray addObjectsFromArray:other.alarmsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (WeatherBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (WeatherBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        WeatherLiveBuilder* subBuilder = [WeatherLive builder];
        if (self.hasLive) {
          [subBuilder mergeFrom:self.live];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setLive:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        WeatherForecastBuilder* subBuilder = [WeatherForecast builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addForecasts:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        WeatherAlarmBuilder* subBuilder = [WeatherAlarm builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAlarms:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasLive {
  return resultWeather.hasLive;
}
- (WeatherLive*) live {
  return resultWeather.live;
}
- (WeatherBuilder*) setLive:(WeatherLive*) value {
  resultWeather.hasLive = YES;
  resultWeather.live = value;
  return self;
}
- (WeatherBuilder*) setLiveBuilder:(WeatherLiveBuilder*) builderForValue {
  return [self setLive:[builderForValue build]];
}
- (WeatherBuilder*) mergeLive:(WeatherLive*) value {
  if (resultWeather.hasLive &&
      resultWeather.live != [WeatherLive defaultInstance]) {
    resultWeather.live =
      [[[WeatherLive builderWithPrototype:resultWeather.live] mergeFrom:value] buildPartial];
  } else {
    resultWeather.live = value;
  }
  resultWeather.hasLive = YES;
  return self;
}
- (WeatherBuilder*) clearLive {
  resultWeather.hasLive = NO;
  resultWeather.live = [WeatherLive defaultInstance];
  return self;
}
- (NSMutableArray *)forecasts {
  return resultWeather.forecastsArray;
}
- (WeatherForecast*)forecastsAtIndex:(NSUInteger)index {
  return [resultWeather forecastsAtIndex:index];
}
- (WeatherBuilder *)addForecasts:(WeatherForecast*)value {
  if (resultWeather.forecastsArray == nil) {
    resultWeather.forecastsArray = [[NSMutableArray alloc]init];
  }
  [resultWeather.forecastsArray addObject:value];
  return self;
}
- (WeatherBuilder *)setForecastsArray:(NSArray *)array {
  resultWeather.forecastsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (WeatherBuilder *)clearForecasts {
  resultWeather.forecastsArray = nil;
  return self;
}
- (NSMutableArray *)alarms {
  return resultWeather.alarmsArray;
}
- (WeatherAlarm*)alarmsAtIndex:(NSUInteger)index {
  return [resultWeather alarmsAtIndex:index];
}
- (WeatherBuilder *)addAlarms:(WeatherAlarm*)value {
  if (resultWeather.alarmsArray == nil) {
    resultWeather.alarmsArray = [[NSMutableArray alloc]init];
  }
  [resultWeather.alarmsArray addObject:value];
  return self;
}
- (WeatherBuilder *)setAlarmsArray:(NSArray *)array {
  resultWeather.alarmsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (WeatherBuilder *)clearAlarms {
  resultWeather.alarmsArray = nil;
  return self;
}
@end

@interface WeatherLive ()
@property UInt32 status;
@property UInt32 temp;
@property UInt32 humidity;
@property (strong) NSString* windDirection;
@property (strong) NSString* windSpeed;
@property (strong) NSString* vis;
@property (strong) NSString* aqi;
@property (strong) NSString* statusTxt;
@end

@implementation WeatherLive

- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) _value_ {
  hasStatus_ = !!_value_;
}
@synthesize status;
- (BOOL) hasTemp {
  return !!hasTemp_;
}
- (void) setHasTemp:(BOOL) _value_ {
  hasTemp_ = !!_value_;
}
@synthesize temp;
- (BOOL) hasHumidity {
  return !!hasHumidity_;
}
- (void) setHasHumidity:(BOOL) _value_ {
  hasHumidity_ = !!_value_;
}
@synthesize humidity;
- (BOOL) hasWindDirection {
  return !!hasWindDirection_;
}
- (void) setHasWindDirection:(BOOL) _value_ {
  hasWindDirection_ = !!_value_;
}
@synthesize windDirection;
- (BOOL) hasWindSpeed {
  return !!hasWindSpeed_;
}
- (void) setHasWindSpeed:(BOOL) _value_ {
  hasWindSpeed_ = !!_value_;
}
@synthesize windSpeed;
- (BOOL) hasVis {
  return !!hasVis_;
}
- (void) setHasVis:(BOOL) _value_ {
  hasVis_ = !!_value_;
}
@synthesize vis;
- (BOOL) hasAqi {
  return !!hasAqi_;
}
- (void) setHasAqi:(BOOL) _value_ {
  hasAqi_ = !!_value_;
}
@synthesize aqi;
- (BOOL) hasStatusTxt {
  return !!hasStatusTxt_;
}
- (void) setHasStatusTxt:(BOOL) _value_ {
  hasStatusTxt_ = !!_value_;
}
@synthesize statusTxt;
- (instancetype) init {
  if ((self = [super init])) {
    self.status = 0;
    self.temp = 0;
    self.humidity = 0;
    self.windDirection = @"";
    self.windSpeed = @"";
    self.vis = @"";
    self.aqi = @"";
    self.statusTxt = @"";
  }
  return self;
}
static WeatherLive* defaultWeatherLiveInstance = nil;
+ (void) initialize {
  if (self == [WeatherLive class]) {
    defaultWeatherLiveInstance = [[WeatherLive alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultWeatherLiveInstance;
}
- (instancetype) defaultInstance {
  return defaultWeatherLiveInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasStatus) {
    [output writeUInt32:1 value:self.status];
  }
  if (self.hasTemp) {
    [output writeUInt32:2 value:self.temp];
  }
  if (self.hasHumidity) {
    [output writeUInt32:3 value:self.humidity];
  }
  if (self.hasWindDirection) {
    [output writeString:4 value:self.windDirection];
  }
  if (self.hasWindSpeed) {
    [output writeString:5 value:self.windSpeed];
  }
  if (self.hasVis) {
    [output writeString:6 value:self.vis];
  }
  if (self.hasAqi) {
    [output writeString:7 value:self.aqi];
  }
  if (self.hasStatusTxt) {
    [output writeString:8 value:self.statusTxt];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasStatus) {
    size_ += computeUInt32Size(1, self.status);
  }
  if (self.hasTemp) {
    size_ += computeUInt32Size(2, self.temp);
  }
  if (self.hasHumidity) {
    size_ += computeUInt32Size(3, self.humidity);
  }
  if (self.hasWindDirection) {
    size_ += computeStringSize(4, self.windDirection);
  }
  if (self.hasWindSpeed) {
    size_ += computeStringSize(5, self.windSpeed);
  }
  if (self.hasVis) {
    size_ += computeStringSize(6, self.vis);
  }
  if (self.hasAqi) {
    size_ += computeStringSize(7, self.aqi);
  }
  if (self.hasStatusTxt) {
    size_ += computeStringSize(8, self.statusTxt);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (WeatherLive*) parseFromData:(NSData*) data {
  return (WeatherLive*)[[[WeatherLive builder] mergeFromData:data] build];
}
+ (WeatherLive*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (WeatherLive*)[[[WeatherLive builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (WeatherLive*) parseFromInputStream:(NSInputStream*) input {
  return (WeatherLive*)[[[WeatherLive builder] mergeFromInputStream:input] build];
}
+ (WeatherLive*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (WeatherLive*)[[[WeatherLive builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (WeatherLive*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (WeatherLive*)[[[WeatherLive builder] mergeFromCodedInputStream:input] build];
}
+ (WeatherLive*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (WeatherLive*)[[[WeatherLive builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (WeatherLiveBuilder*) builder {
  return [[WeatherLiveBuilder alloc] init];
}
+ (WeatherLiveBuilder*) builderWithPrototype:(WeatherLive*) prototype {
  return [[WeatherLive builder] mergeFrom:prototype];
}
- (WeatherLiveBuilder*) builder {
  return [WeatherLive builder];
}
- (WeatherLiveBuilder*) toBuilder {
  return [WeatherLive builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"status", [NSNumber numberWithInteger:self.status]];
  }
  if (self.hasTemp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"temp", [NSNumber numberWithInteger:self.temp]];
  }
  if (self.hasHumidity) {
    [output appendFormat:@"%@%@: %@\n", indent, @"humidity", [NSNumber numberWithInteger:self.humidity]];
  }
  if (self.hasWindDirection) {
    [output appendFormat:@"%@%@: %@\n", indent, @"windDirection", self.windDirection];
  }
  if (self.hasWindSpeed) {
    [output appendFormat:@"%@%@: %@\n", indent, @"windSpeed", self.windSpeed];
  }
  if (self.hasVis) {
    [output appendFormat:@"%@%@: %@\n", indent, @"vis", self.vis];
  }
  if (self.hasAqi) {
    [output appendFormat:@"%@%@: %@\n", indent, @"aqi", self.aqi];
  }
  if (self.hasStatusTxt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"statusTxt", self.statusTxt];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasStatus) {
    [dictionary setObject: [NSNumber numberWithInteger:self.status] forKey: @"status"];
  }
  if (self.hasTemp) {
    [dictionary setObject: [NSNumber numberWithInteger:self.temp] forKey: @"temp"];
  }
  if (self.hasHumidity) {
    [dictionary setObject: [NSNumber numberWithInteger:self.humidity] forKey: @"humidity"];
  }
  if (self.hasWindDirection) {
    [dictionary setObject: self.windDirection forKey: @"windDirection"];
  }
  if (self.hasWindSpeed) {
    [dictionary setObject: self.windSpeed forKey: @"windSpeed"];
  }
  if (self.hasVis) {
    [dictionary setObject: self.vis forKey: @"vis"];
  }
  if (self.hasAqi) {
    [dictionary setObject: self.aqi forKey: @"aqi"];
  }
  if (self.hasStatusTxt) {
    [dictionary setObject: self.statusTxt forKey: @"statusTxt"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[WeatherLive class]]) {
    return NO;
  }
  WeatherLive *otherMessage = other;
  return
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || self.status == otherMessage.status) &&
      self.hasTemp == otherMessage.hasTemp &&
      (!self.hasTemp || self.temp == otherMessage.temp) &&
      self.hasHumidity == otherMessage.hasHumidity &&
      (!self.hasHumidity || self.humidity == otherMessage.humidity) &&
      self.hasWindDirection == otherMessage.hasWindDirection &&
      (!self.hasWindDirection || [self.windDirection isEqual:otherMessage.windDirection]) &&
      self.hasWindSpeed == otherMessage.hasWindSpeed &&
      (!self.hasWindSpeed || [self.windSpeed isEqual:otherMessage.windSpeed]) &&
      self.hasVis == otherMessage.hasVis &&
      (!self.hasVis || [self.vis isEqual:otherMessage.vis]) &&
      self.hasAqi == otherMessage.hasAqi &&
      (!self.hasAqi || [self.aqi isEqual:otherMessage.aqi]) &&
      self.hasStatusTxt == otherMessage.hasStatusTxt &&
      (!self.hasStatusTxt || [self.statusTxt isEqual:otherMessage.statusTxt]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.status] hash];
  }
  if (self.hasTemp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.temp] hash];
  }
  if (self.hasHumidity) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.humidity] hash];
  }
  if (self.hasWindDirection) {
    hashCode = hashCode * 31 + [self.windDirection hash];
  }
  if (self.hasWindSpeed) {
    hashCode = hashCode * 31 + [self.windSpeed hash];
  }
  if (self.hasVis) {
    hashCode = hashCode * 31 + [self.vis hash];
  }
  if (self.hasAqi) {
    hashCode = hashCode * 31 + [self.aqi hash];
  }
  if (self.hasStatusTxt) {
    hashCode = hashCode * 31 + [self.statusTxt hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface WeatherLiveBuilder()
@property (strong) WeatherLive* resultWeatherLive;
@end

@implementation WeatherLiveBuilder
@synthesize resultWeatherLive;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultWeatherLive = [[WeatherLive alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultWeatherLive;
}
- (WeatherLiveBuilder*) clear {
  self.resultWeatherLive = [[WeatherLive alloc] init];
  return self;
}
- (WeatherLiveBuilder*) clone {
  return [WeatherLive builderWithPrototype:resultWeatherLive];
}
- (WeatherLive*) defaultInstance {
  return [WeatherLive defaultInstance];
}
- (WeatherLive*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (WeatherLive*) buildPartial {
  WeatherLive* returnMe = resultWeatherLive;
  self.resultWeatherLive = nil;
  return returnMe;
}
- (WeatherLiveBuilder*) mergeFrom:(WeatherLive*) other {
  if (other == [WeatherLive defaultInstance]) {
    return self;
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasTemp) {
    [self setTemp:other.temp];
  }
  if (other.hasHumidity) {
    [self setHumidity:other.humidity];
  }
  if (other.hasWindDirection) {
    [self setWindDirection:other.windDirection];
  }
  if (other.hasWindSpeed) {
    [self setWindSpeed:other.windSpeed];
  }
  if (other.hasVis) {
    [self setVis:other.vis];
  }
  if (other.hasAqi) {
    [self setAqi:other.aqi];
  }
  if (other.hasStatusTxt) {
    [self setStatusTxt:other.statusTxt];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (WeatherLiveBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (WeatherLiveBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setStatus:[input readUInt32]];
        break;
      }
      case 16: {
        [self setTemp:[input readUInt32]];
        break;
      }
      case 24: {
        [self setHumidity:[input readUInt32]];
        break;
      }
      case 34: {
        [self setWindDirection:[input readString]];
        break;
      }
      case 42: {
        [self setWindSpeed:[input readString]];
        break;
      }
      case 50: {
        [self setVis:[input readString]];
        break;
      }
      case 58: {
        [self setAqi:[input readString]];
        break;
      }
      case 66: {
        [self setStatusTxt:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasStatus {
  return resultWeatherLive.hasStatus;
}
- (UInt32) status {
  return resultWeatherLive.status;
}
- (WeatherLiveBuilder*) setStatus:(UInt32) value {
  resultWeatherLive.hasStatus = YES;
  resultWeatherLive.status = value;
  return self;
}
- (WeatherLiveBuilder*) clearStatus {
  resultWeatherLive.hasStatus = NO;
  resultWeatherLive.status = 0;
  return self;
}
- (BOOL) hasTemp {
  return resultWeatherLive.hasTemp;
}
- (UInt32) temp {
  return resultWeatherLive.temp;
}
- (WeatherLiveBuilder*) setTemp:(UInt32) value {
  resultWeatherLive.hasTemp = YES;
  resultWeatherLive.temp = value;
  return self;
}
- (WeatherLiveBuilder*) clearTemp {
  resultWeatherLive.hasTemp = NO;
  resultWeatherLive.temp = 0;
  return self;
}
- (BOOL) hasHumidity {
  return resultWeatherLive.hasHumidity;
}
- (UInt32) humidity {
  return resultWeatherLive.humidity;
}
- (WeatherLiveBuilder*) setHumidity:(UInt32) value {
  resultWeatherLive.hasHumidity = YES;
  resultWeatherLive.humidity = value;
  return self;
}
- (WeatherLiveBuilder*) clearHumidity {
  resultWeatherLive.hasHumidity = NO;
  resultWeatherLive.humidity = 0;
  return self;
}
- (BOOL) hasWindDirection {
  return resultWeatherLive.hasWindDirection;
}
- (NSString*) windDirection {
  return resultWeatherLive.windDirection;
}
- (WeatherLiveBuilder*) setWindDirection:(NSString*) value {
  resultWeatherLive.hasWindDirection = YES;
  resultWeatherLive.windDirection = value;
  return self;
}
- (WeatherLiveBuilder*) clearWindDirection {
  resultWeatherLive.hasWindDirection = NO;
  resultWeatherLive.windDirection = @"";
  return self;
}
- (BOOL) hasWindSpeed {
  return resultWeatherLive.hasWindSpeed;
}
- (NSString*) windSpeed {
  return resultWeatherLive.windSpeed;
}
- (WeatherLiveBuilder*) setWindSpeed:(NSString*) value {
  resultWeatherLive.hasWindSpeed = YES;
  resultWeatherLive.windSpeed = value;
  return self;
}
- (WeatherLiveBuilder*) clearWindSpeed {
  resultWeatherLive.hasWindSpeed = NO;
  resultWeatherLive.windSpeed = @"";
  return self;
}
- (BOOL) hasVis {
  return resultWeatherLive.hasVis;
}
- (NSString*) vis {
  return resultWeatherLive.vis;
}
- (WeatherLiveBuilder*) setVis:(NSString*) value {
  resultWeatherLive.hasVis = YES;
  resultWeatherLive.vis = value;
  return self;
}
- (WeatherLiveBuilder*) clearVis {
  resultWeatherLive.hasVis = NO;
  resultWeatherLive.vis = @"";
  return self;
}
- (BOOL) hasAqi {
  return resultWeatherLive.hasAqi;
}
- (NSString*) aqi {
  return resultWeatherLive.aqi;
}
- (WeatherLiveBuilder*) setAqi:(NSString*) value {
  resultWeatherLive.hasAqi = YES;
  resultWeatherLive.aqi = value;
  return self;
}
- (WeatherLiveBuilder*) clearAqi {
  resultWeatherLive.hasAqi = NO;
  resultWeatherLive.aqi = @"";
  return self;
}
- (BOOL) hasStatusTxt {
  return resultWeatherLive.hasStatusTxt;
}
- (NSString*) statusTxt {
  return resultWeatherLive.statusTxt;
}
- (WeatherLiveBuilder*) setStatusTxt:(NSString*) value {
  resultWeatherLive.hasStatusTxt = YES;
  resultWeatherLive.statusTxt = value;
  return self;
}
- (WeatherLiveBuilder*) clearStatusTxt {
  resultWeatherLive.hasStatusTxt = NO;
  resultWeatherLive.statusTxt = @"";
  return self;
}
@end

@interface WeatherForecast ()
@property UInt64 day;
@property UInt32 dayStatus;
@property UInt32 nightStatus;
@property UInt32 tempMax;
@property UInt32 tempMin;
@property UInt32 humidity;
@property (strong) NSString* windDirection;
@property (strong) NSString* windSpeed;
@property (strong) NSString* vis;
@property (strong) NSString* dayStatusTxt;
@property (strong) NSString* nightStatusTxt;
@end

@implementation WeatherForecast

- (BOOL) hasDay {
  return !!hasDay_;
}
- (void) setHasDay:(BOOL) _value_ {
  hasDay_ = !!_value_;
}
@synthesize day;
- (BOOL) hasDayStatus {
  return !!hasDayStatus_;
}
- (void) setHasDayStatus:(BOOL) _value_ {
  hasDayStatus_ = !!_value_;
}
@synthesize dayStatus;
- (BOOL) hasNightStatus {
  return !!hasNightStatus_;
}
- (void) setHasNightStatus:(BOOL) _value_ {
  hasNightStatus_ = !!_value_;
}
@synthesize nightStatus;
- (BOOL) hasTempMax {
  return !!hasTempMax_;
}
- (void) setHasTempMax:(BOOL) _value_ {
  hasTempMax_ = !!_value_;
}
@synthesize tempMax;
- (BOOL) hasTempMin {
  return !!hasTempMin_;
}
- (void) setHasTempMin:(BOOL) _value_ {
  hasTempMin_ = !!_value_;
}
@synthesize tempMin;
- (BOOL) hasHumidity {
  return !!hasHumidity_;
}
- (void) setHasHumidity:(BOOL) _value_ {
  hasHumidity_ = !!_value_;
}
@synthesize humidity;
- (BOOL) hasWindDirection {
  return !!hasWindDirection_;
}
- (void) setHasWindDirection:(BOOL) _value_ {
  hasWindDirection_ = !!_value_;
}
@synthesize windDirection;
- (BOOL) hasWindSpeed {
  return !!hasWindSpeed_;
}
- (void) setHasWindSpeed:(BOOL) _value_ {
  hasWindSpeed_ = !!_value_;
}
@synthesize windSpeed;
- (BOOL) hasVis {
  return !!hasVis_;
}
- (void) setHasVis:(BOOL) _value_ {
  hasVis_ = !!_value_;
}
@synthesize vis;
- (BOOL) hasDayStatusTxt {
  return !!hasDayStatusTxt_;
}
- (void) setHasDayStatusTxt:(BOOL) _value_ {
  hasDayStatusTxt_ = !!_value_;
}
@synthesize dayStatusTxt;
- (BOOL) hasNightStatusTxt {
  return !!hasNightStatusTxt_;
}
- (void) setHasNightStatusTxt:(BOOL) _value_ {
  hasNightStatusTxt_ = !!_value_;
}
@synthesize nightStatusTxt;
- (instancetype) init {
  if ((self = [super init])) {
    self.day = 0L;
    self.dayStatus = 0;
    self.nightStatus = 0;
    self.tempMax = 0;
    self.tempMin = 0;
    self.humidity = 0;
    self.windDirection = @"";
    self.windSpeed = @"";
    self.vis = @"";
    self.dayStatusTxt = @"";
    self.nightStatusTxt = @"";
  }
  return self;
}
static WeatherForecast* defaultWeatherForecastInstance = nil;
+ (void) initialize {
  if (self == [WeatherForecast class]) {
    defaultWeatherForecastInstance = [[WeatherForecast alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultWeatherForecastInstance;
}
- (instancetype) defaultInstance {
  return defaultWeatherForecastInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasDay) {
    [output writeUInt64:1 value:self.day];
  }
  if (self.hasDayStatus) {
    [output writeUInt32:2 value:self.dayStatus];
  }
  if (self.hasNightStatus) {
    [output writeUInt32:3 value:self.nightStatus];
  }
  if (self.hasTempMax) {
    [output writeUInt32:4 value:self.tempMax];
  }
  if (self.hasTempMin) {
    [output writeUInt32:5 value:self.tempMin];
  }
  if (self.hasHumidity) {
    [output writeUInt32:6 value:self.humidity];
  }
  if (self.hasWindDirection) {
    [output writeString:7 value:self.windDirection];
  }
  if (self.hasWindSpeed) {
    [output writeString:8 value:self.windSpeed];
  }
  if (self.hasVis) {
    [output writeString:9 value:self.vis];
  }
  if (self.hasDayStatusTxt) {
    [output writeString:10 value:self.dayStatusTxt];
  }
  if (self.hasNightStatusTxt) {
    [output writeString:11 value:self.nightStatusTxt];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasDay) {
    size_ += computeUInt64Size(1, self.day);
  }
  if (self.hasDayStatus) {
    size_ += computeUInt32Size(2, self.dayStatus);
  }
  if (self.hasNightStatus) {
    size_ += computeUInt32Size(3, self.nightStatus);
  }
  if (self.hasTempMax) {
    size_ += computeUInt32Size(4, self.tempMax);
  }
  if (self.hasTempMin) {
    size_ += computeUInt32Size(5, self.tempMin);
  }
  if (self.hasHumidity) {
    size_ += computeUInt32Size(6, self.humidity);
  }
  if (self.hasWindDirection) {
    size_ += computeStringSize(7, self.windDirection);
  }
  if (self.hasWindSpeed) {
    size_ += computeStringSize(8, self.windSpeed);
  }
  if (self.hasVis) {
    size_ += computeStringSize(9, self.vis);
  }
  if (self.hasDayStatusTxt) {
    size_ += computeStringSize(10, self.dayStatusTxt);
  }
  if (self.hasNightStatusTxt) {
    size_ += computeStringSize(11, self.nightStatusTxt);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (WeatherForecast*) parseFromData:(NSData*) data {
  return (WeatherForecast*)[[[WeatherForecast builder] mergeFromData:data] build];
}
+ (WeatherForecast*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (WeatherForecast*)[[[WeatherForecast builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (WeatherForecast*) parseFromInputStream:(NSInputStream*) input {
  return (WeatherForecast*)[[[WeatherForecast builder] mergeFromInputStream:input] build];
}
+ (WeatherForecast*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (WeatherForecast*)[[[WeatherForecast builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (WeatherForecast*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (WeatherForecast*)[[[WeatherForecast builder] mergeFromCodedInputStream:input] build];
}
+ (WeatherForecast*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (WeatherForecast*)[[[WeatherForecast builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (WeatherForecastBuilder*) builder {
  return [[WeatherForecastBuilder alloc] init];
}
+ (WeatherForecastBuilder*) builderWithPrototype:(WeatherForecast*) prototype {
  return [[WeatherForecast builder] mergeFrom:prototype];
}
- (WeatherForecastBuilder*) builder {
  return [WeatherForecast builder];
}
- (WeatherForecastBuilder*) toBuilder {
  return [WeatherForecast builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasDay) {
    [output appendFormat:@"%@%@: %@\n", indent, @"day", [NSNumber numberWithLongLong:self.day]];
  }
  if (self.hasDayStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dayStatus", [NSNumber numberWithInteger:self.dayStatus]];
  }
  if (self.hasNightStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nightStatus", [NSNumber numberWithInteger:self.nightStatus]];
  }
  if (self.hasTempMax) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tempMax", [NSNumber numberWithInteger:self.tempMax]];
  }
  if (self.hasTempMin) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tempMin", [NSNumber numberWithInteger:self.tempMin]];
  }
  if (self.hasHumidity) {
    [output appendFormat:@"%@%@: %@\n", indent, @"humidity", [NSNumber numberWithInteger:self.humidity]];
  }
  if (self.hasWindDirection) {
    [output appendFormat:@"%@%@: %@\n", indent, @"windDirection", self.windDirection];
  }
  if (self.hasWindSpeed) {
    [output appendFormat:@"%@%@: %@\n", indent, @"windSpeed", self.windSpeed];
  }
  if (self.hasVis) {
    [output appendFormat:@"%@%@: %@\n", indent, @"vis", self.vis];
  }
  if (self.hasDayStatusTxt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dayStatusTxt", self.dayStatusTxt];
  }
  if (self.hasNightStatusTxt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nightStatusTxt", self.nightStatusTxt];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasDay) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.day] forKey: @"day"];
  }
  if (self.hasDayStatus) {
    [dictionary setObject: [NSNumber numberWithInteger:self.dayStatus] forKey: @"dayStatus"];
  }
  if (self.hasNightStatus) {
    [dictionary setObject: [NSNumber numberWithInteger:self.nightStatus] forKey: @"nightStatus"];
  }
  if (self.hasTempMax) {
    [dictionary setObject: [NSNumber numberWithInteger:self.tempMax] forKey: @"tempMax"];
  }
  if (self.hasTempMin) {
    [dictionary setObject: [NSNumber numberWithInteger:self.tempMin] forKey: @"tempMin"];
  }
  if (self.hasHumidity) {
    [dictionary setObject: [NSNumber numberWithInteger:self.humidity] forKey: @"humidity"];
  }
  if (self.hasWindDirection) {
    [dictionary setObject: self.windDirection forKey: @"windDirection"];
  }
  if (self.hasWindSpeed) {
    [dictionary setObject: self.windSpeed forKey: @"windSpeed"];
  }
  if (self.hasVis) {
    [dictionary setObject: self.vis forKey: @"vis"];
  }
  if (self.hasDayStatusTxt) {
    [dictionary setObject: self.dayStatusTxt forKey: @"dayStatusTxt"];
  }
  if (self.hasNightStatusTxt) {
    [dictionary setObject: self.nightStatusTxt forKey: @"nightStatusTxt"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[WeatherForecast class]]) {
    return NO;
  }
  WeatherForecast *otherMessage = other;
  return
      self.hasDay == otherMessage.hasDay &&
      (!self.hasDay || self.day == otherMessage.day) &&
      self.hasDayStatus == otherMessage.hasDayStatus &&
      (!self.hasDayStatus || self.dayStatus == otherMessage.dayStatus) &&
      self.hasNightStatus == otherMessage.hasNightStatus &&
      (!self.hasNightStatus || self.nightStatus == otherMessage.nightStatus) &&
      self.hasTempMax == otherMessage.hasTempMax &&
      (!self.hasTempMax || self.tempMax == otherMessage.tempMax) &&
      self.hasTempMin == otherMessage.hasTempMin &&
      (!self.hasTempMin || self.tempMin == otherMessage.tempMin) &&
      self.hasHumidity == otherMessage.hasHumidity &&
      (!self.hasHumidity || self.humidity == otherMessage.humidity) &&
      self.hasWindDirection == otherMessage.hasWindDirection &&
      (!self.hasWindDirection || [self.windDirection isEqual:otherMessage.windDirection]) &&
      self.hasWindSpeed == otherMessage.hasWindSpeed &&
      (!self.hasWindSpeed || [self.windSpeed isEqual:otherMessage.windSpeed]) &&
      self.hasVis == otherMessage.hasVis &&
      (!self.hasVis || [self.vis isEqual:otherMessage.vis]) &&
      self.hasDayStatusTxt == otherMessage.hasDayStatusTxt &&
      (!self.hasDayStatusTxt || [self.dayStatusTxt isEqual:otherMessage.dayStatusTxt]) &&
      self.hasNightStatusTxt == otherMessage.hasNightStatusTxt &&
      (!self.hasNightStatusTxt || [self.nightStatusTxt isEqual:otherMessage.nightStatusTxt]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasDay) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.day] hash];
  }
  if (self.hasDayStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.dayStatus] hash];
  }
  if (self.hasNightStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.nightStatus] hash];
  }
  if (self.hasTempMax) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.tempMax] hash];
  }
  if (self.hasTempMin) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.tempMin] hash];
  }
  if (self.hasHumidity) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.humidity] hash];
  }
  if (self.hasWindDirection) {
    hashCode = hashCode * 31 + [self.windDirection hash];
  }
  if (self.hasWindSpeed) {
    hashCode = hashCode * 31 + [self.windSpeed hash];
  }
  if (self.hasVis) {
    hashCode = hashCode * 31 + [self.vis hash];
  }
  if (self.hasDayStatusTxt) {
    hashCode = hashCode * 31 + [self.dayStatusTxt hash];
  }
  if (self.hasNightStatusTxt) {
    hashCode = hashCode * 31 + [self.nightStatusTxt hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface WeatherForecastBuilder()
@property (strong) WeatherForecast* resultWeatherForecast;
@end

@implementation WeatherForecastBuilder
@synthesize resultWeatherForecast;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultWeatherForecast = [[WeatherForecast alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultWeatherForecast;
}
- (WeatherForecastBuilder*) clear {
  self.resultWeatherForecast = [[WeatherForecast alloc] init];
  return self;
}
- (WeatherForecastBuilder*) clone {
  return [WeatherForecast builderWithPrototype:resultWeatherForecast];
}
- (WeatherForecast*) defaultInstance {
  return [WeatherForecast defaultInstance];
}
- (WeatherForecast*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (WeatherForecast*) buildPartial {
  WeatherForecast* returnMe = resultWeatherForecast;
  self.resultWeatherForecast = nil;
  return returnMe;
}
- (WeatherForecastBuilder*) mergeFrom:(WeatherForecast*) other {
  if (other == [WeatherForecast defaultInstance]) {
    return self;
  }
  if (other.hasDay) {
    [self setDay:other.day];
  }
  if (other.hasDayStatus) {
    [self setDayStatus:other.dayStatus];
  }
  if (other.hasNightStatus) {
    [self setNightStatus:other.nightStatus];
  }
  if (other.hasTempMax) {
    [self setTempMax:other.tempMax];
  }
  if (other.hasTempMin) {
    [self setTempMin:other.tempMin];
  }
  if (other.hasHumidity) {
    [self setHumidity:other.humidity];
  }
  if (other.hasWindDirection) {
    [self setWindDirection:other.windDirection];
  }
  if (other.hasWindSpeed) {
    [self setWindSpeed:other.windSpeed];
  }
  if (other.hasVis) {
    [self setVis:other.vis];
  }
  if (other.hasDayStatusTxt) {
    [self setDayStatusTxt:other.dayStatusTxt];
  }
  if (other.hasNightStatusTxt) {
    [self setNightStatusTxt:other.nightStatusTxt];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (WeatherForecastBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (WeatherForecastBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setDay:[input readUInt64]];
        break;
      }
      case 16: {
        [self setDayStatus:[input readUInt32]];
        break;
      }
      case 24: {
        [self setNightStatus:[input readUInt32]];
        break;
      }
      case 32: {
        [self setTempMax:[input readUInt32]];
        break;
      }
      case 40: {
        [self setTempMin:[input readUInt32]];
        break;
      }
      case 48: {
        [self setHumidity:[input readUInt32]];
        break;
      }
      case 58: {
        [self setWindDirection:[input readString]];
        break;
      }
      case 66: {
        [self setWindSpeed:[input readString]];
        break;
      }
      case 74: {
        [self setVis:[input readString]];
        break;
      }
      case 82: {
        [self setDayStatusTxt:[input readString]];
        break;
      }
      case 90: {
        [self setNightStatusTxt:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasDay {
  return resultWeatherForecast.hasDay;
}
- (UInt64) day {
  return resultWeatherForecast.day;
}
- (WeatherForecastBuilder*) setDay:(UInt64) value {
  resultWeatherForecast.hasDay = YES;
  resultWeatherForecast.day = value;
  return self;
}
- (WeatherForecastBuilder*) clearDay {
  resultWeatherForecast.hasDay = NO;
  resultWeatherForecast.day = 0L;
  return self;
}
- (BOOL) hasDayStatus {
  return resultWeatherForecast.hasDayStatus;
}
- (UInt32) dayStatus {
  return resultWeatherForecast.dayStatus;
}
- (WeatherForecastBuilder*) setDayStatus:(UInt32) value {
  resultWeatherForecast.hasDayStatus = YES;
  resultWeatherForecast.dayStatus = value;
  return self;
}
- (WeatherForecastBuilder*) clearDayStatus {
  resultWeatherForecast.hasDayStatus = NO;
  resultWeatherForecast.dayStatus = 0;
  return self;
}
- (BOOL) hasNightStatus {
  return resultWeatherForecast.hasNightStatus;
}
- (UInt32) nightStatus {
  return resultWeatherForecast.nightStatus;
}
- (WeatherForecastBuilder*) setNightStatus:(UInt32) value {
  resultWeatherForecast.hasNightStatus = YES;
  resultWeatherForecast.nightStatus = value;
  return self;
}
- (WeatherForecastBuilder*) clearNightStatus {
  resultWeatherForecast.hasNightStatus = NO;
  resultWeatherForecast.nightStatus = 0;
  return self;
}
- (BOOL) hasTempMax {
  return resultWeatherForecast.hasTempMax;
}
- (UInt32) tempMax {
  return resultWeatherForecast.tempMax;
}
- (WeatherForecastBuilder*) setTempMax:(UInt32) value {
  resultWeatherForecast.hasTempMax = YES;
  resultWeatherForecast.tempMax = value;
  return self;
}
- (WeatherForecastBuilder*) clearTempMax {
  resultWeatherForecast.hasTempMax = NO;
  resultWeatherForecast.tempMax = 0;
  return self;
}
- (BOOL) hasTempMin {
  return resultWeatherForecast.hasTempMin;
}
- (UInt32) tempMin {
  return resultWeatherForecast.tempMin;
}
- (WeatherForecastBuilder*) setTempMin:(UInt32) value {
  resultWeatherForecast.hasTempMin = YES;
  resultWeatherForecast.tempMin = value;
  return self;
}
- (WeatherForecastBuilder*) clearTempMin {
  resultWeatherForecast.hasTempMin = NO;
  resultWeatherForecast.tempMin = 0;
  return self;
}
- (BOOL) hasHumidity {
  return resultWeatherForecast.hasHumidity;
}
- (UInt32) humidity {
  return resultWeatherForecast.humidity;
}
- (WeatherForecastBuilder*) setHumidity:(UInt32) value {
  resultWeatherForecast.hasHumidity = YES;
  resultWeatherForecast.humidity = value;
  return self;
}
- (WeatherForecastBuilder*) clearHumidity {
  resultWeatherForecast.hasHumidity = NO;
  resultWeatherForecast.humidity = 0;
  return self;
}
- (BOOL) hasWindDirection {
  return resultWeatherForecast.hasWindDirection;
}
- (NSString*) windDirection {
  return resultWeatherForecast.windDirection;
}
- (WeatherForecastBuilder*) setWindDirection:(NSString*) value {
  resultWeatherForecast.hasWindDirection = YES;
  resultWeatherForecast.windDirection = value;
  return self;
}
- (WeatherForecastBuilder*) clearWindDirection {
  resultWeatherForecast.hasWindDirection = NO;
  resultWeatherForecast.windDirection = @"";
  return self;
}
- (BOOL) hasWindSpeed {
  return resultWeatherForecast.hasWindSpeed;
}
- (NSString*) windSpeed {
  return resultWeatherForecast.windSpeed;
}
- (WeatherForecastBuilder*) setWindSpeed:(NSString*) value {
  resultWeatherForecast.hasWindSpeed = YES;
  resultWeatherForecast.windSpeed = value;
  return self;
}
- (WeatherForecastBuilder*) clearWindSpeed {
  resultWeatherForecast.hasWindSpeed = NO;
  resultWeatherForecast.windSpeed = @"";
  return self;
}
- (BOOL) hasVis {
  return resultWeatherForecast.hasVis;
}
- (NSString*) vis {
  return resultWeatherForecast.vis;
}
- (WeatherForecastBuilder*) setVis:(NSString*) value {
  resultWeatherForecast.hasVis = YES;
  resultWeatherForecast.vis = value;
  return self;
}
- (WeatherForecastBuilder*) clearVis {
  resultWeatherForecast.hasVis = NO;
  resultWeatherForecast.vis = @"";
  return self;
}
- (BOOL) hasDayStatusTxt {
  return resultWeatherForecast.hasDayStatusTxt;
}
- (NSString*) dayStatusTxt {
  return resultWeatherForecast.dayStatusTxt;
}
- (WeatherForecastBuilder*) setDayStatusTxt:(NSString*) value {
  resultWeatherForecast.hasDayStatusTxt = YES;
  resultWeatherForecast.dayStatusTxt = value;
  return self;
}
- (WeatherForecastBuilder*) clearDayStatusTxt {
  resultWeatherForecast.hasDayStatusTxt = NO;
  resultWeatherForecast.dayStatusTxt = @"";
  return self;
}
- (BOOL) hasNightStatusTxt {
  return resultWeatherForecast.hasNightStatusTxt;
}
- (NSString*) nightStatusTxt {
  return resultWeatherForecast.nightStatusTxt;
}
- (WeatherForecastBuilder*) setNightStatusTxt:(NSString*) value {
  resultWeatherForecast.hasNightStatusTxt = YES;
  resultWeatherForecast.nightStatusTxt = value;
  return self;
}
- (WeatherForecastBuilder*) clearNightStatusTxt {
  resultWeatherForecast.hasNightStatusTxt = NO;
  resultWeatherForecast.nightStatusTxt = @"";
  return self;
}
@end

@interface WeatherAlarm ()
@property (strong) NSString* level;
@property (strong) NSString* state;
@property (strong) NSString* title;
@property (strong) NSString* txt;
@property (strong) NSString* type;
@end

@implementation WeatherAlarm

- (BOOL) hasLevel {
  return !!hasLevel_;
}
- (void) setHasLevel:(BOOL) _value_ {
  hasLevel_ = !!_value_;
}
@synthesize level;
- (BOOL) hasState {
  return !!hasState_;
}
- (void) setHasState:(BOOL) _value_ {
  hasState_ = !!_value_;
}
@synthesize state;
- (BOOL) hasTitle {
  return !!hasTitle_;
}
- (void) setHasTitle:(BOOL) _value_ {
  hasTitle_ = !!_value_;
}
@synthesize title;
- (BOOL) hasTxt {
  return !!hasTxt_;
}
- (void) setHasTxt:(BOOL) _value_ {
  hasTxt_ = !!_value_;
}
@synthesize txt;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (instancetype) init {
  if ((self = [super init])) {
    self.level = @"";
    self.state = @"";
    self.title = @"";
    self.txt = @"";
    self.type = @"";
  }
  return self;
}
static WeatherAlarm* defaultWeatherAlarmInstance = nil;
+ (void) initialize {
  if (self == [WeatherAlarm class]) {
    defaultWeatherAlarmInstance = [[WeatherAlarm alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultWeatherAlarmInstance;
}
- (instancetype) defaultInstance {
  return defaultWeatherAlarmInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasLevel) {
    [output writeString:1 value:self.level];
  }
  if (self.hasState) {
    [output writeString:2 value:self.state];
  }
  if (self.hasTitle) {
    [output writeString:3 value:self.title];
  }
  if (self.hasTxt) {
    [output writeString:4 value:self.txt];
  }
  if (self.hasType) {
    [output writeString:5 value:self.type];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasLevel) {
    size_ += computeStringSize(1, self.level);
  }
  if (self.hasState) {
    size_ += computeStringSize(2, self.state);
  }
  if (self.hasTitle) {
    size_ += computeStringSize(3, self.title);
  }
  if (self.hasTxt) {
    size_ += computeStringSize(4, self.txt);
  }
  if (self.hasType) {
    size_ += computeStringSize(5, self.type);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (WeatherAlarm*) parseFromData:(NSData*) data {
  return (WeatherAlarm*)[[[WeatherAlarm builder] mergeFromData:data] build];
}
+ (WeatherAlarm*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (WeatherAlarm*)[[[WeatherAlarm builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (WeatherAlarm*) parseFromInputStream:(NSInputStream*) input {
  return (WeatherAlarm*)[[[WeatherAlarm builder] mergeFromInputStream:input] build];
}
+ (WeatherAlarm*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (WeatherAlarm*)[[[WeatherAlarm builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (WeatherAlarm*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (WeatherAlarm*)[[[WeatherAlarm builder] mergeFromCodedInputStream:input] build];
}
+ (WeatherAlarm*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (WeatherAlarm*)[[[WeatherAlarm builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (WeatherAlarmBuilder*) builder {
  return [[WeatherAlarmBuilder alloc] init];
}
+ (WeatherAlarmBuilder*) builderWithPrototype:(WeatherAlarm*) prototype {
  return [[WeatherAlarm builder] mergeFrom:prototype];
}
- (WeatherAlarmBuilder*) builder {
  return [WeatherAlarm builder];
}
- (WeatherAlarmBuilder*) toBuilder {
  return [WeatherAlarm builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasLevel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"level", self.level];
  }
  if (self.hasState) {
    [output appendFormat:@"%@%@: %@\n", indent, @"state", self.state];
  }
  if (self.hasTitle) {
    [output appendFormat:@"%@%@: %@\n", indent, @"title", self.title];
  }
  if (self.hasTxt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"txt", self.txt];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", self.type];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasLevel) {
    [dictionary setObject: self.level forKey: @"level"];
  }
  if (self.hasState) {
    [dictionary setObject: self.state forKey: @"state"];
  }
  if (self.hasTitle) {
    [dictionary setObject: self.title forKey: @"title"];
  }
  if (self.hasTxt) {
    [dictionary setObject: self.txt forKey: @"txt"];
  }
  if (self.hasType) {
    [dictionary setObject: self.type forKey: @"type"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[WeatherAlarm class]]) {
    return NO;
  }
  WeatherAlarm *otherMessage = other;
  return
      self.hasLevel == otherMessage.hasLevel &&
      (!self.hasLevel || [self.level isEqual:otherMessage.level]) &&
      self.hasState == otherMessage.hasState &&
      (!self.hasState || [self.state isEqual:otherMessage.state]) &&
      self.hasTitle == otherMessage.hasTitle &&
      (!self.hasTitle || [self.title isEqual:otherMessage.title]) &&
      self.hasTxt == otherMessage.hasTxt &&
      (!self.hasTxt || [self.txt isEqual:otherMessage.txt]) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || [self.type isEqual:otherMessage.type]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasLevel) {
    hashCode = hashCode * 31 + [self.level hash];
  }
  if (self.hasState) {
    hashCode = hashCode * 31 + [self.state hash];
  }
  if (self.hasTitle) {
    hashCode = hashCode * 31 + [self.title hash];
  }
  if (self.hasTxt) {
    hashCode = hashCode * 31 + [self.txt hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + [self.type hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface WeatherAlarmBuilder()
@property (strong) WeatherAlarm* resultWeatherAlarm;
@end

@implementation WeatherAlarmBuilder
@synthesize resultWeatherAlarm;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultWeatherAlarm = [[WeatherAlarm alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultWeatherAlarm;
}
- (WeatherAlarmBuilder*) clear {
  self.resultWeatherAlarm = [[WeatherAlarm alloc] init];
  return self;
}
- (WeatherAlarmBuilder*) clone {
  return [WeatherAlarm builderWithPrototype:resultWeatherAlarm];
}
- (WeatherAlarm*) defaultInstance {
  return [WeatherAlarm defaultInstance];
}
- (WeatherAlarm*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (WeatherAlarm*) buildPartial {
  WeatherAlarm* returnMe = resultWeatherAlarm;
  self.resultWeatherAlarm = nil;
  return returnMe;
}
- (WeatherAlarmBuilder*) mergeFrom:(WeatherAlarm*) other {
  if (other == [WeatherAlarm defaultInstance]) {
    return self;
  }
  if (other.hasLevel) {
    [self setLevel:other.level];
  }
  if (other.hasState) {
    [self setState:other.state];
  }
  if (other.hasTitle) {
    [self setTitle:other.title];
  }
  if (other.hasTxt) {
    [self setTxt:other.txt];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (WeatherAlarmBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (WeatherAlarmBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setLevel:[input readString]];
        break;
      }
      case 18: {
        [self setState:[input readString]];
        break;
      }
      case 26: {
        [self setTitle:[input readString]];
        break;
      }
      case 34: {
        [self setTxt:[input readString]];
        break;
      }
      case 42: {
        [self setType:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasLevel {
  return resultWeatherAlarm.hasLevel;
}
- (NSString*) level {
  return resultWeatherAlarm.level;
}
- (WeatherAlarmBuilder*) setLevel:(NSString*) value {
  resultWeatherAlarm.hasLevel = YES;
  resultWeatherAlarm.level = value;
  return self;
}
- (WeatherAlarmBuilder*) clearLevel {
  resultWeatherAlarm.hasLevel = NO;
  resultWeatherAlarm.level = @"";
  return self;
}
- (BOOL) hasState {
  return resultWeatherAlarm.hasState;
}
- (NSString*) state {
  return resultWeatherAlarm.state;
}
- (WeatherAlarmBuilder*) setState:(NSString*) value {
  resultWeatherAlarm.hasState = YES;
  resultWeatherAlarm.state = value;
  return self;
}
- (WeatherAlarmBuilder*) clearState {
  resultWeatherAlarm.hasState = NO;
  resultWeatherAlarm.state = @"";
  return self;
}
- (BOOL) hasTitle {
  return resultWeatherAlarm.hasTitle;
}
- (NSString*) title {
  return resultWeatherAlarm.title;
}
- (WeatherAlarmBuilder*) setTitle:(NSString*) value {
  resultWeatherAlarm.hasTitle = YES;
  resultWeatherAlarm.title = value;
  return self;
}
- (WeatherAlarmBuilder*) clearTitle {
  resultWeatherAlarm.hasTitle = NO;
  resultWeatherAlarm.title = @"";
  return self;
}
- (BOOL) hasTxt {
  return resultWeatherAlarm.hasTxt;
}
- (NSString*) txt {
  return resultWeatherAlarm.txt;
}
- (WeatherAlarmBuilder*) setTxt:(NSString*) value {
  resultWeatherAlarm.hasTxt = YES;
  resultWeatherAlarm.txt = value;
  return self;
}
- (WeatherAlarmBuilder*) clearTxt {
  resultWeatherAlarm.hasTxt = NO;
  resultWeatherAlarm.txt = @"";
  return self;
}
- (BOOL) hasType {
  return resultWeatherAlarm.hasType;
}
- (NSString*) type {
  return resultWeatherAlarm.type;
}
- (WeatherAlarmBuilder*) setType:(NSString*) value {
  resultWeatherAlarm.hasType = YES;
  resultWeatherAlarm.type = value;
  return self;
}
- (WeatherAlarmBuilder*) clearType {
  resultWeatherAlarm.hasType = NO;
  resultWeatherAlarm.type = @"";
  return self;
}
@end

@interface PhoneBook ()
@property (strong) NSString* nickName;
@property UInt64 number;
@property BOOL isFather;
@property BOOL isMother;
@end

@implementation PhoneBook

- (BOOL) hasNickName {
  return !!hasNickName_;
}
- (void) setHasNickName:(BOOL) _value_ {
  hasNickName_ = !!_value_;
}
@synthesize nickName;
- (BOOL) hasNumber {
  return !!hasNumber_;
}
- (void) setHasNumber:(BOOL) _value_ {
  hasNumber_ = !!_value_;
}
@synthesize number;
- (BOOL) hasIsFather {
  return !!hasIsFather_;
}
- (void) setHasIsFather:(BOOL) _value_ {
  hasIsFather_ = !!_value_;
}
- (BOOL) isFather {
  return !!isFather_;
}
- (void) setIsFather:(BOOL) _value_ {
  isFather_ = !!_value_;
}
- (BOOL) hasIsMother {
  return !!hasIsMother_;
}
- (void) setHasIsMother:(BOOL) _value_ {
  hasIsMother_ = !!_value_;
}
- (BOOL) isMother {
  return !!isMother_;
}
- (void) setIsMother:(BOOL) _value_ {
  isMother_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.nickName = @"";
    self.number = 0L;
    self.isFather = NO;
    self.isMother = NO;
  }
  return self;
}
static PhoneBook* defaultPhoneBookInstance = nil;
+ (void) initialize {
  if (self == [PhoneBook class]) {
    defaultPhoneBookInstance = [[PhoneBook alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPhoneBookInstance;
}
- (instancetype) defaultInstance {
  return defaultPhoneBookInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasNickName) {
    [output writeString:1 value:self.nickName];
  }
  if (self.hasNumber) {
    [output writeUInt64:2 value:self.number];
  }
  if (self.hasIsFather) {
    [output writeBool:3 value:self.isFather];
  }
  if (self.hasIsMother) {
    [output writeBool:4 value:self.isMother];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasNickName) {
    size_ += computeStringSize(1, self.nickName);
  }
  if (self.hasNumber) {
    size_ += computeUInt64Size(2, self.number);
  }
  if (self.hasIsFather) {
    size_ += computeBoolSize(3, self.isFather);
  }
  if (self.hasIsMother) {
    size_ += computeBoolSize(4, self.isMother);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PhoneBook*) parseFromData:(NSData*) data {
  return (PhoneBook*)[[[PhoneBook builder] mergeFromData:data] build];
}
+ (PhoneBook*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PhoneBook*)[[[PhoneBook builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PhoneBook*) parseFromInputStream:(NSInputStream*) input {
  return (PhoneBook*)[[[PhoneBook builder] mergeFromInputStream:input] build];
}
+ (PhoneBook*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PhoneBook*)[[[PhoneBook builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PhoneBook*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PhoneBook*)[[[PhoneBook builder] mergeFromCodedInputStream:input] build];
}
+ (PhoneBook*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PhoneBook*)[[[PhoneBook builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PhoneBookBuilder*) builder {
  return [[PhoneBookBuilder alloc] init];
}
+ (PhoneBookBuilder*) builderWithPrototype:(PhoneBook*) prototype {
  return [[PhoneBook builder] mergeFrom:prototype];
}
- (PhoneBookBuilder*) builder {
  return [PhoneBook builder];
}
- (PhoneBookBuilder*) toBuilder {
  return [PhoneBook builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasNickName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nickName", self.nickName];
  }
  if (self.hasNumber) {
    [output appendFormat:@"%@%@: %@\n", indent, @"number", [NSNumber numberWithLongLong:self.number]];
  }
  if (self.hasIsFather) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isFather", [NSNumber numberWithBool:self.isFather]];
  }
  if (self.hasIsMother) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isMother", [NSNumber numberWithBool:self.isMother]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasNickName) {
    [dictionary setObject: self.nickName forKey: @"nickName"];
  }
  if (self.hasNumber) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.number] forKey: @"number"];
  }
  if (self.hasIsFather) {
    [dictionary setObject: [NSNumber numberWithBool:self.isFather] forKey: @"isFather"];
  }
  if (self.hasIsMother) {
    [dictionary setObject: [NSNumber numberWithBool:self.isMother] forKey: @"isMother"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PhoneBook class]]) {
    return NO;
  }
  PhoneBook *otherMessage = other;
  return
      self.hasNickName == otherMessage.hasNickName &&
      (!self.hasNickName || [self.nickName isEqual:otherMessage.nickName]) &&
      self.hasNumber == otherMessage.hasNumber &&
      (!self.hasNumber || self.number == otherMessage.number) &&
      self.hasIsFather == otherMessage.hasIsFather &&
      (!self.hasIsFather || self.isFather == otherMessage.isFather) &&
      self.hasIsMother == otherMessage.hasIsMother &&
      (!self.hasIsMother || self.isMother == otherMessage.isMother) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasNickName) {
    hashCode = hashCode * 31 + [self.nickName hash];
  }
  if (self.hasNumber) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.number] hash];
  }
  if (self.hasIsFather) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isFather] hash];
  }
  if (self.hasIsMother) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isMother] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PhoneBookBuilder()
@property (strong) PhoneBook* resultPhoneBook;
@end

@implementation PhoneBookBuilder
@synthesize resultPhoneBook;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPhoneBook = [[PhoneBook alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPhoneBook;
}
- (PhoneBookBuilder*) clear {
  self.resultPhoneBook = [[PhoneBook alloc] init];
  return self;
}
- (PhoneBookBuilder*) clone {
  return [PhoneBook builderWithPrototype:resultPhoneBook];
}
- (PhoneBook*) defaultInstance {
  return [PhoneBook defaultInstance];
}
- (PhoneBook*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PhoneBook*) buildPartial {
  PhoneBook* returnMe = resultPhoneBook;
  self.resultPhoneBook = nil;
  return returnMe;
}
- (PhoneBookBuilder*) mergeFrom:(PhoneBook*) other {
  if (other == [PhoneBook defaultInstance]) {
    return self;
  }
  if (other.hasNickName) {
    [self setNickName:other.nickName];
  }
  if (other.hasNumber) {
    [self setNumber:other.number];
  }
  if (other.hasIsFather) {
    [self setIsFather:other.isFather];
  }
  if (other.hasIsMother) {
    [self setIsMother:other.isMother];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PhoneBookBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PhoneBookBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setNickName:[input readString]];
        break;
      }
      case 16: {
        [self setNumber:[input readUInt64]];
        break;
      }
      case 24: {
        [self setIsFather:[input readBool]];
        break;
      }
      case 32: {
        [self setIsMother:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasNickName {
  return resultPhoneBook.hasNickName;
}
- (NSString*) nickName {
  return resultPhoneBook.nickName;
}
- (PhoneBookBuilder*) setNickName:(NSString*) value {
  resultPhoneBook.hasNickName = YES;
  resultPhoneBook.nickName = value;
  return self;
}
- (PhoneBookBuilder*) clearNickName {
  resultPhoneBook.hasNickName = NO;
  resultPhoneBook.nickName = @"";
  return self;
}
- (BOOL) hasNumber {
  return resultPhoneBook.hasNumber;
}
- (UInt64) number {
  return resultPhoneBook.number;
}
- (PhoneBookBuilder*) setNumber:(UInt64) value {
  resultPhoneBook.hasNumber = YES;
  resultPhoneBook.number = value;
  return self;
}
- (PhoneBookBuilder*) clearNumber {
  resultPhoneBook.hasNumber = NO;
  resultPhoneBook.number = 0L;
  return self;
}
- (BOOL) hasIsFather {
  return resultPhoneBook.hasIsFather;
}
- (BOOL) isFather {
  return resultPhoneBook.isFather;
}
- (PhoneBookBuilder*) setIsFather:(BOOL) value {
  resultPhoneBook.hasIsFather = YES;
  resultPhoneBook.isFather = value;
  return self;
}
- (PhoneBookBuilder*) clearIsFather {
  resultPhoneBook.hasIsFather = NO;
  resultPhoneBook.isFather = NO;
  return self;
}
- (BOOL) hasIsMother {
  return resultPhoneBook.hasIsMother;
}
- (BOOL) isMother {
  return resultPhoneBook.isMother;
}
- (PhoneBookBuilder*) setIsMother:(BOOL) value {
  resultPhoneBook.hasIsMother = YES;
  resultPhoneBook.isMother = value;
  return self;
}
- (PhoneBookBuilder*) clearIsMother {
  resultPhoneBook.hasIsMother = NO;
  resultPhoneBook.isMother = NO;
  return self;
}
@end

@interface BalanceQuery ()
@property UInt32 smsPort;
@property (strong) NSString* msg;
@end

@implementation BalanceQuery

- (BOOL) hasSmsPort {
  return !!hasSmsPort_;
}
- (void) setHasSmsPort:(BOOL) _value_ {
  hasSmsPort_ = !!_value_;
}
@synthesize smsPort;
- (BOOL) hasMsg {
  return !!hasMsg_;
}
- (void) setHasMsg:(BOOL) _value_ {
  hasMsg_ = !!_value_;
}
@synthesize msg;
- (instancetype) init {
  if ((self = [super init])) {
    self.smsPort = 0;
    self.msg = @"";
  }
  return self;
}
static BalanceQuery* defaultBalanceQueryInstance = nil;
+ (void) initialize {
  if (self == [BalanceQuery class]) {
    defaultBalanceQueryInstance = [[BalanceQuery alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBalanceQueryInstance;
}
- (instancetype) defaultInstance {
  return defaultBalanceQueryInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSmsPort) {
    [output writeUInt32:1 value:self.smsPort];
  }
  if (self.hasMsg) {
    [output writeString:2 value:self.msg];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSmsPort) {
    size_ += computeUInt32Size(1, self.smsPort);
  }
  if (self.hasMsg) {
    size_ += computeStringSize(2, self.msg);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BalanceQuery*) parseFromData:(NSData*) data {
  return (BalanceQuery*)[[[BalanceQuery builder] mergeFromData:data] build];
}
+ (BalanceQuery*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BalanceQuery*)[[[BalanceQuery builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BalanceQuery*) parseFromInputStream:(NSInputStream*) input {
  return (BalanceQuery*)[[[BalanceQuery builder] mergeFromInputStream:input] build];
}
+ (BalanceQuery*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BalanceQuery*)[[[BalanceQuery builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BalanceQuery*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BalanceQuery*)[[[BalanceQuery builder] mergeFromCodedInputStream:input] build];
}
+ (BalanceQuery*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BalanceQuery*)[[[BalanceQuery builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BalanceQueryBuilder*) builder {
  return [[BalanceQueryBuilder alloc] init];
}
+ (BalanceQueryBuilder*) builderWithPrototype:(BalanceQuery*) prototype {
  return [[BalanceQuery builder] mergeFrom:prototype];
}
- (BalanceQueryBuilder*) builder {
  return [BalanceQuery builder];
}
- (BalanceQueryBuilder*) toBuilder {
  return [BalanceQuery builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSmsPort) {
    [output appendFormat:@"%@%@: %@\n", indent, @"smsPort", [NSNumber numberWithInteger:self.smsPort]];
  }
  if (self.hasMsg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msg", self.msg];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSmsPort) {
    [dictionary setObject: [NSNumber numberWithInteger:self.smsPort] forKey: @"smsPort"];
  }
  if (self.hasMsg) {
    [dictionary setObject: self.msg forKey: @"msg"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BalanceQuery class]]) {
    return NO;
  }
  BalanceQuery *otherMessage = other;
  return
      self.hasSmsPort == otherMessage.hasSmsPort &&
      (!self.hasSmsPort || self.smsPort == otherMessage.smsPort) &&
      self.hasMsg == otherMessage.hasMsg &&
      (!self.hasMsg || [self.msg isEqual:otherMessage.msg]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSmsPort) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.smsPort] hash];
  }
  if (self.hasMsg) {
    hashCode = hashCode * 31 + [self.msg hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BalanceQueryBuilder()
@property (strong) BalanceQuery* resultBalanceQuery;
@end

@implementation BalanceQueryBuilder
@synthesize resultBalanceQuery;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultBalanceQuery = [[BalanceQuery alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultBalanceQuery;
}
- (BalanceQueryBuilder*) clear {
  self.resultBalanceQuery = [[BalanceQuery alloc] init];
  return self;
}
- (BalanceQueryBuilder*) clone {
  return [BalanceQuery builderWithPrototype:resultBalanceQuery];
}
- (BalanceQuery*) defaultInstance {
  return [BalanceQuery defaultInstance];
}
- (BalanceQuery*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BalanceQuery*) buildPartial {
  BalanceQuery* returnMe = resultBalanceQuery;
  self.resultBalanceQuery = nil;
  return returnMe;
}
- (BalanceQueryBuilder*) mergeFrom:(BalanceQuery*) other {
  if (other == [BalanceQuery defaultInstance]) {
    return self;
  }
  if (other.hasSmsPort) {
    [self setSmsPort:other.smsPort];
  }
  if (other.hasMsg) {
    [self setMsg:other.msg];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BalanceQueryBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BalanceQueryBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSmsPort:[input readUInt32]];
        break;
      }
      case 18: {
        [self setMsg:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasSmsPort {
  return resultBalanceQuery.hasSmsPort;
}
- (UInt32) smsPort {
  return resultBalanceQuery.smsPort;
}
- (BalanceQueryBuilder*) setSmsPort:(UInt32) value {
  resultBalanceQuery.hasSmsPort = YES;
  resultBalanceQuery.smsPort = value;
  return self;
}
- (BalanceQueryBuilder*) clearSmsPort {
  resultBalanceQuery.hasSmsPort = NO;
  resultBalanceQuery.smsPort = 0;
  return self;
}
- (BOOL) hasMsg {
  return resultBalanceQuery.hasMsg;
}
- (NSString*) msg {
  return resultBalanceQuery.msg;
}
- (BalanceQueryBuilder*) setMsg:(NSString*) value {
  resultBalanceQuery.hasMsg = YES;
  resultBalanceQuery.msg = value;
  return self;
}
- (BalanceQueryBuilder*) clearMsg {
  resultBalanceQuery.hasMsg = NO;
  resultBalanceQuery.msg = @"";
  return self;
}
@end

@interface Server ()
@property (strong) NSMutableArray * ipsArray;
@property UInt64 serverTime;
@property UInt32 status;
@property (strong) NSString* msg;
@property UInt64 smsPort;
@end

@implementation Server

@synthesize ipsArray;
@dynamic ips;
- (BOOL) hasServerTime {
  return !!hasServerTime_;
}
- (void) setHasServerTime:(BOOL) _value_ {
  hasServerTime_ = !!_value_;
}
@synthesize serverTime;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) _value_ {
  hasStatus_ = !!_value_;
}
@synthesize status;
- (BOOL) hasMsg {
  return !!hasMsg_;
}
- (void) setHasMsg:(BOOL) _value_ {
  hasMsg_ = !!_value_;
}
@synthesize msg;
- (BOOL) hasSmsPort {
  return !!hasSmsPort_;
}
- (void) setHasSmsPort:(BOOL) _value_ {
  hasSmsPort_ = !!_value_;
}
@synthesize smsPort;
- (instancetype) init {
  if ((self = [super init])) {
    self.serverTime = 0L;
    self.status = 1;
    self.msg = @"";
    self.smsPort = 0L;
  }
  return self;
}
static Server* defaultServerInstance = nil;
+ (void) initialize {
  if (self == [Server class]) {
    defaultServerInstance = [[Server alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultServerInstance;
}
- (instancetype) defaultInstance {
  return defaultServerInstance;
}
- (NSArray *)ips {
  return ipsArray;
}
- (NSData*)ipsAtIndex:(NSUInteger)index {
  return [ipsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.ipsArray enumerateObjectsUsingBlock:^(NSData *element, NSUInteger idx, BOOL *stop) {
    [output writeData:1 value:element];
  }];
  if (self.hasServerTime) {
    [output writeUInt64:2 value:self.serverTime];
  }
  if (self.hasStatus) {
    [output writeUInt32:3 value:self.status];
  }
  if (self.hasMsg) {
    [output writeString:4 value:self.msg];
  }
  if (self.hasSmsPort) {
    [output writeUInt64:5 value:self.smsPort];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.ipsArray.count;
    [self.ipsArray enumerateObjectsUsingBlock:^(NSData *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeDataSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasServerTime) {
    size_ += computeUInt64Size(2, self.serverTime);
  }
  if (self.hasStatus) {
    size_ += computeUInt32Size(3, self.status);
  }
  if (self.hasMsg) {
    size_ += computeStringSize(4, self.msg);
  }
  if (self.hasSmsPort) {
    size_ += computeUInt64Size(5, self.smsPort);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Server*) parseFromData:(NSData*) data {
  return (Server*)[[[Server builder] mergeFromData:data] build];
}
+ (Server*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Server*)[[[Server builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Server*) parseFromInputStream:(NSInputStream*) input {
  return (Server*)[[[Server builder] mergeFromInputStream:input] build];
}
+ (Server*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Server*)[[[Server builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Server*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Server*)[[[Server builder] mergeFromCodedInputStream:input] build];
}
+ (Server*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Server*)[[[Server builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ServerBuilder*) builder {
  return [[ServerBuilder alloc] init];
}
+ (ServerBuilder*) builderWithPrototype:(Server*) prototype {
  return [[Server builder] mergeFrom:prototype];
}
- (ServerBuilder*) builder {
  return [Server builder];
}
- (ServerBuilder*) toBuilder {
  return [Server builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.ipsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ips", obj];
  }];
  if (self.hasServerTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"serverTime", [NSNumber numberWithLongLong:self.serverTime]];
  }
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"status", [NSNumber numberWithInteger:self.status]];
  }
  if (self.hasMsg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msg", self.msg];
  }
  if (self.hasSmsPort) {
    [output appendFormat:@"%@%@: %@\n", indent, @"smsPort", [NSNumber numberWithLongLong:self.smsPort]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  [dictionary setObject:self.ips forKey: @"ips"];
  if (self.hasServerTime) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.serverTime] forKey: @"serverTime"];
  }
  if (self.hasStatus) {
    [dictionary setObject: [NSNumber numberWithInteger:self.status] forKey: @"status"];
  }
  if (self.hasMsg) {
    [dictionary setObject: self.msg forKey: @"msg"];
  }
  if (self.hasSmsPort) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.smsPort] forKey: @"smsPort"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Server class]]) {
    return NO;
  }
  Server *otherMessage = other;
  return
      [self.ipsArray isEqualToArray:otherMessage.ipsArray] &&
      self.hasServerTime == otherMessage.hasServerTime &&
      (!self.hasServerTime || self.serverTime == otherMessage.serverTime) &&
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || self.status == otherMessage.status) &&
      self.hasMsg == otherMessage.hasMsg &&
      (!self.hasMsg || [self.msg isEqual:otherMessage.msg]) &&
      self.hasSmsPort == otherMessage.hasSmsPort &&
      (!self.hasSmsPort || self.smsPort == otherMessage.smsPort) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.ipsArray enumerateObjectsUsingBlock:^(NSData *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasServerTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.serverTime] hash];
  }
  if (self.hasStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.status] hash];
  }
  if (self.hasMsg) {
    hashCode = hashCode * 31 + [self.msg hash];
  }
  if (self.hasSmsPort) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.smsPort] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ServerBuilder()
@property (strong) Server* resultServer;
@end

@implementation ServerBuilder
@synthesize resultServer;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultServer = [[Server alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultServer;
}
- (ServerBuilder*) clear {
  self.resultServer = [[Server alloc] init];
  return self;
}
- (ServerBuilder*) clone {
  return [Server builderWithPrototype:resultServer];
}
- (Server*) defaultInstance {
  return [Server defaultInstance];
}
- (Server*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Server*) buildPartial {
  Server* returnMe = resultServer;
  self.resultServer = nil;
  return returnMe;
}
- (ServerBuilder*) mergeFrom:(Server*) other {
  if (other == [Server defaultInstance]) {
    return self;
  }
  if (other.ipsArray.count > 0) {
    if (resultServer.ipsArray == nil) {
      resultServer.ipsArray = [[NSMutableArray alloc] initWithArray:other.ipsArray];
    } else {
      [resultServer.ipsArray addObjectsFromArray:other.ipsArray];
    }
  }
  if (other.hasServerTime) {
    [self setServerTime:other.serverTime];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasMsg) {
    [self setMsg:other.msg];
  }
  if (other.hasSmsPort) {
    [self setSmsPort:other.smsPort];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ServerBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ServerBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self addIps:[input readData]];
        break;
      }
      case 16: {
        [self setServerTime:[input readUInt64]];
        break;
      }
      case 24: {
        [self setStatus:[input readUInt32]];
        break;
      }
      case 34: {
        [self setMsg:[input readString]];
        break;
      }
      case 40: {
        [self setSmsPort:[input readUInt64]];
        break;
      }
    }
  }
}
- (NSMutableArray *)ips {
  return resultServer.ipsArray;
}
- (NSData*)ipsAtIndex:(NSUInteger)index {
  return [resultServer ipsAtIndex:index];
}
- (ServerBuilder *)addIps:(NSData*)value {
  if (resultServer.ipsArray == nil) {
    resultServer.ipsArray = [[NSMutableArray alloc]init];
  }
  [resultServer.ipsArray addObject:value];
  return self;
}
- (ServerBuilder *)setIpsArray:(NSArray *)array {
  resultServer.ipsArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (ServerBuilder *)clearIps {
  resultServer.ipsArray = nil;
  return self;
}
- (BOOL) hasServerTime {
  return resultServer.hasServerTime;
}
- (UInt64) serverTime {
  return resultServer.serverTime;
}
- (ServerBuilder*) setServerTime:(UInt64) value {
  resultServer.hasServerTime = YES;
  resultServer.serverTime = value;
  return self;
}
- (ServerBuilder*) clearServerTime {
  resultServer.hasServerTime = NO;
  resultServer.serverTime = 0L;
  return self;
}
- (BOOL) hasStatus {
  return resultServer.hasStatus;
}
- (UInt32) status {
  return resultServer.status;
}
- (ServerBuilder*) setStatus:(UInt32) value {
  resultServer.hasStatus = YES;
  resultServer.status = value;
  return self;
}
- (ServerBuilder*) clearStatus {
  resultServer.hasStatus = NO;
  resultServer.status = 1;
  return self;
}
- (BOOL) hasMsg {
  return resultServer.hasMsg;
}
- (NSString*) msg {
  return resultServer.msg;
}
- (ServerBuilder*) setMsg:(NSString*) value {
  resultServer.hasMsg = YES;
  resultServer.msg = value;
  return self;
}
- (ServerBuilder*) clearMsg {
  resultServer.hasMsg = NO;
  resultServer.msg = @"";
  return self;
}
- (BOOL) hasSmsPort {
  return resultServer.hasSmsPort;
}
- (UInt64) smsPort {
  return resultServer.smsPort;
}
- (ServerBuilder*) setSmsPort:(UInt64) value {
  resultServer.hasSmsPort = YES;
  resultServer.smsPort = value;
  return self;
}
- (ServerBuilder*) clearSmsPort {
  resultServer.hasSmsPort = NO;
  resultServer.smsPort = 0L;
  return self;
}
@end

@interface Watch ()
@property UInt64 id;
@property (strong) NSString* nickName;
@property UInt64 number;
@property UInt64 imsi;
@property UInt64 imei;
@property UInt32 locationType;
@property Float64 lon;
@property Float64 lat;
@property (strong) NSString* location;
@property UInt32 battery;
@property UInt32 age;
@property UInt32 grade;
@property (strong) NSString* avatar;
@property UInt32 gender;
@property UInt32 height;
@property UInt32 weight;
@property UInt32 loveCount;
@property UInt32 status;
@property (strong) NSMutableArray * locationsArray;
@property UInt32 volume;
@property (strong) NSString* qrCode;
@property (strong) NSData* qrCodePic;
@property UInt64 latestLoginTime;
@property UInt32 lightSensorOn;
@property UInt32 lightSensorStatus;
@property UInt32 gmotionOn;
@property UInt32 gmotionSteps;
@property UInt32 langString;
@end

@implementation Watch

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasNickName {
  return !!hasNickName_;
}
- (void) setHasNickName:(BOOL) _value_ {
  hasNickName_ = !!_value_;
}
@synthesize nickName;
- (BOOL) hasNumber {
  return !!hasNumber_;
}
- (void) setHasNumber:(BOOL) _value_ {
  hasNumber_ = !!_value_;
}
@synthesize number;
- (BOOL) hasImsi {
  return !!hasImsi_;
}
- (void) setHasImsi:(BOOL) _value_ {
  hasImsi_ = !!_value_;
}
@synthesize imsi;
- (BOOL) hasImei {
  return !!hasImei_;
}
- (void) setHasImei:(BOOL) _value_ {
  hasImei_ = !!_value_;
}
@synthesize imei;
- (BOOL) hasLocationType {
  return !!hasLocationType_;
}
- (void) setHasLocationType:(BOOL) _value_ {
  hasLocationType_ = !!_value_;
}
@synthesize locationType;
- (BOOL) hasLon {
  return !!hasLon_;
}
- (void) setHasLon:(BOOL) _value_ {
  hasLon_ = !!_value_;
}
@synthesize lon;
- (BOOL) hasLat {
  return !!hasLat_;
}
- (void) setHasLat:(BOOL) _value_ {
  hasLat_ = !!_value_;
}
@synthesize lat;
- (BOOL) hasLocation {
  return !!hasLocation_;
}
- (void) setHasLocation:(BOOL) _value_ {
  hasLocation_ = !!_value_;
}
@synthesize location;
- (BOOL) hasBattery {
  return !!hasBattery_;
}
- (void) setHasBattery:(BOOL) _value_ {
  hasBattery_ = !!_value_;
}
@synthesize battery;
- (BOOL) hasAge {
  return !!hasAge_;
}
- (void) setHasAge:(BOOL) _value_ {
  hasAge_ = !!_value_;
}
@synthesize age;
- (BOOL) hasGrade {
  return !!hasGrade_;
}
- (void) setHasGrade:(BOOL) _value_ {
  hasGrade_ = !!_value_;
}
@synthesize grade;
- (BOOL) hasAvatar {
  return !!hasAvatar_;
}
- (void) setHasAvatar:(BOOL) _value_ {
  hasAvatar_ = !!_value_;
}
@synthesize avatar;
- (BOOL) hasGender {
  return !!hasGender_;
}
- (void) setHasGender:(BOOL) _value_ {
  hasGender_ = !!_value_;
}
@synthesize gender;
- (BOOL) hasHeight {
  return !!hasHeight_;
}
- (void) setHasHeight:(BOOL) _value_ {
  hasHeight_ = !!_value_;
}
@synthesize height;
- (BOOL) hasWeight {
  return !!hasWeight_;
}
- (void) setHasWeight:(BOOL) _value_ {
  hasWeight_ = !!_value_;
}
@synthesize weight;
- (BOOL) hasLoveCount {
  return !!hasLoveCount_;
}
- (void) setHasLoveCount:(BOOL) _value_ {
  hasLoveCount_ = !!_value_;
}
@synthesize loveCount;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) _value_ {
  hasStatus_ = !!_value_;
}
@synthesize status;
@synthesize locationsArray;
@dynamic locations;
- (BOOL) hasVolume {
  return !!hasVolume_;
}
- (void) setHasVolume:(BOOL) _value_ {
  hasVolume_ = !!_value_;
}
@synthesize volume;
- (BOOL) hasQrCode {
  return !!hasQrCode_;
}
- (void) setHasQrCode:(BOOL) _value_ {
  hasQrCode_ = !!_value_;
}
@synthesize qrCode;
- (BOOL) hasQrCodePic {
  return !!hasQrCodePic_;
}
- (void) setHasQrCodePic:(BOOL) _value_ {
  hasQrCodePic_ = !!_value_;
}
@synthesize qrCodePic;
- (BOOL) hasLatestLoginTime {
  return !!hasLatestLoginTime_;
}
- (void) setHasLatestLoginTime:(BOOL) _value_ {
  hasLatestLoginTime_ = !!_value_;
}
@synthesize latestLoginTime;
- (BOOL) hasLightSensorOn {
  return !!hasLightSensorOn_;
}
- (void) setHasLightSensorOn:(BOOL) _value_ {
  hasLightSensorOn_ = !!_value_;
}
@synthesize lightSensorOn;
- (BOOL) hasLightSensorStatus {
  return !!hasLightSensorStatus_;
}
- (void) setHasLightSensorStatus:(BOOL) _value_ {
  hasLightSensorStatus_ = !!_value_;
}
@synthesize lightSensorStatus;
- (BOOL) hasGmotionOn {
  return !!hasGmotionOn_;
}
- (void) setHasGmotionOn:(BOOL) _value_ {
  hasGmotionOn_ = !!_value_;
}
@synthesize gmotionOn;
- (BOOL) hasGmotionSteps {
  return !!hasGmotionSteps_;
}
- (void) setHasGmotionSteps:(BOOL) _value_ {
  hasGmotionSteps_ = !!_value_;
}
@synthesize gmotionSteps;
- (BOOL) hasLangString {
  return !!hasLangString_;
}
- (void) setHasLangString:(BOOL) _value_ {
  hasLangString_ = !!_value_;
}
@synthesize langString;
- (instancetype) init {
  if ((self = [super init])) {
    self.id = 0L;
    self.nickName = @"";
    self.number = 0L;
    self.imsi = 0L;
    self.imei = 0L;
    self.locationType = 0;
    self.lon = 0;
    self.lat = 0;
    self.location = @"";
    self.battery = 0;
    self.age = 0;
    self.grade = 0;
    self.avatar = @"";
    self.gender = 0;
    self.height = 0;
    self.weight = 0;
    self.loveCount = 0;
    self.status = 1;
    self.volume = 0;
    self.qrCode = @"";
    self.qrCodePic = [NSData data];
    self.latestLoginTime = 0L;
    self.lightSensorOn = 0;
    self.lightSensorStatus = 0;
    self.gmotionOn = 0;
    self.gmotionSteps = 0;
    self.langString = 0;
  }
  return self;
}
static Watch* defaultWatchInstance = nil;
+ (void) initialize {
  if (self == [Watch class]) {
    defaultWatchInstance = [[Watch alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultWatchInstance;
}
- (instancetype) defaultInstance {
  return defaultWatchInstance;
}
- (NSArray *)locations {
  return locationsArray;
}
- (Location*)locationsAtIndex:(NSUInteger)index {
  return [locationsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeUInt64:1 value:self.id];
  }
  if (self.hasNickName) {
    [output writeString:2 value:self.nickName];
  }
  if (self.hasNumber) {
    [output writeUInt64:3 value:self.number];
  }
  if (self.hasImsi) {
    [output writeUInt64:4 value:self.imsi];
  }
  if (self.hasImei) {
    [output writeUInt64:5 value:self.imei];
  }
  if (self.hasLocationType) {
    [output writeUInt32:6 value:self.locationType];
  }
  if (self.hasLon) {
    [output writeDouble:7 value:self.lon];
  }
  if (self.hasLat) {
    [output writeDouble:8 value:self.lat];
  }
  if (self.hasLocation) {
    [output writeString:9 value:self.location];
  }
  if (self.hasBattery) {
    [output writeUInt32:10 value:self.battery];
  }
  if (self.hasAge) {
    [output writeUInt32:11 value:self.age];
  }
  if (self.hasGrade) {
    [output writeUInt32:12 value:self.grade];
  }
  if (self.hasAvatar) {
    [output writeString:13 value:self.avatar];
  }
  if (self.hasGender) {
    [output writeUInt32:14 value:self.gender];
  }
  if (self.hasHeight) {
    [output writeUInt32:15 value:self.height];
  }
  if (self.hasWeight) {
    [output writeUInt32:16 value:self.weight];
  }
  if (self.hasLoveCount) {
    [output writeUInt32:17 value:self.loveCount];
  }
  if (self.hasStatus) {
    [output writeUInt32:18 value:self.status];
  }
  [self.locationsArray enumerateObjectsUsingBlock:^(Location *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:19 value:element];
  }];
  if (self.hasVolume) {
    [output writeUInt32:20 value:self.volume];
  }
  if (self.hasQrCode) {
    [output writeString:21 value:self.qrCode];
  }
  if (self.hasQrCodePic) {
    [output writeData:22 value:self.qrCodePic];
  }
  if (self.hasLatestLoginTime) {
    [output writeUInt64:23 value:self.latestLoginTime];
  }
  if (self.hasLightSensorOn) {
    [output writeUInt32:24 value:self.lightSensorOn];
  }
  if (self.hasLightSensorStatus) {
    [output writeUInt32:25 value:self.lightSensorStatus];
  }
  if (self.hasGmotionOn) {
    [output writeUInt32:26 value:self.gmotionOn];
  }
  if (self.hasGmotionSteps) {
    [output writeUInt32:27 value:self.gmotionSteps];
  }
  if (self.hasLangString) {
    [output writeUInt32:28 value:self.langString];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeUInt64Size(1, self.id);
  }
  if (self.hasNickName) {
    size_ += computeStringSize(2, self.nickName);
  }
  if (self.hasNumber) {
    size_ += computeUInt64Size(3, self.number);
  }
  if (self.hasImsi) {
    size_ += computeUInt64Size(4, self.imsi);
  }
  if (self.hasImei) {
    size_ += computeUInt64Size(5, self.imei);
  }
  if (self.hasLocationType) {
    size_ += computeUInt32Size(6, self.locationType);
  }
  if (self.hasLon) {
    size_ += computeDoubleSize(7, self.lon);
  }
  if (self.hasLat) {
    size_ += computeDoubleSize(8, self.lat);
  }
  if (self.hasLocation) {
    size_ += computeStringSize(9, self.location);
  }
  if (self.hasBattery) {
    size_ += computeUInt32Size(10, self.battery);
  }
  if (self.hasAge) {
    size_ += computeUInt32Size(11, self.age);
  }
  if (self.hasGrade) {
    size_ += computeUInt32Size(12, self.grade);
  }
  if (self.hasAvatar) {
    size_ += computeStringSize(13, self.avatar);
  }
  if (self.hasGender) {
    size_ += computeUInt32Size(14, self.gender);
  }
  if (self.hasHeight) {
    size_ += computeUInt32Size(15, self.height);
  }
  if (self.hasWeight) {
    size_ += computeUInt32Size(16, self.weight);
  }
  if (self.hasLoveCount) {
    size_ += computeUInt32Size(17, self.loveCount);
  }
  if (self.hasStatus) {
    size_ += computeUInt32Size(18, self.status);
  }
  [self.locationsArray enumerateObjectsUsingBlock:^(Location *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(19, element);
  }];
  if (self.hasVolume) {
    size_ += computeUInt32Size(20, self.volume);
  }
  if (self.hasQrCode) {
    size_ += computeStringSize(21, self.qrCode);
  }
  if (self.hasQrCodePic) {
    size_ += computeDataSize(22, self.qrCodePic);
  }
  if (self.hasLatestLoginTime) {
    size_ += computeUInt64Size(23, self.latestLoginTime);
  }
  if (self.hasLightSensorOn) {
    size_ += computeUInt32Size(24, self.lightSensorOn);
  }
  if (self.hasLightSensorStatus) {
    size_ += computeUInt32Size(25, self.lightSensorStatus);
  }
  if (self.hasGmotionOn) {
    size_ += computeUInt32Size(26, self.gmotionOn);
  }
  if (self.hasGmotionSteps) {
    size_ += computeUInt32Size(27, self.gmotionSteps);
  }
  if (self.hasLangString) {
    size_ += computeUInt32Size(28, self.langString);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Watch*) parseFromData:(NSData*) data {
  return (Watch*)[[[Watch builder] mergeFromData:data] build];
}
+ (Watch*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Watch*)[[[Watch builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Watch*) parseFromInputStream:(NSInputStream*) input {
  return (Watch*)[[[Watch builder] mergeFromInputStream:input] build];
}
+ (Watch*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Watch*)[[[Watch builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Watch*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Watch*)[[[Watch builder] mergeFromCodedInputStream:input] build];
}
+ (Watch*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Watch*)[[[Watch builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (WatchBuilder*) builder {
  return [[WatchBuilder alloc] init];
}
+ (WatchBuilder*) builderWithPrototype:(Watch*) prototype {
  return [[Watch builder] mergeFrom:prototype];
}
- (WatchBuilder*) builder {
  return [Watch builder];
}
- (WatchBuilder*) toBuilder {
  return [Watch builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithLongLong:self.id]];
  }
  if (self.hasNickName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nickName", self.nickName];
  }
  if (self.hasNumber) {
    [output appendFormat:@"%@%@: %@\n", indent, @"number", [NSNumber numberWithLongLong:self.number]];
  }
  if (self.hasImsi) {
    [output appendFormat:@"%@%@: %@\n", indent, @"imsi", [NSNumber numberWithLongLong:self.imsi]];
  }
  if (self.hasImei) {
    [output appendFormat:@"%@%@: %@\n", indent, @"imei", [NSNumber numberWithLongLong:self.imei]];
  }
  if (self.hasLocationType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"locationType", [NSNumber numberWithInteger:self.locationType]];
  }
  if (self.hasLon) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lon", [NSNumber numberWithDouble:self.lon]];
  }
  if (self.hasLat) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lat", [NSNumber numberWithDouble:self.lat]];
  }
  if (self.hasLocation) {
    [output appendFormat:@"%@%@: %@\n", indent, @"location", self.location];
  }
  if (self.hasBattery) {
    [output appendFormat:@"%@%@: %@\n", indent, @"battery", [NSNumber numberWithInteger:self.battery]];
  }
  if (self.hasAge) {
    [output appendFormat:@"%@%@: %@\n", indent, @"age", [NSNumber numberWithInteger:self.age]];
  }
  if (self.hasGrade) {
    [output appendFormat:@"%@%@: %@\n", indent, @"grade", [NSNumber numberWithInteger:self.grade]];
  }
  if (self.hasAvatar) {
    [output appendFormat:@"%@%@: %@\n", indent, @"avatar", self.avatar];
  }
  if (self.hasGender) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gender", [NSNumber numberWithInteger:self.gender]];
  }
  if (self.hasHeight) {
    [output appendFormat:@"%@%@: %@\n", indent, @"height", [NSNumber numberWithInteger:self.height]];
  }
  if (self.hasWeight) {
    [output appendFormat:@"%@%@: %@\n", indent, @"weight", [NSNumber numberWithInteger:self.weight]];
  }
  if (self.hasLoveCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"loveCount", [NSNumber numberWithInteger:self.loveCount]];
  }
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"status", [NSNumber numberWithInteger:self.status]];
  }
  [self.locationsArray enumerateObjectsUsingBlock:^(Location *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"locations"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasVolume) {
    [output appendFormat:@"%@%@: %@\n", indent, @"volume", [NSNumber numberWithInteger:self.volume]];
  }
  if (self.hasQrCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"qrCode", self.qrCode];
  }
  if (self.hasQrCodePic) {
    [output appendFormat:@"%@%@: %@\n", indent, @"qrCodePic", self.qrCodePic];
  }
  if (self.hasLatestLoginTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"latestLoginTime", [NSNumber numberWithLongLong:self.latestLoginTime]];
  }
  if (self.hasLightSensorOn) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lightSensorOn", [NSNumber numberWithInteger:self.lightSensorOn]];
  }
  if (self.hasLightSensorStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lightSensorStatus", [NSNumber numberWithInteger:self.lightSensorStatus]];
  }
  if (self.hasGmotionOn) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gmotionOn", [NSNumber numberWithInteger:self.gmotionOn]];
  }
  if (self.hasGmotionSteps) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gmotionSteps", [NSNumber numberWithInteger:self.gmotionSteps]];
  }
  if (self.hasLangString) {
    [output appendFormat:@"%@%@: %@\n", indent, @"langString", [NSNumber numberWithInteger:self.langString]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.id] forKey: @"id"];
  }
  if (self.hasNickName) {
    [dictionary setObject: self.nickName forKey: @"nickName"];
  }
  if (self.hasNumber) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.number] forKey: @"number"];
  }
  if (self.hasImsi) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.imsi] forKey: @"imsi"];
  }
  if (self.hasImei) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.imei] forKey: @"imei"];
  }
  if (self.hasLocationType) {
    [dictionary setObject: [NSNumber numberWithInteger:self.locationType] forKey: @"locationType"];
  }
  if (self.hasLon) {
    [dictionary setObject: [NSNumber numberWithDouble:self.lon] forKey: @"lon"];
  }
  if (self.hasLat) {
    [dictionary setObject: [NSNumber numberWithDouble:self.lat] forKey: @"lat"];
  }
  if (self.hasLocation) {
    [dictionary setObject: self.location forKey: @"location"];
  }
  if (self.hasBattery) {
    [dictionary setObject: [NSNumber numberWithInteger:self.battery] forKey: @"battery"];
  }
  if (self.hasAge) {
    [dictionary setObject: [NSNumber numberWithInteger:self.age] forKey: @"age"];
  }
  if (self.hasGrade) {
    [dictionary setObject: [NSNumber numberWithInteger:self.grade] forKey: @"grade"];
  }
  if (self.hasAvatar) {
    [dictionary setObject: self.avatar forKey: @"avatar"];
  }
  if (self.hasGender) {
    [dictionary setObject: [NSNumber numberWithInteger:self.gender] forKey: @"gender"];
  }
  if (self.hasHeight) {
    [dictionary setObject: [NSNumber numberWithInteger:self.height] forKey: @"height"];
  }
  if (self.hasWeight) {
    [dictionary setObject: [NSNumber numberWithInteger:self.weight] forKey: @"weight"];
  }
  if (self.hasLoveCount) {
    [dictionary setObject: [NSNumber numberWithInteger:self.loveCount] forKey: @"loveCount"];
  }
  if (self.hasStatus) {
    [dictionary setObject: [NSNumber numberWithInteger:self.status] forKey: @"status"];
  }
  for (Location* element in self.locationsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"locations"];
  }
  if (self.hasVolume) {
    [dictionary setObject: [NSNumber numberWithInteger:self.volume] forKey: @"volume"];
  }
  if (self.hasQrCode) {
    [dictionary setObject: self.qrCode forKey: @"qrCode"];
  }
  if (self.hasQrCodePic) {
    [dictionary setObject: self.qrCodePic forKey: @"qrCodePic"];
  }
  if (self.hasLatestLoginTime) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.latestLoginTime] forKey: @"latestLoginTime"];
  }
  if (self.hasLightSensorOn) {
    [dictionary setObject: [NSNumber numberWithInteger:self.lightSensorOn] forKey: @"lightSensorOn"];
  }
  if (self.hasLightSensorStatus) {
    [dictionary setObject: [NSNumber numberWithInteger:self.lightSensorStatus] forKey: @"lightSensorStatus"];
  }
  if (self.hasGmotionOn) {
    [dictionary setObject: [NSNumber numberWithInteger:self.gmotionOn] forKey: @"gmotionOn"];
  }
  if (self.hasGmotionSteps) {
    [dictionary setObject: [NSNumber numberWithInteger:self.gmotionSteps] forKey: @"gmotionSteps"];
  }
  if (self.hasLangString) {
    [dictionary setObject: [NSNumber numberWithInteger:self.langString] forKey: @"langString"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Watch class]]) {
    return NO;
  }
  Watch *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasNickName == otherMessage.hasNickName &&
      (!self.hasNickName || [self.nickName isEqual:otherMessage.nickName]) &&
      self.hasNumber == otherMessage.hasNumber &&
      (!self.hasNumber || self.number == otherMessage.number) &&
      self.hasImsi == otherMessage.hasImsi &&
      (!self.hasImsi || self.imsi == otherMessage.imsi) &&
      self.hasImei == otherMessage.hasImei &&
      (!self.hasImei || self.imei == otherMessage.imei) &&
      self.hasLocationType == otherMessage.hasLocationType &&
      (!self.hasLocationType || self.locationType == otherMessage.locationType) &&
      self.hasLon == otherMessage.hasLon &&
      (!self.hasLon || self.lon == otherMessage.lon) &&
      self.hasLat == otherMessage.hasLat &&
      (!self.hasLat || self.lat == otherMessage.lat) &&
      self.hasLocation == otherMessage.hasLocation &&
      (!self.hasLocation || [self.location isEqual:otherMessage.location]) &&
      self.hasBattery == otherMessage.hasBattery &&
      (!self.hasBattery || self.battery == otherMessage.battery) &&
      self.hasAge == otherMessage.hasAge &&
      (!self.hasAge || self.age == otherMessage.age) &&
      self.hasGrade == otherMessage.hasGrade &&
      (!self.hasGrade || self.grade == otherMessage.grade) &&
      self.hasAvatar == otherMessage.hasAvatar &&
      (!self.hasAvatar || [self.avatar isEqual:otherMessage.avatar]) &&
      self.hasGender == otherMessage.hasGender &&
      (!self.hasGender || self.gender == otherMessage.gender) &&
      self.hasHeight == otherMessage.hasHeight &&
      (!self.hasHeight || self.height == otherMessage.height) &&
      self.hasWeight == otherMessage.hasWeight &&
      (!self.hasWeight || self.weight == otherMessage.weight) &&
      self.hasLoveCount == otherMessage.hasLoveCount &&
      (!self.hasLoveCount || self.loveCount == otherMessage.loveCount) &&
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || self.status == otherMessage.status) &&
      [self.locationsArray isEqualToArray:otherMessage.locationsArray] &&
      self.hasVolume == otherMessage.hasVolume &&
      (!self.hasVolume || self.volume == otherMessage.volume) &&
      self.hasQrCode == otherMessage.hasQrCode &&
      (!self.hasQrCode || [self.qrCode isEqual:otherMessage.qrCode]) &&
      self.hasQrCodePic == otherMessage.hasQrCodePic &&
      (!self.hasQrCodePic || [self.qrCodePic isEqual:otherMessage.qrCodePic]) &&
      self.hasLatestLoginTime == otherMessage.hasLatestLoginTime &&
      (!self.hasLatestLoginTime || self.latestLoginTime == otherMessage.latestLoginTime) &&
      self.hasLightSensorOn == otherMessage.hasLightSensorOn &&
      (!self.hasLightSensorOn || self.lightSensorOn == otherMessage.lightSensorOn) &&
      self.hasLightSensorStatus == otherMessage.hasLightSensorStatus &&
      (!self.hasLightSensorStatus || self.lightSensorStatus == otherMessage.lightSensorStatus) &&
      self.hasGmotionOn == otherMessage.hasGmotionOn &&
      (!self.hasGmotionOn || self.gmotionOn == otherMessage.gmotionOn) &&
      self.hasGmotionSteps == otherMessage.hasGmotionSteps &&
      (!self.hasGmotionSteps || self.gmotionSteps == otherMessage.gmotionSteps) &&
      self.hasLangString == otherMessage.hasLangString &&
      (!self.hasLangString || self.langString == otherMessage.langString) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.id] hash];
  }
  if (self.hasNickName) {
    hashCode = hashCode * 31 + [self.nickName hash];
  }
  if (self.hasNumber) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.number] hash];
  }
  if (self.hasImsi) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.imsi] hash];
  }
  if (self.hasImei) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.imei] hash];
  }
  if (self.hasLocationType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.locationType] hash];
  }
  if (self.hasLon) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.lon] hash];
  }
  if (self.hasLat) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.lat] hash];
  }
  if (self.hasLocation) {
    hashCode = hashCode * 31 + [self.location hash];
  }
  if (self.hasBattery) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.battery] hash];
  }
  if (self.hasAge) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.age] hash];
  }
  if (self.hasGrade) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.grade] hash];
  }
  if (self.hasAvatar) {
    hashCode = hashCode * 31 + [self.avatar hash];
  }
  if (self.hasGender) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.gender] hash];
  }
  if (self.hasHeight) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.height] hash];
  }
  if (self.hasWeight) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.weight] hash];
  }
  if (self.hasLoveCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.loveCount] hash];
  }
  if (self.hasStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.status] hash];
  }
  [self.locationsArray enumerateObjectsUsingBlock:^(Location *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasVolume) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.volume] hash];
  }
  if (self.hasQrCode) {
    hashCode = hashCode * 31 + [self.qrCode hash];
  }
  if (self.hasQrCodePic) {
    hashCode = hashCode * 31 + [self.qrCodePic hash];
  }
  if (self.hasLatestLoginTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.latestLoginTime] hash];
  }
  if (self.hasLightSensorOn) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.lightSensorOn] hash];
  }
  if (self.hasLightSensorStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.lightSensorStatus] hash];
  }
  if (self.hasGmotionOn) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.gmotionOn] hash];
  }
  if (self.hasGmotionSteps) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.gmotionSteps] hash];
  }
  if (self.hasLangString) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.langString] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface WatchBuilder()
@property (strong) Watch* resultWatch;
@end

@implementation WatchBuilder
@synthesize resultWatch;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultWatch = [[Watch alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultWatch;
}
- (WatchBuilder*) clear {
  self.resultWatch = [[Watch alloc] init];
  return self;
}
- (WatchBuilder*) clone {
  return [Watch builderWithPrototype:resultWatch];
}
- (Watch*) defaultInstance {
  return [Watch defaultInstance];
}
- (Watch*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Watch*) buildPartial {
  Watch* returnMe = resultWatch;
  self.resultWatch = nil;
  return returnMe;
}
- (WatchBuilder*) mergeFrom:(Watch*) other {
  if (other == [Watch defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasNickName) {
    [self setNickName:other.nickName];
  }
  if (other.hasNumber) {
    [self setNumber:other.number];
  }
  if (other.hasImsi) {
    [self setImsi:other.imsi];
  }
  if (other.hasImei) {
    [self setImei:other.imei];
  }
  if (other.hasLocationType) {
    [self setLocationType:other.locationType];
  }
  if (other.hasLon) {
    [self setLon:other.lon];
  }
  if (other.hasLat) {
    [self setLat:other.lat];
  }
  if (other.hasLocation) {
    [self setLocation:other.location];
  }
  if (other.hasBattery) {
    [self setBattery:other.battery];
  }
  if (other.hasAge) {
    [self setAge:other.age];
  }
  if (other.hasGrade) {
    [self setGrade:other.grade];
  }
  if (other.hasAvatar) {
    [self setAvatar:other.avatar];
  }
  if (other.hasGender) {
    [self setGender:other.gender];
  }
  if (other.hasHeight) {
    [self setHeight:other.height];
  }
  if (other.hasWeight) {
    [self setWeight:other.weight];
  }
  if (other.hasLoveCount) {
    [self setLoveCount:other.loveCount];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.locationsArray.count > 0) {
    if (resultWatch.locationsArray == nil) {
      resultWatch.locationsArray = [[NSMutableArray alloc] initWithArray:other.locationsArray];
    } else {
      [resultWatch.locationsArray addObjectsFromArray:other.locationsArray];
    }
  }
  if (other.hasVolume) {
    [self setVolume:other.volume];
  }
  if (other.hasQrCode) {
    [self setQrCode:other.qrCode];
  }
  if (other.hasQrCodePic) {
    [self setQrCodePic:other.qrCodePic];
  }
  if (other.hasLatestLoginTime) {
    [self setLatestLoginTime:other.latestLoginTime];
  }
  if (other.hasLightSensorOn) {
    [self setLightSensorOn:other.lightSensorOn];
  }
  if (other.hasLightSensorStatus) {
    [self setLightSensorStatus:other.lightSensorStatus];
  }
  if (other.hasGmotionOn) {
    [self setGmotionOn:other.gmotionOn];
  }
  if (other.hasGmotionSteps) {
    [self setGmotionSteps:other.gmotionSteps];
  }
  if (other.hasLangString) {
    [self setLangString:other.langString];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (WatchBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (WatchBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readUInt64]];
        break;
      }
      case 18: {
        [self setNickName:[input readString]];
        break;
      }
      case 24: {
        [self setNumber:[input readUInt64]];
        break;
      }
      case 32: {
        [self setImsi:[input readUInt64]];
        break;
      }
      case 40: {
        [self setImei:[input readUInt64]];
        break;
      }
      case 48: {
        [self setLocationType:[input readUInt32]];
        break;
      }
      case 57: {
        [self setLon:[input readDouble]];
        break;
      }
      case 65: {
        [self setLat:[input readDouble]];
        break;
      }
      case 74: {
        [self setLocation:[input readString]];
        break;
      }
      case 80: {
        [self setBattery:[input readUInt32]];
        break;
      }
      case 88: {
        [self setAge:[input readUInt32]];
        break;
      }
      case 96: {
        [self setGrade:[input readUInt32]];
        break;
      }
      case 106: {
        [self setAvatar:[input readString]];
        break;
      }
      case 112: {
        [self setGender:[input readUInt32]];
        break;
      }
      case 120: {
        [self setHeight:[input readUInt32]];
        break;
      }
      case 128: {
        [self setWeight:[input readUInt32]];
        break;
      }
      case 136: {
        [self setLoveCount:[input readUInt32]];
        break;
      }
      case 144: {
        [self setStatus:[input readUInt32]];
        break;
      }
      case 154: {
        LocationBuilder* subBuilder = [Location builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addLocations:[subBuilder buildPartial]];
        break;
      }
      case 160: {
        [self setVolume:[input readUInt32]];
        break;
      }
      case 170: {
        [self setQrCode:[input readString]];
        break;
      }
      case 178: {
        [self setQrCodePic:[input readData]];
        break;
      }
      case 184: {
        [self setLatestLoginTime:[input readUInt64]];
        break;
      }
      case 192: {
        [self setLightSensorOn:[input readUInt32]];
        break;
      }
      case 200: {
        [self setLightSensorStatus:[input readUInt32]];
        break;
      }
      case 208: {
        [self setGmotionOn:[input readUInt32]];
        break;
      }
      case 216: {
        [self setGmotionSteps:[input readUInt32]];
        break;
      }
      case 224: {
        [self setLangString:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return resultWatch.hasId;
}
- (UInt64) id {
  return resultWatch.id;
}
- (WatchBuilder*) setId:(UInt64) value {
  resultWatch.hasId = YES;
  resultWatch.id = value;
  return self;
}
- (WatchBuilder*) clearId {
  resultWatch.hasId = NO;
  resultWatch.id = 0L;
  return self;
}
- (BOOL) hasNickName {
  return resultWatch.hasNickName;
}
- (NSString*) nickName {
  return resultWatch.nickName;
}
- (WatchBuilder*) setNickName:(NSString*) value {
  resultWatch.hasNickName = YES;
  resultWatch.nickName = value;
  return self;
}
- (WatchBuilder*) clearNickName {
  resultWatch.hasNickName = NO;
  resultWatch.nickName = @"";
  return self;
}
- (BOOL) hasNumber {
  return resultWatch.hasNumber;
}
- (UInt64) number {
  return resultWatch.number;
}
- (WatchBuilder*) setNumber:(UInt64) value {
  resultWatch.hasNumber = YES;
  resultWatch.number = value;
  return self;
}
- (WatchBuilder*) clearNumber {
  resultWatch.hasNumber = NO;
  resultWatch.number = 0L;
  return self;
}
- (BOOL) hasImsi {
  return resultWatch.hasImsi;
}
- (UInt64) imsi {
  return resultWatch.imsi;
}
- (WatchBuilder*) setImsi:(UInt64) value {
  resultWatch.hasImsi = YES;
  resultWatch.imsi = value;
  return self;
}
- (WatchBuilder*) clearImsi {
  resultWatch.hasImsi = NO;
  resultWatch.imsi = 0L;
  return self;
}
- (BOOL) hasImei {
  return resultWatch.hasImei;
}
- (UInt64) imei {
  return resultWatch.imei;
}
- (WatchBuilder*) setImei:(UInt64) value {
  resultWatch.hasImei = YES;
  resultWatch.imei = value;
  return self;
}
- (WatchBuilder*) clearImei {
  resultWatch.hasImei = NO;
  resultWatch.imei = 0L;
  return self;
}
- (BOOL) hasLocationType {
  return resultWatch.hasLocationType;
}
- (UInt32) locationType {
  return resultWatch.locationType;
}
- (WatchBuilder*) setLocationType:(UInt32) value {
  resultWatch.hasLocationType = YES;
  resultWatch.locationType = value;
  return self;
}
- (WatchBuilder*) clearLocationType {
  resultWatch.hasLocationType = NO;
  resultWatch.locationType = 0;
  return self;
}
- (BOOL) hasLon {
  return resultWatch.hasLon;
}
- (Float64) lon {
  return resultWatch.lon;
}
- (WatchBuilder*) setLon:(Float64) value {
  resultWatch.hasLon = YES;
  resultWatch.lon = value;
  return self;
}
- (WatchBuilder*) clearLon {
  resultWatch.hasLon = NO;
  resultWatch.lon = 0;
  return self;
}
- (BOOL) hasLat {
  return resultWatch.hasLat;
}
- (Float64) lat {
  return resultWatch.lat;
}
- (WatchBuilder*) setLat:(Float64) value {
  resultWatch.hasLat = YES;
  resultWatch.lat = value;
  return self;
}
- (WatchBuilder*) clearLat {
  resultWatch.hasLat = NO;
  resultWatch.lat = 0;
  return self;
}
- (BOOL) hasLocation {
  return resultWatch.hasLocation;
}
- (NSString*) location {
  return resultWatch.location;
}
- (WatchBuilder*) setLocation:(NSString*) value {
  resultWatch.hasLocation = YES;
  resultWatch.location = value;
  return self;
}
- (WatchBuilder*) clearLocation {
  resultWatch.hasLocation = NO;
  resultWatch.location = @"";
  return self;
}
- (BOOL) hasBattery {
  return resultWatch.hasBattery;
}
- (UInt32) battery {
  return resultWatch.battery;
}
- (WatchBuilder*) setBattery:(UInt32) value {
  resultWatch.hasBattery = YES;
  resultWatch.battery = value;
  return self;
}
- (WatchBuilder*) clearBattery {
  resultWatch.hasBattery = NO;
  resultWatch.battery = 0;
  return self;
}
- (BOOL) hasAge {
  return resultWatch.hasAge;
}
- (UInt32) age {
  return resultWatch.age;
}
- (WatchBuilder*) setAge:(UInt32) value {
  resultWatch.hasAge = YES;
  resultWatch.age = value;
  return self;
}
- (WatchBuilder*) clearAge {
  resultWatch.hasAge = NO;
  resultWatch.age = 0;
  return self;
}
- (BOOL) hasGrade {
  return resultWatch.hasGrade;
}
- (UInt32) grade {
  return resultWatch.grade;
}
- (WatchBuilder*) setGrade:(UInt32) value {
  resultWatch.hasGrade = YES;
  resultWatch.grade = value;
  return self;
}
- (WatchBuilder*) clearGrade {
  resultWatch.hasGrade = NO;
  resultWatch.grade = 0;
  return self;
}
- (BOOL) hasAvatar {
  return resultWatch.hasAvatar;
}
- (NSString*) avatar {
  return resultWatch.avatar;
}
- (WatchBuilder*) setAvatar:(NSString*) value {
  resultWatch.hasAvatar = YES;
  resultWatch.avatar = value;
  return self;
}
- (WatchBuilder*) clearAvatar {
  resultWatch.hasAvatar = NO;
  resultWatch.avatar = @"";
  return self;
}
- (BOOL) hasGender {
  return resultWatch.hasGender;
}
- (UInt32) gender {
  return resultWatch.gender;
}
- (WatchBuilder*) setGender:(UInt32) value {
  resultWatch.hasGender = YES;
  resultWatch.gender = value;
  return self;
}
- (WatchBuilder*) clearGender {
  resultWatch.hasGender = NO;
  resultWatch.gender = 0;
  return self;
}
- (BOOL) hasHeight {
  return resultWatch.hasHeight;
}
- (UInt32) height {
  return resultWatch.height;
}
- (WatchBuilder*) setHeight:(UInt32) value {
  resultWatch.hasHeight = YES;
  resultWatch.height = value;
  return self;
}
- (WatchBuilder*) clearHeight {
  resultWatch.hasHeight = NO;
  resultWatch.height = 0;
  return self;
}
- (BOOL) hasWeight {
  return resultWatch.hasWeight;
}
- (UInt32) weight {
  return resultWatch.weight;
}
- (WatchBuilder*) setWeight:(UInt32) value {
  resultWatch.hasWeight = YES;
  resultWatch.weight = value;
  return self;
}
- (WatchBuilder*) clearWeight {
  resultWatch.hasWeight = NO;
  resultWatch.weight = 0;
  return self;
}
- (BOOL) hasLoveCount {
  return resultWatch.hasLoveCount;
}
- (UInt32) loveCount {
  return resultWatch.loveCount;
}
- (WatchBuilder*) setLoveCount:(UInt32) value {
  resultWatch.hasLoveCount = YES;
  resultWatch.loveCount = value;
  return self;
}
- (WatchBuilder*) clearLoveCount {
  resultWatch.hasLoveCount = NO;
  resultWatch.loveCount = 0;
  return self;
}
- (BOOL) hasStatus {
  return resultWatch.hasStatus;
}
- (UInt32) status {
  return resultWatch.status;
}
- (WatchBuilder*) setStatus:(UInt32) value {
  resultWatch.hasStatus = YES;
  resultWatch.status = value;
  return self;
}
- (WatchBuilder*) clearStatus {
  resultWatch.hasStatus = NO;
  resultWatch.status = 1;
  return self;
}
- (NSMutableArray *)locations {
  return resultWatch.locationsArray;
}
- (Location*)locationsAtIndex:(NSUInteger)index {
  return [resultWatch locationsAtIndex:index];
}
- (WatchBuilder *)addLocations:(Location*)value {
  if (resultWatch.locationsArray == nil) {
    resultWatch.locationsArray = [[NSMutableArray alloc]init];
  }
  [resultWatch.locationsArray addObject:value];
  return self;
}
- (WatchBuilder *)setLocationsArray:(NSArray *)array {
  resultWatch.locationsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (WatchBuilder *)clearLocations {
  resultWatch.locationsArray = nil;
  return self;
}
- (BOOL) hasVolume {
  return resultWatch.hasVolume;
}
- (UInt32) volume {
  return resultWatch.volume;
}
- (WatchBuilder*) setVolume:(UInt32) value {
  resultWatch.hasVolume = YES;
  resultWatch.volume = value;
  return self;
}
- (WatchBuilder*) clearVolume {
  resultWatch.hasVolume = NO;
  resultWatch.volume = 0;
  return self;
}
- (BOOL) hasQrCode {
  return resultWatch.hasQrCode;
}
- (NSString*) qrCode {
  return resultWatch.qrCode;
}
- (WatchBuilder*) setQrCode:(NSString*) value {
  resultWatch.hasQrCode = YES;
  resultWatch.qrCode = value;
  return self;
}
- (WatchBuilder*) clearQrCode {
  resultWatch.hasQrCode = NO;
  resultWatch.qrCode = @"";
  return self;
}
- (BOOL) hasQrCodePic {
  return resultWatch.hasQrCodePic;
}
- (NSData*) qrCodePic {
  return resultWatch.qrCodePic;
}
- (WatchBuilder*) setQrCodePic:(NSData*) value {
  resultWatch.hasQrCodePic = YES;
  resultWatch.qrCodePic = value;
  return self;
}
- (WatchBuilder*) clearQrCodePic {
  resultWatch.hasQrCodePic = NO;
  resultWatch.qrCodePic = [NSData data];
  return self;
}
- (BOOL) hasLatestLoginTime {
  return resultWatch.hasLatestLoginTime;
}
- (UInt64) latestLoginTime {
  return resultWatch.latestLoginTime;
}
- (WatchBuilder*) setLatestLoginTime:(UInt64) value {
  resultWatch.hasLatestLoginTime = YES;
  resultWatch.latestLoginTime = value;
  return self;
}
- (WatchBuilder*) clearLatestLoginTime {
  resultWatch.hasLatestLoginTime = NO;
  resultWatch.latestLoginTime = 0L;
  return self;
}
- (BOOL) hasLightSensorOn {
  return resultWatch.hasLightSensorOn;
}
- (UInt32) lightSensorOn {
  return resultWatch.lightSensorOn;
}
- (WatchBuilder*) setLightSensorOn:(UInt32) value {
  resultWatch.hasLightSensorOn = YES;
  resultWatch.lightSensorOn = value;
  return self;
}
- (WatchBuilder*) clearLightSensorOn {
  resultWatch.hasLightSensorOn = NO;
  resultWatch.lightSensorOn = 0;
  return self;
}
- (BOOL) hasLightSensorStatus {
  return resultWatch.hasLightSensorStatus;
}
- (UInt32) lightSensorStatus {
  return resultWatch.lightSensorStatus;
}
- (WatchBuilder*) setLightSensorStatus:(UInt32) value {
  resultWatch.hasLightSensorStatus = YES;
  resultWatch.lightSensorStatus = value;
  return self;
}
- (WatchBuilder*) clearLightSensorStatus {
  resultWatch.hasLightSensorStatus = NO;
  resultWatch.lightSensorStatus = 0;
  return self;
}
- (BOOL) hasGmotionOn {
  return resultWatch.hasGmotionOn;
}
- (UInt32) gmotionOn {
  return resultWatch.gmotionOn;
}
- (WatchBuilder*) setGmotionOn:(UInt32) value {
  resultWatch.hasGmotionOn = YES;
  resultWatch.gmotionOn = value;
  return self;
}
- (WatchBuilder*) clearGmotionOn {
  resultWatch.hasGmotionOn = NO;
  resultWatch.gmotionOn = 0;
  return self;
}
- (BOOL) hasGmotionSteps {
  return resultWatch.hasGmotionSteps;
}
- (UInt32) gmotionSteps {
  return resultWatch.gmotionSteps;
}
- (WatchBuilder*) setGmotionSteps:(UInt32) value {
  resultWatch.hasGmotionSteps = YES;
  resultWatch.gmotionSteps = value;
  return self;
}
- (WatchBuilder*) clearGmotionSteps {
  resultWatch.hasGmotionSteps = NO;
  resultWatch.gmotionSteps = 0;
  return self;
}
- (BOOL) hasLangString {
  return resultWatch.hasLangString;
}
- (UInt32) langString {
  return resultWatch.langString;
}
- (WatchBuilder*) setLangString:(UInt32) value {
  resultWatch.hasLangString = YES;
  resultWatch.langString = value;
  return self;
}
- (WatchBuilder*) clearLangString {
  resultWatch.hasLangString = NO;
  resultWatch.langString = 0;
  return self;
}
@end

@interface Location ()
@property SInt32 arfcn;
@property SInt32 bsic;
@property SInt32 rssi;
@property SInt32 rxlev;
@property SInt32 mcc;
@property SInt32 mnc;
@property SInt32 lac;
@property SInt32 ci;
@end

@implementation Location

- (BOOL) hasArfcn {
  return !!hasArfcn_;
}
- (void) setHasArfcn:(BOOL) _value_ {
  hasArfcn_ = !!_value_;
}
@synthesize arfcn;
- (BOOL) hasBsic {
  return !!hasBsic_;
}
- (void) setHasBsic:(BOOL) _value_ {
  hasBsic_ = !!_value_;
}
@synthesize bsic;
- (BOOL) hasRssi {
  return !!hasRssi_;
}
- (void) setHasRssi:(BOOL) _value_ {
  hasRssi_ = !!_value_;
}
@synthesize rssi;
- (BOOL) hasRxlev {
  return !!hasRxlev_;
}
- (void) setHasRxlev:(BOOL) _value_ {
  hasRxlev_ = !!_value_;
}
@synthesize rxlev;
- (BOOL) hasMcc {
  return !!hasMcc_;
}
- (void) setHasMcc:(BOOL) _value_ {
  hasMcc_ = !!_value_;
}
@synthesize mcc;
- (BOOL) hasMnc {
  return !!hasMnc_;
}
- (void) setHasMnc:(BOOL) _value_ {
  hasMnc_ = !!_value_;
}
@synthesize mnc;
- (BOOL) hasLac {
  return !!hasLac_;
}
- (void) setHasLac:(BOOL) _value_ {
  hasLac_ = !!_value_;
}
@synthesize lac;
- (BOOL) hasCi {
  return !!hasCi_;
}
- (void) setHasCi:(BOOL) _value_ {
  hasCi_ = !!_value_;
}
@synthesize ci;
- (instancetype) init {
  if ((self = [super init])) {
    self.arfcn = 0;
    self.bsic = 0;
    self.rssi = 0;
    self.rxlev = 0;
    self.mcc = 0;
    self.mnc = 0;
    self.lac = 0;
    self.ci = 0;
  }
  return self;
}
static Location* defaultLocationInstance = nil;
+ (void) initialize {
  if (self == [Location class]) {
    defaultLocationInstance = [[Location alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultLocationInstance;
}
- (instancetype) defaultInstance {
  return defaultLocationInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasArfcn) {
    [output writeInt32:1 value:self.arfcn];
  }
  if (self.hasBsic) {
    [output writeInt32:2 value:self.bsic];
  }
  if (self.hasRssi) {
    [output writeInt32:3 value:self.rssi];
  }
  if (self.hasRxlev) {
    [output writeInt32:4 value:self.rxlev];
  }
  if (self.hasMcc) {
    [output writeInt32:5 value:self.mcc];
  }
  if (self.hasMnc) {
    [output writeInt32:6 value:self.mnc];
  }
  if (self.hasLac) {
    [output writeInt32:7 value:self.lac];
  }
  if (self.hasCi) {
    [output writeInt32:8 value:self.ci];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasArfcn) {
    size_ += computeInt32Size(1, self.arfcn);
  }
  if (self.hasBsic) {
    size_ += computeInt32Size(2, self.bsic);
  }
  if (self.hasRssi) {
    size_ += computeInt32Size(3, self.rssi);
  }
  if (self.hasRxlev) {
    size_ += computeInt32Size(4, self.rxlev);
  }
  if (self.hasMcc) {
    size_ += computeInt32Size(5, self.mcc);
  }
  if (self.hasMnc) {
    size_ += computeInt32Size(6, self.mnc);
  }
  if (self.hasLac) {
    size_ += computeInt32Size(7, self.lac);
  }
  if (self.hasCi) {
    size_ += computeInt32Size(8, self.ci);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Location*) parseFromData:(NSData*) data {
  return (Location*)[[[Location builder] mergeFromData:data] build];
}
+ (Location*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Location*)[[[Location builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Location*) parseFromInputStream:(NSInputStream*) input {
  return (Location*)[[[Location builder] mergeFromInputStream:input] build];
}
+ (Location*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Location*)[[[Location builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Location*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Location*)[[[Location builder] mergeFromCodedInputStream:input] build];
}
+ (Location*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Location*)[[[Location builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LocationBuilder*) builder {
  return [[LocationBuilder alloc] init];
}
+ (LocationBuilder*) builderWithPrototype:(Location*) prototype {
  return [[Location builder] mergeFrom:prototype];
}
- (LocationBuilder*) builder {
  return [Location builder];
}
- (LocationBuilder*) toBuilder {
  return [Location builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasArfcn) {
    [output appendFormat:@"%@%@: %@\n", indent, @"arfcn", [NSNumber numberWithInteger:self.arfcn]];
  }
  if (self.hasBsic) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bsic", [NSNumber numberWithInteger:self.bsic]];
  }
  if (self.hasRssi) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rssi", [NSNumber numberWithInteger:self.rssi]];
  }
  if (self.hasRxlev) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rxlev", [NSNumber numberWithInteger:self.rxlev]];
  }
  if (self.hasMcc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"mcc", [NSNumber numberWithInteger:self.mcc]];
  }
  if (self.hasMnc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"mnc", [NSNumber numberWithInteger:self.mnc]];
  }
  if (self.hasLac) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lac", [NSNumber numberWithInteger:self.lac]];
  }
  if (self.hasCi) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ci", [NSNumber numberWithInteger:self.ci]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasArfcn) {
    [dictionary setObject: [NSNumber numberWithInteger:self.arfcn] forKey: @"arfcn"];
  }
  if (self.hasBsic) {
    [dictionary setObject: [NSNumber numberWithInteger:self.bsic] forKey: @"bsic"];
  }
  if (self.hasRssi) {
    [dictionary setObject: [NSNumber numberWithInteger:self.rssi] forKey: @"rssi"];
  }
  if (self.hasRxlev) {
    [dictionary setObject: [NSNumber numberWithInteger:self.rxlev] forKey: @"rxlev"];
  }
  if (self.hasMcc) {
    [dictionary setObject: [NSNumber numberWithInteger:self.mcc] forKey: @"mcc"];
  }
  if (self.hasMnc) {
    [dictionary setObject: [NSNumber numberWithInteger:self.mnc] forKey: @"mnc"];
  }
  if (self.hasLac) {
    [dictionary setObject: [NSNumber numberWithInteger:self.lac] forKey: @"lac"];
  }
  if (self.hasCi) {
    [dictionary setObject: [NSNumber numberWithInteger:self.ci] forKey: @"ci"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Location class]]) {
    return NO;
  }
  Location *otherMessage = other;
  return
      self.hasArfcn == otherMessage.hasArfcn &&
      (!self.hasArfcn || self.arfcn == otherMessage.arfcn) &&
      self.hasBsic == otherMessage.hasBsic &&
      (!self.hasBsic || self.bsic == otherMessage.bsic) &&
      self.hasRssi == otherMessage.hasRssi &&
      (!self.hasRssi || self.rssi == otherMessage.rssi) &&
      self.hasRxlev == otherMessage.hasRxlev &&
      (!self.hasRxlev || self.rxlev == otherMessage.rxlev) &&
      self.hasMcc == otherMessage.hasMcc &&
      (!self.hasMcc || self.mcc == otherMessage.mcc) &&
      self.hasMnc == otherMessage.hasMnc &&
      (!self.hasMnc || self.mnc == otherMessage.mnc) &&
      self.hasLac == otherMessage.hasLac &&
      (!self.hasLac || self.lac == otherMessage.lac) &&
      self.hasCi == otherMessage.hasCi &&
      (!self.hasCi || self.ci == otherMessage.ci) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasArfcn) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.arfcn] hash];
  }
  if (self.hasBsic) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.bsic] hash];
  }
  if (self.hasRssi) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.rssi] hash];
  }
  if (self.hasRxlev) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.rxlev] hash];
  }
  if (self.hasMcc) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.mcc] hash];
  }
  if (self.hasMnc) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.mnc] hash];
  }
  if (self.hasLac) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.lac] hash];
  }
  if (self.hasCi) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.ci] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface LocationBuilder()
@property (strong) Location* resultLocation;
@end

@implementation LocationBuilder
@synthesize resultLocation;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultLocation = [[Location alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultLocation;
}
- (LocationBuilder*) clear {
  self.resultLocation = [[Location alloc] init];
  return self;
}
- (LocationBuilder*) clone {
  return [Location builderWithPrototype:resultLocation];
}
- (Location*) defaultInstance {
  return [Location defaultInstance];
}
- (Location*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Location*) buildPartial {
  Location* returnMe = resultLocation;
  self.resultLocation = nil;
  return returnMe;
}
- (LocationBuilder*) mergeFrom:(Location*) other {
  if (other == [Location defaultInstance]) {
    return self;
  }
  if (other.hasArfcn) {
    [self setArfcn:other.arfcn];
  }
  if (other.hasBsic) {
    [self setBsic:other.bsic];
  }
  if (other.hasRssi) {
    [self setRssi:other.rssi];
  }
  if (other.hasRxlev) {
    [self setRxlev:other.rxlev];
  }
  if (other.hasMcc) {
    [self setMcc:other.mcc];
  }
  if (other.hasMnc) {
    [self setMnc:other.mnc];
  }
  if (other.hasLac) {
    [self setLac:other.lac];
  }
  if (other.hasCi) {
    [self setCi:other.ci];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (LocationBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (LocationBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setArfcn:[input readInt32]];
        break;
      }
      case 16: {
        [self setBsic:[input readInt32]];
        break;
      }
      case 24: {
        [self setRssi:[input readInt32]];
        break;
      }
      case 32: {
        [self setRxlev:[input readInt32]];
        break;
      }
      case 40: {
        [self setMcc:[input readInt32]];
        break;
      }
      case 48: {
        [self setMnc:[input readInt32]];
        break;
      }
      case 56: {
        [self setLac:[input readInt32]];
        break;
      }
      case 64: {
        [self setCi:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasArfcn {
  return resultLocation.hasArfcn;
}
- (SInt32) arfcn {
  return resultLocation.arfcn;
}
- (LocationBuilder*) setArfcn:(SInt32) value {
  resultLocation.hasArfcn = YES;
  resultLocation.arfcn = value;
  return self;
}
- (LocationBuilder*) clearArfcn {
  resultLocation.hasArfcn = NO;
  resultLocation.arfcn = 0;
  return self;
}
- (BOOL) hasBsic {
  return resultLocation.hasBsic;
}
- (SInt32) bsic {
  return resultLocation.bsic;
}
- (LocationBuilder*) setBsic:(SInt32) value {
  resultLocation.hasBsic = YES;
  resultLocation.bsic = value;
  return self;
}
- (LocationBuilder*) clearBsic {
  resultLocation.hasBsic = NO;
  resultLocation.bsic = 0;
  return self;
}
- (BOOL) hasRssi {
  return resultLocation.hasRssi;
}
- (SInt32) rssi {
  return resultLocation.rssi;
}
- (LocationBuilder*) setRssi:(SInt32) value {
  resultLocation.hasRssi = YES;
  resultLocation.rssi = value;
  return self;
}
- (LocationBuilder*) clearRssi {
  resultLocation.hasRssi = NO;
  resultLocation.rssi = 0;
  return self;
}
- (BOOL) hasRxlev {
  return resultLocation.hasRxlev;
}
- (SInt32) rxlev {
  return resultLocation.rxlev;
}
- (LocationBuilder*) setRxlev:(SInt32) value {
  resultLocation.hasRxlev = YES;
  resultLocation.rxlev = value;
  return self;
}
- (LocationBuilder*) clearRxlev {
  resultLocation.hasRxlev = NO;
  resultLocation.rxlev = 0;
  return self;
}
- (BOOL) hasMcc {
  return resultLocation.hasMcc;
}
- (SInt32) mcc {
  return resultLocation.mcc;
}
- (LocationBuilder*) setMcc:(SInt32) value {
  resultLocation.hasMcc = YES;
  resultLocation.mcc = value;
  return self;
}
- (LocationBuilder*) clearMcc {
  resultLocation.hasMcc = NO;
  resultLocation.mcc = 0;
  return self;
}
- (BOOL) hasMnc {
  return resultLocation.hasMnc;
}
- (SInt32) mnc {
  return resultLocation.mnc;
}
- (LocationBuilder*) setMnc:(SInt32) value {
  resultLocation.hasMnc = YES;
  resultLocation.mnc = value;
  return self;
}
- (LocationBuilder*) clearMnc {
  resultLocation.hasMnc = NO;
  resultLocation.mnc = 0;
  return self;
}
- (BOOL) hasLac {
  return resultLocation.hasLac;
}
- (SInt32) lac {
  return resultLocation.lac;
}
- (LocationBuilder*) setLac:(SInt32) value {
  resultLocation.hasLac = YES;
  resultLocation.lac = value;
  return self;
}
- (LocationBuilder*) clearLac {
  resultLocation.hasLac = NO;
  resultLocation.lac = 0;
  return self;
}
- (BOOL) hasCi {
  return resultLocation.hasCi;
}
- (SInt32) ci {
  return resultLocation.ci;
}
- (LocationBuilder*) setCi:(SInt32) value {
  resultLocation.hasCi = YES;
  resultLocation.ci = value;
  return self;
}
- (LocationBuilder*) clearCi {
  resultLocation.hasCi = NO;
  resultLocation.ci = 0;
  return self;
}
@end

@interface Mobile ()
@property UInt64 id;
@property UInt64 number;
@property (strong) NSString* nickName;
@property UInt64 imsi;
@property UInt64 imei;
@property UInt32 locationType;
@property Float64 lon;
@property Float64 lat;
@property (strong) NSString* location;
@property BOOL isAdmin;
@property (strong) NSString* uuid;
@property (strong) NSString* token;
@property (strong) NSString* code;
@end

@implementation Mobile

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasNumber {
  return !!hasNumber_;
}
- (void) setHasNumber:(BOOL) _value_ {
  hasNumber_ = !!_value_;
}
@synthesize number;
- (BOOL) hasNickName {
  return !!hasNickName_;
}
- (void) setHasNickName:(BOOL) _value_ {
  hasNickName_ = !!_value_;
}
@synthesize nickName;
- (BOOL) hasImsi {
  return !!hasImsi_;
}
- (void) setHasImsi:(BOOL) _value_ {
  hasImsi_ = !!_value_;
}
@synthesize imsi;
- (BOOL) hasImei {
  return !!hasImei_;
}
- (void) setHasImei:(BOOL) _value_ {
  hasImei_ = !!_value_;
}
@synthesize imei;
- (BOOL) hasLocationType {
  return !!hasLocationType_;
}
- (void) setHasLocationType:(BOOL) _value_ {
  hasLocationType_ = !!_value_;
}
@synthesize locationType;
- (BOOL) hasLon {
  return !!hasLon_;
}
- (void) setHasLon:(BOOL) _value_ {
  hasLon_ = !!_value_;
}
@synthesize lon;
- (BOOL) hasLat {
  return !!hasLat_;
}
- (void) setHasLat:(BOOL) _value_ {
  hasLat_ = !!_value_;
}
@synthesize lat;
- (BOOL) hasLocation {
  return !!hasLocation_;
}
- (void) setHasLocation:(BOOL) _value_ {
  hasLocation_ = !!_value_;
}
@synthesize location;
- (BOOL) hasIsAdmin {
  return !!hasIsAdmin_;
}
- (void) setHasIsAdmin:(BOOL) _value_ {
  hasIsAdmin_ = !!_value_;
}
- (BOOL) isAdmin {
  return !!isAdmin_;
}
- (void) setIsAdmin:(BOOL) _value_ {
  isAdmin_ = !!_value_;
}
- (BOOL) hasUuid {
  return !!hasUuid_;
}
- (void) setHasUuid:(BOOL) _value_ {
  hasUuid_ = !!_value_;
}
@synthesize uuid;
- (BOOL) hasToken {
  return !!hasToken_;
}
- (void) setHasToken:(BOOL) _value_ {
  hasToken_ = !!_value_;
}
@synthesize token;
- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) _value_ {
  hasCode_ = !!_value_;
}
@synthesize code;
- (instancetype) init {
  if ((self = [super init])) {
    self.id = 0L;
    self.number = 0L;
    self.nickName = @"";
    self.imsi = 0L;
    self.imei = 0L;
    self.locationType = 0;
    self.lon = 0;
    self.lat = 0;
    self.location = @"";
    self.isAdmin = NO;
    self.uuid = @"";
    self.token = @"";
    self.code = @"";
  }
  return self;
}
static Mobile* defaultMobileInstance = nil;
+ (void) initialize {
  if (self == [Mobile class]) {
    defaultMobileInstance = [[Mobile alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultMobileInstance;
}
- (instancetype) defaultInstance {
  return defaultMobileInstance;
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeUInt64:1 value:self.id];
  }
  if (self.hasNumber) {
    [output writeUInt64:2 value:self.number];
  }
  if (self.hasNickName) {
    [output writeString:3 value:self.nickName];
  }
  if (self.hasImsi) {
    [output writeUInt64:4 value:self.imsi];
  }
  if (self.hasImei) {
    [output writeUInt64:5 value:self.imei];
  }
  if (self.hasLocationType) {
    [output writeUInt32:6 value:self.locationType];
  }
  if (self.hasLon) {
    [output writeDouble:7 value:self.lon];
  }
  if (self.hasLat) {
    [output writeDouble:8 value:self.lat];
  }
  if (self.hasLocation) {
    [output writeString:9 value:self.location];
  }
  if (self.hasIsAdmin) {
    [output writeBool:10 value:self.isAdmin];
  }
  if (self.hasUuid) {
    [output writeString:11 value:self.uuid];
  }
  if (self.hasToken) {
    [output writeString:12 value:self.token];
  }
  if (self.hasCode) {
    [output writeString:13 value:self.code];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeUInt64Size(1, self.id);
  }
  if (self.hasNumber) {
    size_ += computeUInt64Size(2, self.number);
  }
  if (self.hasNickName) {
    size_ += computeStringSize(3, self.nickName);
  }
  if (self.hasImsi) {
    size_ += computeUInt64Size(4, self.imsi);
  }
  if (self.hasImei) {
    size_ += computeUInt64Size(5, self.imei);
  }
  if (self.hasLocationType) {
    size_ += computeUInt32Size(6, self.locationType);
  }
  if (self.hasLon) {
    size_ += computeDoubleSize(7, self.lon);
  }
  if (self.hasLat) {
    size_ += computeDoubleSize(8, self.lat);
  }
  if (self.hasLocation) {
    size_ += computeStringSize(9, self.location);
  }
  if (self.hasIsAdmin) {
    size_ += computeBoolSize(10, self.isAdmin);
  }
  if (self.hasUuid) {
    size_ += computeStringSize(11, self.uuid);
  }
  if (self.hasToken) {
    size_ += computeStringSize(12, self.token);
  }
  if (self.hasCode) {
    size_ += computeStringSize(13, self.code);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Mobile*) parseFromData:(NSData*) data {
  return (Mobile*)[[[Mobile builder] mergeFromData:data] build];
}
+ (Mobile*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Mobile*)[[[Mobile builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Mobile*) parseFromInputStream:(NSInputStream*) input {
  return (Mobile*)[[[Mobile builder] mergeFromInputStream:input] build];
}
+ (Mobile*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Mobile*)[[[Mobile builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Mobile*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Mobile*)[[[Mobile builder] mergeFromCodedInputStream:input] build];
}
+ (Mobile*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Mobile*)[[[Mobile builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MobileBuilder*) builder {
  return [[MobileBuilder alloc] init];
}
+ (MobileBuilder*) builderWithPrototype:(Mobile*) prototype {
  return [[Mobile builder] mergeFrom:prototype];
}
- (MobileBuilder*) builder {
  return [Mobile builder];
}
- (MobileBuilder*) toBuilder {
  return [Mobile builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithLongLong:self.id]];
  }
  if (self.hasNumber) {
    [output appendFormat:@"%@%@: %@\n", indent, @"number", [NSNumber numberWithLongLong:self.number]];
  }
  if (self.hasNickName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nickName", self.nickName];
  }
  if (self.hasImsi) {
    [output appendFormat:@"%@%@: %@\n", indent, @"imsi", [NSNumber numberWithLongLong:self.imsi]];
  }
  if (self.hasImei) {
    [output appendFormat:@"%@%@: %@\n", indent, @"imei", [NSNumber numberWithLongLong:self.imei]];
  }
  if (self.hasLocationType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"locationType", [NSNumber numberWithInteger:self.locationType]];
  }
  if (self.hasLon) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lon", [NSNumber numberWithDouble:self.lon]];
  }
  if (self.hasLat) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lat", [NSNumber numberWithDouble:self.lat]];
  }
  if (self.hasLocation) {
    [output appendFormat:@"%@%@: %@\n", indent, @"location", self.location];
  }
  if (self.hasIsAdmin) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isAdmin", [NSNumber numberWithBool:self.isAdmin]];
  }
  if (self.hasUuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uuid", self.uuid];
  }
  if (self.hasToken) {
    [output appendFormat:@"%@%@: %@\n", indent, @"token", self.token];
  }
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", self.code];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.id] forKey: @"id"];
  }
  if (self.hasNumber) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.number] forKey: @"number"];
  }
  if (self.hasNickName) {
    [dictionary setObject: self.nickName forKey: @"nickName"];
  }
  if (self.hasImsi) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.imsi] forKey: @"imsi"];
  }
  if (self.hasImei) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.imei] forKey: @"imei"];
  }
  if (self.hasLocationType) {
    [dictionary setObject: [NSNumber numberWithInteger:self.locationType] forKey: @"locationType"];
  }
  if (self.hasLon) {
    [dictionary setObject: [NSNumber numberWithDouble:self.lon] forKey: @"lon"];
  }
  if (self.hasLat) {
    [dictionary setObject: [NSNumber numberWithDouble:self.lat] forKey: @"lat"];
  }
  if (self.hasLocation) {
    [dictionary setObject: self.location forKey: @"location"];
  }
  if (self.hasIsAdmin) {
    [dictionary setObject: [NSNumber numberWithBool:self.isAdmin] forKey: @"isAdmin"];
  }
  if (self.hasUuid) {
    [dictionary setObject: self.uuid forKey: @"uuid"];
  }
  if (self.hasToken) {
    [dictionary setObject: self.token forKey: @"token"];
  }
  if (self.hasCode) {
    [dictionary setObject: self.code forKey: @"code"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Mobile class]]) {
    return NO;
  }
  Mobile *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasNumber == otherMessage.hasNumber &&
      (!self.hasNumber || self.number == otherMessage.number) &&
      self.hasNickName == otherMessage.hasNickName &&
      (!self.hasNickName || [self.nickName isEqual:otherMessage.nickName]) &&
      self.hasImsi == otherMessage.hasImsi &&
      (!self.hasImsi || self.imsi == otherMessage.imsi) &&
      self.hasImei == otherMessage.hasImei &&
      (!self.hasImei || self.imei == otherMessage.imei) &&
      self.hasLocationType == otherMessage.hasLocationType &&
      (!self.hasLocationType || self.locationType == otherMessage.locationType) &&
      self.hasLon == otherMessage.hasLon &&
      (!self.hasLon || self.lon == otherMessage.lon) &&
      self.hasLat == otherMessage.hasLat &&
      (!self.hasLat || self.lat == otherMessage.lat) &&
      self.hasLocation == otherMessage.hasLocation &&
      (!self.hasLocation || [self.location isEqual:otherMessage.location]) &&
      self.hasIsAdmin == otherMessage.hasIsAdmin &&
      (!self.hasIsAdmin || self.isAdmin == otherMessage.isAdmin) &&
      self.hasUuid == otherMessage.hasUuid &&
      (!self.hasUuid || [self.uuid isEqual:otherMessage.uuid]) &&
      self.hasToken == otherMessage.hasToken &&
      (!self.hasToken || [self.token isEqual:otherMessage.token]) &&
      self.hasCode == otherMessage.hasCode &&
      (!self.hasCode || [self.code isEqual:otherMessage.code]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.id] hash];
  }
  if (self.hasNumber) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.number] hash];
  }
  if (self.hasNickName) {
    hashCode = hashCode * 31 + [self.nickName hash];
  }
  if (self.hasImsi) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.imsi] hash];
  }
  if (self.hasImei) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.imei] hash];
  }
  if (self.hasLocationType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.locationType] hash];
  }
  if (self.hasLon) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.lon] hash];
  }
  if (self.hasLat) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.lat] hash];
  }
  if (self.hasLocation) {
    hashCode = hashCode * 31 + [self.location hash];
  }
  if (self.hasIsAdmin) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isAdmin] hash];
  }
  if (self.hasUuid) {
    hashCode = hashCode * 31 + [self.uuid hash];
  }
  if (self.hasToken) {
    hashCode = hashCode * 31 + [self.token hash];
  }
  if (self.hasCode) {
    hashCode = hashCode * 31 + [self.code hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MobileBuilder()
@property (strong) Mobile* resultMobile;
@end

@implementation MobileBuilder
@synthesize resultMobile;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultMobile = [[Mobile alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultMobile;
}
- (MobileBuilder*) clear {
  self.resultMobile = [[Mobile alloc] init];
  return self;
}
- (MobileBuilder*) clone {
  return [Mobile builderWithPrototype:resultMobile];
}
- (Mobile*) defaultInstance {
  return [Mobile defaultInstance];
}
- (Mobile*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Mobile*) buildPartial {
  Mobile* returnMe = resultMobile;
  self.resultMobile = nil;
  return returnMe;
}
- (MobileBuilder*) mergeFrom:(Mobile*) other {
  if (other == [Mobile defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasNumber) {
    [self setNumber:other.number];
  }
  if (other.hasNickName) {
    [self setNickName:other.nickName];
  }
  if (other.hasImsi) {
    [self setImsi:other.imsi];
  }
  if (other.hasImei) {
    [self setImei:other.imei];
  }
  if (other.hasLocationType) {
    [self setLocationType:other.locationType];
  }
  if (other.hasLon) {
    [self setLon:other.lon];
  }
  if (other.hasLat) {
    [self setLat:other.lat];
  }
  if (other.hasLocation) {
    [self setLocation:other.location];
  }
  if (other.hasIsAdmin) {
    [self setIsAdmin:other.isAdmin];
  }
  if (other.hasUuid) {
    [self setUuid:other.uuid];
  }
  if (other.hasToken) {
    [self setToken:other.token];
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MobileBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MobileBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readUInt64]];
        break;
      }
      case 16: {
        [self setNumber:[input readUInt64]];
        break;
      }
      case 26: {
        [self setNickName:[input readString]];
        break;
      }
      case 32: {
        [self setImsi:[input readUInt64]];
        break;
      }
      case 40: {
        [self setImei:[input readUInt64]];
        break;
      }
      case 48: {
        [self setLocationType:[input readUInt32]];
        break;
      }
      case 57: {
        [self setLon:[input readDouble]];
        break;
      }
      case 65: {
        [self setLat:[input readDouble]];
        break;
      }
      case 74: {
        [self setLocation:[input readString]];
        break;
      }
      case 80: {
        [self setIsAdmin:[input readBool]];
        break;
      }
      case 90: {
        [self setUuid:[input readString]];
        break;
      }
      case 98: {
        [self setToken:[input readString]];
        break;
      }
      case 106: {
        [self setCode:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return resultMobile.hasId;
}
- (UInt64) id {
  return resultMobile.id;
}
- (MobileBuilder*) setId:(UInt64) value {
  resultMobile.hasId = YES;
  resultMobile.id = value;
  return self;
}
- (MobileBuilder*) clearId {
  resultMobile.hasId = NO;
  resultMobile.id = 0L;
  return self;
}
- (BOOL) hasNumber {
  return resultMobile.hasNumber;
}
- (UInt64) number {
  return resultMobile.number;
}
- (MobileBuilder*) setNumber:(UInt64) value {
  resultMobile.hasNumber = YES;
  resultMobile.number = value;
  return self;
}
- (MobileBuilder*) clearNumber {
  resultMobile.hasNumber = NO;
  resultMobile.number = 0L;
  return self;
}
- (BOOL) hasNickName {
  return resultMobile.hasNickName;
}
- (NSString*) nickName {
  return resultMobile.nickName;
}
- (MobileBuilder*) setNickName:(NSString*) value {
  resultMobile.hasNickName = YES;
  resultMobile.nickName = value;
  return self;
}
- (MobileBuilder*) clearNickName {
  resultMobile.hasNickName = NO;
  resultMobile.nickName = @"";
  return self;
}
- (BOOL) hasImsi {
  return resultMobile.hasImsi;
}
- (UInt64) imsi {
  return resultMobile.imsi;
}
- (MobileBuilder*) setImsi:(UInt64) value {
  resultMobile.hasImsi = YES;
  resultMobile.imsi = value;
  return self;
}
- (MobileBuilder*) clearImsi {
  resultMobile.hasImsi = NO;
  resultMobile.imsi = 0L;
  return self;
}
- (BOOL) hasImei {
  return resultMobile.hasImei;
}
- (UInt64) imei {
  return resultMobile.imei;
}
- (MobileBuilder*) setImei:(UInt64) value {
  resultMobile.hasImei = YES;
  resultMobile.imei = value;
  return self;
}
- (MobileBuilder*) clearImei {
  resultMobile.hasImei = NO;
  resultMobile.imei = 0L;
  return self;
}
- (BOOL) hasLocationType {
  return resultMobile.hasLocationType;
}
- (UInt32) locationType {
  return resultMobile.locationType;
}
- (MobileBuilder*) setLocationType:(UInt32) value {
  resultMobile.hasLocationType = YES;
  resultMobile.locationType = value;
  return self;
}
- (MobileBuilder*) clearLocationType {
  resultMobile.hasLocationType = NO;
  resultMobile.locationType = 0;
  return self;
}
- (BOOL) hasLon {
  return resultMobile.hasLon;
}
- (Float64) lon {
  return resultMobile.lon;
}
- (MobileBuilder*) setLon:(Float64) value {
  resultMobile.hasLon = YES;
  resultMobile.lon = value;
  return self;
}
- (MobileBuilder*) clearLon {
  resultMobile.hasLon = NO;
  resultMobile.lon = 0;
  return self;
}
- (BOOL) hasLat {
  return resultMobile.hasLat;
}
- (Float64) lat {
  return resultMobile.lat;
}
- (MobileBuilder*) setLat:(Float64) value {
  resultMobile.hasLat = YES;
  resultMobile.lat = value;
  return self;
}
- (MobileBuilder*) clearLat {
  resultMobile.hasLat = NO;
  resultMobile.lat = 0;
  return self;
}
- (BOOL) hasLocation {
  return resultMobile.hasLocation;
}
- (NSString*) location {
  return resultMobile.location;
}
- (MobileBuilder*) setLocation:(NSString*) value {
  resultMobile.hasLocation = YES;
  resultMobile.location = value;
  return self;
}
- (MobileBuilder*) clearLocation {
  resultMobile.hasLocation = NO;
  resultMobile.location = @"";
  return self;
}
- (BOOL) hasIsAdmin {
  return resultMobile.hasIsAdmin;
}
- (BOOL) isAdmin {
  return resultMobile.isAdmin;
}
- (MobileBuilder*) setIsAdmin:(BOOL) value {
  resultMobile.hasIsAdmin = YES;
  resultMobile.isAdmin = value;
  return self;
}
- (MobileBuilder*) clearIsAdmin {
  resultMobile.hasIsAdmin = NO;
  resultMobile.isAdmin = NO;
  return self;
}
- (BOOL) hasUuid {
  return resultMobile.hasUuid;
}
- (NSString*) uuid {
  return resultMobile.uuid;
}
- (MobileBuilder*) setUuid:(NSString*) value {
  resultMobile.hasUuid = YES;
  resultMobile.uuid = value;
  return self;
}
- (MobileBuilder*) clearUuid {
  resultMobile.hasUuid = NO;
  resultMobile.uuid = @"";
  return self;
}
- (BOOL) hasToken {
  return resultMobile.hasToken;
}
- (NSString*) token {
  return resultMobile.token;
}
- (MobileBuilder*) setToken:(NSString*) value {
  resultMobile.hasToken = YES;
  resultMobile.token = value;
  return self;
}
- (MobileBuilder*) clearToken {
  resultMobile.hasToken = NO;
  resultMobile.token = @"";
  return self;
}
- (BOOL) hasCode {
  return resultMobile.hasCode;
}
- (NSString*) code {
  return resultMobile.code;
}
- (MobileBuilder*) setCode:(NSString*) value {
  resultMobile.hasCode = YES;
  resultMobile.code = value;
  return self;
}
- (MobileBuilder*) clearCode {
  resultMobile.hasCode = NO;
  resultMobile.code = @"";
  return self;
}
@end

@interface FamilyMember ()
@property UInt64 id;
@property (strong) NSString* nickName;
@property UInt64 number;
@property BOOL isAdmin;
@property (strong) PBAppendableArray * watchIdsArray;
@property BOOL isFather;
@property BOOL isMother;
@end

@implementation FamilyMember

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasNickName {
  return !!hasNickName_;
}
- (void) setHasNickName:(BOOL) _value_ {
  hasNickName_ = !!_value_;
}
@synthesize nickName;
- (BOOL) hasNumber {
  return !!hasNumber_;
}
- (void) setHasNumber:(BOOL) _value_ {
  hasNumber_ = !!_value_;
}
@synthesize number;
- (BOOL) hasIsAdmin {
  return !!hasIsAdmin_;
}
- (void) setHasIsAdmin:(BOOL) _value_ {
  hasIsAdmin_ = !!_value_;
}
- (BOOL) isAdmin {
  return !!isAdmin_;
}
- (void) setIsAdmin:(BOOL) _value_ {
  isAdmin_ = !!_value_;
}
@synthesize watchIdsArray;
@dynamic watchIds;
- (BOOL) hasIsFather {
  return !!hasIsFather_;
}
- (void) setHasIsFather:(BOOL) _value_ {
  hasIsFather_ = !!_value_;
}
- (BOOL) isFather {
  return !!isFather_;
}
- (void) setIsFather:(BOOL) _value_ {
  isFather_ = !!_value_;
}
- (BOOL) hasIsMother {
  return !!hasIsMother_;
}
- (void) setHasIsMother:(BOOL) _value_ {
  hasIsMother_ = !!_value_;
}
- (BOOL) isMother {
  return !!isMother_;
}
- (void) setIsMother:(BOOL) _value_ {
  isMother_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.id = 0L;
    self.nickName = @"";
    self.number = 0L;
    self.isAdmin = NO;
    self.isFather = NO;
    self.isMother = NO;
  }
  return self;
}
static FamilyMember* defaultFamilyMemberInstance = nil;
+ (void) initialize {
  if (self == [FamilyMember class]) {
    defaultFamilyMemberInstance = [[FamilyMember alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultFamilyMemberInstance;
}
- (instancetype) defaultInstance {
  return defaultFamilyMemberInstance;
}
- (PBArray *)watchIds {
  return watchIdsArray;
}
- (UInt64)watchIdsAtIndex:(NSUInteger)index {
  return [watchIdsArray uint64AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeUInt64:1 value:self.id];
  }
  if (self.hasNickName) {
    [output writeString:2 value:self.nickName];
  }
  if (self.hasNumber) {
    [output writeUInt64:3 value:self.number];
  }
  if (self.hasIsAdmin) {
    [output writeBool:4 value:self.isAdmin];
  }
  const NSUInteger watchIdsArrayCount = self.watchIdsArray.count;
  if (watchIdsArrayCount > 0) {
    const UInt64 *values = (const UInt64 *)self.watchIdsArray.data;
    for (NSUInteger i = 0; i < watchIdsArrayCount; ++i) {
      [output writeUInt64:5 value:values[i]];
    }
  }
  if (self.hasIsFather) {
    [output writeBool:6 value:self.isFather];
  }
  if (self.hasIsMother) {
    [output writeBool:7 value:self.isMother];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeUInt64Size(1, self.id);
  }
  if (self.hasNickName) {
    size_ += computeStringSize(2, self.nickName);
  }
  if (self.hasNumber) {
    size_ += computeUInt64Size(3, self.number);
  }
  if (self.hasIsAdmin) {
    size_ += computeBoolSize(4, self.isAdmin);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.watchIdsArray.count;
    const UInt64 *values = (const UInt64 *)self.watchIdsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasIsFather) {
    size_ += computeBoolSize(6, self.isFather);
  }
  if (self.hasIsMother) {
    size_ += computeBoolSize(7, self.isMother);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (FamilyMember*) parseFromData:(NSData*) data {
  return (FamilyMember*)[[[FamilyMember builder] mergeFromData:data] build];
}
+ (FamilyMember*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FamilyMember*)[[[FamilyMember builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (FamilyMember*) parseFromInputStream:(NSInputStream*) input {
  return (FamilyMember*)[[[FamilyMember builder] mergeFromInputStream:input] build];
}
+ (FamilyMember*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FamilyMember*)[[[FamilyMember builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FamilyMember*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (FamilyMember*)[[[FamilyMember builder] mergeFromCodedInputStream:input] build];
}
+ (FamilyMember*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FamilyMember*)[[[FamilyMember builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FamilyMemberBuilder*) builder {
  return [[FamilyMemberBuilder alloc] init];
}
+ (FamilyMemberBuilder*) builderWithPrototype:(FamilyMember*) prototype {
  return [[FamilyMember builder] mergeFrom:prototype];
}
- (FamilyMemberBuilder*) builder {
  return [FamilyMember builder];
}
- (FamilyMemberBuilder*) toBuilder {
  return [FamilyMember builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithLongLong:self.id]];
  }
  if (self.hasNickName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nickName", self.nickName];
  }
  if (self.hasNumber) {
    [output appendFormat:@"%@%@: %@\n", indent, @"number", [NSNumber numberWithLongLong:self.number]];
  }
  if (self.hasIsAdmin) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isAdmin", [NSNumber numberWithBool:self.isAdmin]];
  }
  [self.watchIdsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"watchIds", obj];
  }];
  if (self.hasIsFather) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isFather", [NSNumber numberWithBool:self.isFather]];
  }
  if (self.hasIsMother) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isMother", [NSNumber numberWithBool:self.isMother]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.id] forKey: @"id"];
  }
  if (self.hasNickName) {
    [dictionary setObject: self.nickName forKey: @"nickName"];
  }
  if (self.hasNumber) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.number] forKey: @"number"];
  }
  if (self.hasIsAdmin) {
    [dictionary setObject: [NSNumber numberWithBool:self.isAdmin] forKey: @"isAdmin"];
  }
  NSMutableArray * watchIdsArrayArray = [NSMutableArray new];
  NSUInteger watchIdsArrayCount=self.watchIdsArray.count;
  for(int i=0;i<watchIdsArrayCount;i++){
    [watchIdsArrayArray addObject: @([self.watchIdsArray uint64AtIndex:i])];
  }
  [dictionary setObject: watchIdsArrayArray forKey: @"watchIds"];
  if (self.hasIsFather) {
    [dictionary setObject: [NSNumber numberWithBool:self.isFather] forKey: @"isFather"];
  }
  if (self.hasIsMother) {
    [dictionary setObject: [NSNumber numberWithBool:self.isMother] forKey: @"isMother"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[FamilyMember class]]) {
    return NO;
  }
  FamilyMember *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasNickName == otherMessage.hasNickName &&
      (!self.hasNickName || [self.nickName isEqual:otherMessage.nickName]) &&
      self.hasNumber == otherMessage.hasNumber &&
      (!self.hasNumber || self.number == otherMessage.number) &&
      self.hasIsAdmin == otherMessage.hasIsAdmin &&
      (!self.hasIsAdmin || self.isAdmin == otherMessage.isAdmin) &&
      [self.watchIdsArray isEqualToArray:otherMessage.watchIdsArray] &&
      self.hasIsFather == otherMessage.hasIsFather &&
      (!self.hasIsFather || self.isFather == otherMessage.isFather) &&
      self.hasIsMother == otherMessage.hasIsMother &&
      (!self.hasIsMother || self.isMother == otherMessage.isMother) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.id] hash];
  }
  if (self.hasNickName) {
    hashCode = hashCode * 31 + [self.nickName hash];
  }
  if (self.hasNumber) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.number] hash];
  }
  if (self.hasIsAdmin) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isAdmin] hash];
  }
  [self.watchIdsArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  if (self.hasIsFather) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isFather] hash];
  }
  if (self.hasIsMother) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isMother] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface FamilyMemberBuilder()
@property (strong) FamilyMember* resultFamilyMember;
@end

@implementation FamilyMemberBuilder
@synthesize resultFamilyMember;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultFamilyMember = [[FamilyMember alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultFamilyMember;
}
- (FamilyMemberBuilder*) clear {
  self.resultFamilyMember = [[FamilyMember alloc] init];
  return self;
}
- (FamilyMemberBuilder*) clone {
  return [FamilyMember builderWithPrototype:resultFamilyMember];
}
- (FamilyMember*) defaultInstance {
  return [FamilyMember defaultInstance];
}
- (FamilyMember*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FamilyMember*) buildPartial {
  FamilyMember* returnMe = resultFamilyMember;
  self.resultFamilyMember = nil;
  return returnMe;
}
- (FamilyMemberBuilder*) mergeFrom:(FamilyMember*) other {
  if (other == [FamilyMember defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasNickName) {
    [self setNickName:other.nickName];
  }
  if (other.hasNumber) {
    [self setNumber:other.number];
  }
  if (other.hasIsAdmin) {
    [self setIsAdmin:other.isAdmin];
  }
  if (other.watchIdsArray.count > 0) {
    if (resultFamilyMember.watchIdsArray == nil) {
      resultFamilyMember.watchIdsArray = [other.watchIdsArray copy];
    } else {
      [resultFamilyMember.watchIdsArray appendArray:other.watchIdsArray];
    }
  }
  if (other.hasIsFather) {
    [self setIsFather:other.isFather];
  }
  if (other.hasIsMother) {
    [self setIsMother:other.isMother];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FamilyMemberBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FamilyMemberBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readUInt64]];
        break;
      }
      case 18: {
        [self setNickName:[input readString]];
        break;
      }
      case 24: {
        [self setNumber:[input readUInt64]];
        break;
      }
      case 32: {
        [self setIsAdmin:[input readBool]];
        break;
      }
      case 40: {
        [self addWatchIds:[input readUInt64]];
        break;
      }
      case 48: {
        [self setIsFather:[input readBool]];
        break;
      }
      case 56: {
        [self setIsMother:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return resultFamilyMember.hasId;
}
- (UInt64) id {
  return resultFamilyMember.id;
}
- (FamilyMemberBuilder*) setId:(UInt64) value {
  resultFamilyMember.hasId = YES;
  resultFamilyMember.id = value;
  return self;
}
- (FamilyMemberBuilder*) clearId {
  resultFamilyMember.hasId = NO;
  resultFamilyMember.id = 0L;
  return self;
}
- (BOOL) hasNickName {
  return resultFamilyMember.hasNickName;
}
- (NSString*) nickName {
  return resultFamilyMember.nickName;
}
- (FamilyMemberBuilder*) setNickName:(NSString*) value {
  resultFamilyMember.hasNickName = YES;
  resultFamilyMember.nickName = value;
  return self;
}
- (FamilyMemberBuilder*) clearNickName {
  resultFamilyMember.hasNickName = NO;
  resultFamilyMember.nickName = @"";
  return self;
}
- (BOOL) hasNumber {
  return resultFamilyMember.hasNumber;
}
- (UInt64) number {
  return resultFamilyMember.number;
}
- (FamilyMemberBuilder*) setNumber:(UInt64) value {
  resultFamilyMember.hasNumber = YES;
  resultFamilyMember.number = value;
  return self;
}
- (FamilyMemberBuilder*) clearNumber {
  resultFamilyMember.hasNumber = NO;
  resultFamilyMember.number = 0L;
  return self;
}
- (BOOL) hasIsAdmin {
  return resultFamilyMember.hasIsAdmin;
}
- (BOOL) isAdmin {
  return resultFamilyMember.isAdmin;
}
- (FamilyMemberBuilder*) setIsAdmin:(BOOL) value {
  resultFamilyMember.hasIsAdmin = YES;
  resultFamilyMember.isAdmin = value;
  return self;
}
- (FamilyMemberBuilder*) clearIsAdmin {
  resultFamilyMember.hasIsAdmin = NO;
  resultFamilyMember.isAdmin = NO;
  return self;
}
- (PBAppendableArray *)watchIds {
  return resultFamilyMember.watchIdsArray;
}
- (UInt64)watchIdsAtIndex:(NSUInteger)index {
  return [resultFamilyMember watchIdsAtIndex:index];
}
- (FamilyMemberBuilder *)addWatchIds:(UInt64)value {
  if (resultFamilyMember.watchIdsArray == nil) {
    resultFamilyMember.watchIdsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
  }
  [resultFamilyMember.watchIdsArray addUint64:value];
  return self;
}
- (FamilyMemberBuilder *)setWatchIdsArray:(NSArray *)array {
  resultFamilyMember.watchIdsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt64];
  return self;
}
- (FamilyMemberBuilder *)setWatchIdsValues:(const UInt64 *)values count:(NSUInteger)count {
  resultFamilyMember.watchIdsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt64];
  return self;
}
- (FamilyMemberBuilder *)clearWatchIds {
  resultFamilyMember.watchIdsArray = nil;
  return self;
}
- (BOOL) hasIsFather {
  return resultFamilyMember.hasIsFather;
}
- (BOOL) isFather {
  return resultFamilyMember.isFather;
}
- (FamilyMemberBuilder*) setIsFather:(BOOL) value {
  resultFamilyMember.hasIsFather = YES;
  resultFamilyMember.isFather = value;
  return self;
}
- (FamilyMemberBuilder*) clearIsFather {
  resultFamilyMember.hasIsFather = NO;
  resultFamilyMember.isFather = NO;
  return self;
}
- (BOOL) hasIsMother {
  return resultFamilyMember.hasIsMother;
}
- (BOOL) isMother {
  return resultFamilyMember.isMother;
}
- (FamilyMemberBuilder*) setIsMother:(BOOL) value {
  resultFamilyMember.hasIsMother = YES;
  resultFamilyMember.isMother = value;
  return self;
}
- (FamilyMemberBuilder*) clearIsMother {
  resultFamilyMember.hasIsMother = NO;
  resultFamilyMember.isMother = NO;
  return self;
}
@end

@interface Fence ()
@property (strong) NSString* name;
@property Float64 lon;
@property Float64 lat;
@property UInt32 radius;
@end

@implementation Fence

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasLon {
  return !!hasLon_;
}
- (void) setHasLon:(BOOL) _value_ {
  hasLon_ = !!_value_;
}
@synthesize lon;
- (BOOL) hasLat {
  return !!hasLat_;
}
- (void) setHasLat:(BOOL) _value_ {
  hasLat_ = !!_value_;
}
@synthesize lat;
- (BOOL) hasRadius {
  return !!hasRadius_;
}
- (void) setHasRadius:(BOOL) _value_ {
  hasRadius_ = !!_value_;
}
@synthesize radius;
- (instancetype) init {
  if ((self = [super init])) {
    self.name = @"";
    self.lon = 0;
    self.lat = 0;
    self.radius = 0;
  }
  return self;
}
static Fence* defaultFenceInstance = nil;
+ (void) initialize {
  if (self == [Fence class]) {
    defaultFenceInstance = [[Fence alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultFenceInstance;
}
- (instancetype) defaultInstance {
  return defaultFenceInstance;
}
- (BOOL) isInitialized {
  if (!self.hasName) {
    return NO;
  }
  if (!self.hasLon) {
    return NO;
  }
  if (!self.hasLat) {
    return NO;
  }
  if (!self.hasRadius) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  if (self.hasLon) {
    [output writeDouble:3 value:self.lon];
  }
  if (self.hasLat) {
    [output writeDouble:4 value:self.lat];
  }
  if (self.hasRadius) {
    [output writeUInt32:5 value:self.radius];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasName) {
    size_ += computeStringSize(2, self.name);
  }
  if (self.hasLon) {
    size_ += computeDoubleSize(3, self.lon);
  }
  if (self.hasLat) {
    size_ += computeDoubleSize(4, self.lat);
  }
  if (self.hasRadius) {
    size_ += computeUInt32Size(5, self.radius);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Fence*) parseFromData:(NSData*) data {
  return (Fence*)[[[Fence builder] mergeFromData:data] build];
}
+ (Fence*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Fence*)[[[Fence builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Fence*) parseFromInputStream:(NSInputStream*) input {
  return (Fence*)[[[Fence builder] mergeFromInputStream:input] build];
}
+ (Fence*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Fence*)[[[Fence builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Fence*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Fence*)[[[Fence builder] mergeFromCodedInputStream:input] build];
}
+ (Fence*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Fence*)[[[Fence builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FenceBuilder*) builder {
  return [[FenceBuilder alloc] init];
}
+ (FenceBuilder*) builderWithPrototype:(Fence*) prototype {
  return [[Fence builder] mergeFrom:prototype];
}
- (FenceBuilder*) builder {
  return [Fence builder];
}
- (FenceBuilder*) toBuilder {
  return [Fence builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasLon) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lon", [NSNumber numberWithDouble:self.lon]];
  }
  if (self.hasLat) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lat", [NSNumber numberWithDouble:self.lat]];
  }
  if (self.hasRadius) {
    [output appendFormat:@"%@%@: %@\n", indent, @"radius", [NSNumber numberWithInteger:self.radius]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasName) {
    [dictionary setObject: self.name forKey: @"name"];
  }
  if (self.hasLon) {
    [dictionary setObject: [NSNumber numberWithDouble:self.lon] forKey: @"lon"];
  }
  if (self.hasLat) {
    [dictionary setObject: [NSNumber numberWithDouble:self.lat] forKey: @"lat"];
  }
  if (self.hasRadius) {
    [dictionary setObject: [NSNumber numberWithInteger:self.radius] forKey: @"radius"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Fence class]]) {
    return NO;
  }
  Fence *otherMessage = other;
  return
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasLon == otherMessage.hasLon &&
      (!self.hasLon || self.lon == otherMessage.lon) &&
      self.hasLat == otherMessage.hasLat &&
      (!self.hasLat || self.lat == otherMessage.lat) &&
      self.hasRadius == otherMessage.hasRadius &&
      (!self.hasRadius || self.radius == otherMessage.radius) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasLon) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.lon] hash];
  }
  if (self.hasLat) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.lat] hash];
  }
  if (self.hasRadius) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.radius] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface FenceBuilder()
@property (strong) Fence* resultFence;
@end

@implementation FenceBuilder
@synthesize resultFence;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultFence = [[Fence alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultFence;
}
- (FenceBuilder*) clear {
  self.resultFence = [[Fence alloc] init];
  return self;
}
- (FenceBuilder*) clone {
  return [Fence builderWithPrototype:resultFence];
}
- (Fence*) defaultInstance {
  return [Fence defaultInstance];
}
- (Fence*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Fence*) buildPartial {
  Fence* returnMe = resultFence;
  self.resultFence = nil;
  return returnMe;
}
- (FenceBuilder*) mergeFrom:(Fence*) other {
  if (other == [Fence defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasLon) {
    [self setLon:other.lon];
  }
  if (other.hasLat) {
    [self setLat:other.lat];
  }
  if (other.hasRadius) {
    [self setRadius:other.radius];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FenceBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FenceBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
      case 25: {
        [self setLon:[input readDouble]];
        break;
      }
      case 33: {
        [self setLat:[input readDouble]];
        break;
      }
      case 40: {
        [self setRadius:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return resultFence.hasName;
}
- (NSString*) name {
  return resultFence.name;
}
- (FenceBuilder*) setName:(NSString*) value {
  resultFence.hasName = YES;
  resultFence.name = value;
  return self;
}
- (FenceBuilder*) clearName {
  resultFence.hasName = NO;
  resultFence.name = @"";
  return self;
}
- (BOOL) hasLon {
  return resultFence.hasLon;
}
- (Float64) lon {
  return resultFence.lon;
}
- (FenceBuilder*) setLon:(Float64) value {
  resultFence.hasLon = YES;
  resultFence.lon = value;
  return self;
}
- (FenceBuilder*) clearLon {
  resultFence.hasLon = NO;
  resultFence.lon = 0;
  return self;
}
- (BOOL) hasLat {
  return resultFence.hasLat;
}
- (Float64) lat {
  return resultFence.lat;
}
- (FenceBuilder*) setLat:(Float64) value {
  resultFence.hasLat = YES;
  resultFence.lat = value;
  return self;
}
- (FenceBuilder*) clearLat {
  resultFence.hasLat = NO;
  resultFence.lat = 0;
  return self;
}
- (BOOL) hasRadius {
  return resultFence.hasRadius;
}
- (UInt32) radius {
  return resultFence.radius;
}
- (FenceBuilder*) setRadius:(UInt32) value {
  resultFence.hasRadius = YES;
  resultFence.radius = value;
  return self;
}
- (FenceBuilder*) clearRadius {
  resultFence.hasRadius = NO;
  resultFence.radius = 0;
  return self;
}
@end

@interface Chat ()
@property UInt32 type;
@property UInt64 time;
@property (strong) NSString* nickName;
@property (strong) NSString* text;
@property (strong) NSData* datas;
@property (strong) PBAppendableArray * watchIdsArray;
@property (strong) PBAppendableArray * mobileIdsArray;
@end

@implementation Chat

- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasTime {
  return !!hasTime_;
}
- (void) setHasTime:(BOOL) _value_ {
  hasTime_ = !!_value_;
}
@synthesize time;
- (BOOL) hasNickName {
  return !!hasNickName_;
}
- (void) setHasNickName:(BOOL) _value_ {
  hasNickName_ = !!_value_;
}
@synthesize nickName;
- (BOOL) hasText {
  return !!hasText_;
}
- (void) setHasText:(BOOL) _value_ {
  hasText_ = !!_value_;
}
@synthesize text;
- (BOOL) hasDatas {
  return !!hasDatas_;
}
- (void) setHasDatas:(BOOL) _value_ {
  hasDatas_ = !!_value_;
}
@synthesize datas;
@synthesize watchIdsArray;
@dynamic watchIds;
@synthesize mobileIdsArray;
@dynamic mobileIds;
- (instancetype) init {
  if ((self = [super init])) {
    self.type = 0;
    self.time = 0L;
    self.nickName = @"";
    self.text = @"";
    self.datas = [NSData data];
  }
  return self;
}
static Chat* defaultChatInstance = nil;
+ (void) initialize {
  if (self == [Chat class]) {
    defaultChatInstance = [[Chat alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultChatInstance;
}
- (instancetype) defaultInstance {
  return defaultChatInstance;
}
- (PBArray *)watchIds {
  return watchIdsArray;
}
- (UInt64)watchIdsAtIndex:(NSUInteger)index {
  return [watchIdsArray uint64AtIndex:index];
}
- (PBArray *)mobileIds {
  return mobileIdsArray;
}
- (UInt64)mobileIdsAtIndex:(NSUInteger)index {
  return [mobileIdsArray uint64AtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasType) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasType) {
    [output writeUInt32:1 value:self.type];
  }
  if (self.hasTime) {
    [output writeUInt64:2 value:self.time];
  }
  if (self.hasNickName) {
    [output writeString:3 value:self.nickName];
  }
  if (self.hasText) {
    [output writeString:4 value:self.text];
  }
  if (self.hasDatas) {
    [output writeData:5 value:self.datas];
  }
  const NSUInteger watchIdsArrayCount = self.watchIdsArray.count;
  if (watchIdsArrayCount > 0) {
    const UInt64 *values = (const UInt64 *)self.watchIdsArray.data;
    for (NSUInteger i = 0; i < watchIdsArrayCount; ++i) {
      [output writeUInt64:6 value:values[i]];
    }
  }
  const NSUInteger mobileIdsArrayCount = self.mobileIdsArray.count;
  if (mobileIdsArrayCount > 0) {
    const UInt64 *values = (const UInt64 *)self.mobileIdsArray.data;
    for (NSUInteger i = 0; i < mobileIdsArrayCount; ++i) {
      [output writeUInt64:7 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasType) {
    size_ += computeUInt32Size(1, self.type);
  }
  if (self.hasTime) {
    size_ += computeUInt64Size(2, self.time);
  }
  if (self.hasNickName) {
    size_ += computeStringSize(3, self.nickName);
  }
  if (self.hasText) {
    size_ += computeStringSize(4, self.text);
  }
  if (self.hasDatas) {
    size_ += computeDataSize(5, self.datas);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.watchIdsArray.count;
    const UInt64 *values = (const UInt64 *)self.watchIdsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.mobileIdsArray.count;
    const UInt64 *values = (const UInt64 *)self.mobileIdsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Chat*) parseFromData:(NSData*) data {
  return (Chat*)[[[Chat builder] mergeFromData:data] build];
}
+ (Chat*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Chat*)[[[Chat builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Chat*) parseFromInputStream:(NSInputStream*) input {
  return (Chat*)[[[Chat builder] mergeFromInputStream:input] build];
}
+ (Chat*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Chat*)[[[Chat builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Chat*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Chat*)[[[Chat builder] mergeFromCodedInputStream:input] build];
}
+ (Chat*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Chat*)[[[Chat builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ChatBuilder*) builder {
  return [[ChatBuilder alloc] init];
}
+ (ChatBuilder*) builderWithPrototype:(Chat*) prototype {
  return [[Chat builder] mergeFrom:prototype];
}
- (ChatBuilder*) builder {
  return [Chat builder];
}
- (ChatBuilder*) toBuilder {
  return [Chat builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  if (self.hasTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"time", [NSNumber numberWithLongLong:self.time]];
  }
  if (self.hasNickName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nickName", self.nickName];
  }
  if (self.hasText) {
    [output appendFormat:@"%@%@: %@\n", indent, @"text", self.text];
  }
  if (self.hasDatas) {
    [output appendFormat:@"%@%@: %@\n", indent, @"datas", self.datas];
  }
  [self.watchIdsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"watchIds", obj];
  }];
  [self.mobileIdsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"mobileIds", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasType) {
    [dictionary setObject: [NSNumber numberWithInteger:self.type] forKey: @"type"];
  }
  if (self.hasTime) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.time] forKey: @"time"];
  }
  if (self.hasNickName) {
    [dictionary setObject: self.nickName forKey: @"nickName"];
  }
  if (self.hasText) {
    [dictionary setObject: self.text forKey: @"text"];
  }
  if (self.hasDatas) {
    [dictionary setObject: self.datas forKey: @"datas"];
  }
  NSMutableArray * watchIdsArrayArray = [NSMutableArray new];
  NSUInteger watchIdsArrayCount=self.watchIdsArray.count;
  for(int i=0;i<watchIdsArrayCount;i++){
    [watchIdsArrayArray addObject: @([self.watchIdsArray uint64AtIndex:i])];
  }
  [dictionary setObject: watchIdsArrayArray forKey: @"watchIds"];
  NSMutableArray * mobileIdsArrayArray = [NSMutableArray new];
  NSUInteger mobileIdsArrayCount=self.mobileIdsArray.count;
  for(int i=0;i<mobileIdsArrayCount;i++){
    [mobileIdsArrayArray addObject: @([self.mobileIdsArray uint64AtIndex:i])];
  }
  [dictionary setObject: mobileIdsArrayArray forKey: @"mobileIds"];
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Chat class]]) {
    return NO;
  }
  Chat *otherMessage = other;
  return
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasTime == otherMessage.hasTime &&
      (!self.hasTime || self.time == otherMessage.time) &&
      self.hasNickName == otherMessage.hasNickName &&
      (!self.hasNickName || [self.nickName isEqual:otherMessage.nickName]) &&
      self.hasText == otherMessage.hasText &&
      (!self.hasText || [self.text isEqual:otherMessage.text]) &&
      self.hasDatas == otherMessage.hasDatas &&
      (!self.hasDatas || [self.datas isEqual:otherMessage.datas]) &&
      [self.watchIdsArray isEqualToArray:otherMessage.watchIdsArray] &&
      [self.mobileIdsArray isEqualToArray:otherMessage.mobileIdsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.type] hash];
  }
  if (self.hasTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.time] hash];
  }
  if (self.hasNickName) {
    hashCode = hashCode * 31 + [self.nickName hash];
  }
  if (self.hasText) {
    hashCode = hashCode * 31 + [self.text hash];
  }
  if (self.hasDatas) {
    hashCode = hashCode * 31 + [self.datas hash];
  }
  [self.watchIdsArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.mobileIdsArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ChatBuilder()
@property (strong) Chat* resultChat;
@end

@implementation ChatBuilder
@synthesize resultChat;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultChat = [[Chat alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultChat;
}
- (ChatBuilder*) clear {
  self.resultChat = [[Chat alloc] init];
  return self;
}
- (ChatBuilder*) clone {
  return [Chat builderWithPrototype:resultChat];
}
- (Chat*) defaultInstance {
  return [Chat defaultInstance];
}
- (Chat*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Chat*) buildPartial {
  Chat* returnMe = resultChat;
  self.resultChat = nil;
  return returnMe;
}
- (ChatBuilder*) mergeFrom:(Chat*) other {
  if (other == [Chat defaultInstance]) {
    return self;
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasTime) {
    [self setTime:other.time];
  }
  if (other.hasNickName) {
    [self setNickName:other.nickName];
  }
  if (other.hasText) {
    [self setText:other.text];
  }
  if (other.hasDatas) {
    [self setDatas:other.datas];
  }
  if (other.watchIdsArray.count > 0) {
    if (resultChat.watchIdsArray == nil) {
      resultChat.watchIdsArray = [other.watchIdsArray copy];
    } else {
      [resultChat.watchIdsArray appendArray:other.watchIdsArray];
    }
  }
  if (other.mobileIdsArray.count > 0) {
    if (resultChat.mobileIdsArray == nil) {
      resultChat.mobileIdsArray = [other.mobileIdsArray copy];
    } else {
      [resultChat.mobileIdsArray appendArray:other.mobileIdsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ChatBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ChatBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setType:[input readUInt32]];
        break;
      }
      case 16: {
        [self setTime:[input readUInt64]];
        break;
      }
      case 26: {
        [self setNickName:[input readString]];
        break;
      }
      case 34: {
        [self setText:[input readString]];
        break;
      }
      case 42: {
        [self setDatas:[input readData]];
        break;
      }
      case 48: {
        [self addWatchIds:[input readUInt64]];
        break;
      }
      case 56: {
        [self addMobileIds:[input readUInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasType {
  return resultChat.hasType;
}
- (UInt32) type {
  return resultChat.type;
}
- (ChatBuilder*) setType:(UInt32) value {
  resultChat.hasType = YES;
  resultChat.type = value;
  return self;
}
- (ChatBuilder*) clearType {
  resultChat.hasType = NO;
  resultChat.type = 0;
  return self;
}
- (BOOL) hasTime {
  return resultChat.hasTime;
}
- (UInt64) time {
  return resultChat.time;
}
- (ChatBuilder*) setTime:(UInt64) value {
  resultChat.hasTime = YES;
  resultChat.time = value;
  return self;
}
- (ChatBuilder*) clearTime {
  resultChat.hasTime = NO;
  resultChat.time = 0L;
  return self;
}
- (BOOL) hasNickName {
  return resultChat.hasNickName;
}
- (NSString*) nickName {
  return resultChat.nickName;
}
- (ChatBuilder*) setNickName:(NSString*) value {
  resultChat.hasNickName = YES;
  resultChat.nickName = value;
  return self;
}
- (ChatBuilder*) clearNickName {
  resultChat.hasNickName = NO;
  resultChat.nickName = @"";
  return self;
}
- (BOOL) hasText {
  return resultChat.hasText;
}
- (NSString*) text {
  return resultChat.text;
}
- (ChatBuilder*) setText:(NSString*) value {
  resultChat.hasText = YES;
  resultChat.text = value;
  return self;
}
- (ChatBuilder*) clearText {
  resultChat.hasText = NO;
  resultChat.text = @"";
  return self;
}
- (BOOL) hasDatas {
  return resultChat.hasDatas;
}
- (NSData*) datas {
  return resultChat.datas;
}
- (ChatBuilder*) setDatas:(NSData*) value {
  resultChat.hasDatas = YES;
  resultChat.datas = value;
  return self;
}
- (ChatBuilder*) clearDatas {
  resultChat.hasDatas = NO;
  resultChat.datas = [NSData data];
  return self;
}
- (PBAppendableArray *)watchIds {
  return resultChat.watchIdsArray;
}
- (UInt64)watchIdsAtIndex:(NSUInteger)index {
  return [resultChat watchIdsAtIndex:index];
}
- (ChatBuilder *)addWatchIds:(UInt64)value {
  if (resultChat.watchIdsArray == nil) {
    resultChat.watchIdsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
  }
  [resultChat.watchIdsArray addUint64:value];
  return self;
}
- (ChatBuilder *)setWatchIdsArray:(NSArray *)array {
  resultChat.watchIdsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt64];
  return self;
}
- (ChatBuilder *)setWatchIdsValues:(const UInt64 *)values count:(NSUInteger)count {
  resultChat.watchIdsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt64];
  return self;
}
- (ChatBuilder *)clearWatchIds {
  resultChat.watchIdsArray = nil;
  return self;
}
- (PBAppendableArray *)mobileIds {
  return resultChat.mobileIdsArray;
}
- (UInt64)mobileIdsAtIndex:(NSUInteger)index {
  return [resultChat mobileIdsAtIndex:index];
}
- (ChatBuilder *)addMobileIds:(UInt64)value {
  if (resultChat.mobileIdsArray == nil) {
    resultChat.mobileIdsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
  }
  [resultChat.mobileIdsArray addUint64:value];
  return self;
}
- (ChatBuilder *)setMobileIdsArray:(NSArray *)array {
  resultChat.mobileIdsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt64];
  return self;
}
- (ChatBuilder *)setMobileIdsValues:(const UInt64 *)values count:(NSUInteger)count {
  resultChat.mobileIdsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt64];
  return self;
}
- (ChatBuilder *)clearMobileIds {
  resultChat.mobileIdsArray = nil;
  return self;
}
@end

@interface Setting ()
@property BOOL refuseStranger;
@property BOOL factoryReset;
@end

@implementation Setting

- (BOOL) hasRefuseStranger {
  return !!hasRefuseStranger_;
}
- (void) setHasRefuseStranger:(BOOL) _value_ {
  hasRefuseStranger_ = !!_value_;
}
- (BOOL) refuseStranger {
  return !!refuseStranger_;
}
- (void) setRefuseStranger:(BOOL) _value_ {
  refuseStranger_ = !!_value_;
}
- (BOOL) hasFactoryReset {
  return !!hasFactoryReset_;
}
- (void) setHasFactoryReset:(BOOL) _value_ {
  hasFactoryReset_ = !!_value_;
}
- (BOOL) factoryReset {
  return !!factoryReset_;
}
- (void) setFactoryReset:(BOOL) _value_ {
  factoryReset_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.refuseStranger = YES;
    self.factoryReset = NO;
  }
  return self;
}
static Setting* defaultSettingInstance = nil;
+ (void) initialize {
  if (self == [Setting class]) {
    defaultSettingInstance = [[Setting alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultSettingInstance;
}
- (instancetype) defaultInstance {
  return defaultSettingInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRefuseStranger) {
    [output writeBool:1 value:self.refuseStranger];
  }
  if (self.hasFactoryReset) {
    [output writeBool:2 value:self.factoryReset];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasRefuseStranger) {
    size_ += computeBoolSize(1, self.refuseStranger);
  }
  if (self.hasFactoryReset) {
    size_ += computeBoolSize(2, self.factoryReset);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Setting*) parseFromData:(NSData*) data {
  return (Setting*)[[[Setting builder] mergeFromData:data] build];
}
+ (Setting*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Setting*)[[[Setting builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Setting*) parseFromInputStream:(NSInputStream*) input {
  return (Setting*)[[[Setting builder] mergeFromInputStream:input] build];
}
+ (Setting*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Setting*)[[[Setting builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Setting*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Setting*)[[[Setting builder] mergeFromCodedInputStream:input] build];
}
+ (Setting*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Setting*)[[[Setting builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SettingBuilder*) builder {
  return [[SettingBuilder alloc] init];
}
+ (SettingBuilder*) builderWithPrototype:(Setting*) prototype {
  return [[Setting builder] mergeFrom:prototype];
}
- (SettingBuilder*) builder {
  return [Setting builder];
}
- (SettingBuilder*) toBuilder {
  return [Setting builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasRefuseStranger) {
    [output appendFormat:@"%@%@: %@\n", indent, @"refuseStranger", [NSNumber numberWithBool:self.refuseStranger]];
  }
  if (self.hasFactoryReset) {
    [output appendFormat:@"%@%@: %@\n", indent, @"factoryReset", [NSNumber numberWithBool:self.factoryReset]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasRefuseStranger) {
    [dictionary setObject: [NSNumber numberWithBool:self.refuseStranger] forKey: @"refuseStranger"];
  }
  if (self.hasFactoryReset) {
    [dictionary setObject: [NSNumber numberWithBool:self.factoryReset] forKey: @"factoryReset"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Setting class]]) {
    return NO;
  }
  Setting *otherMessage = other;
  return
      self.hasRefuseStranger == otherMessage.hasRefuseStranger &&
      (!self.hasRefuseStranger || self.refuseStranger == otherMessage.refuseStranger) &&
      self.hasFactoryReset == otherMessage.hasFactoryReset &&
      (!self.hasFactoryReset || self.factoryReset == otherMessage.factoryReset) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasRefuseStranger) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.refuseStranger] hash];
  }
  if (self.hasFactoryReset) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.factoryReset] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface SettingBuilder()
@property (strong) Setting* resultSetting;
@end

@implementation SettingBuilder
@synthesize resultSetting;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSetting = [[Setting alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSetting;
}
- (SettingBuilder*) clear {
  self.resultSetting = [[Setting alloc] init];
  return self;
}
- (SettingBuilder*) clone {
  return [Setting builderWithPrototype:resultSetting];
}
- (Setting*) defaultInstance {
  return [Setting defaultInstance];
}
- (Setting*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Setting*) buildPartial {
  Setting* returnMe = resultSetting;
  self.resultSetting = nil;
  return returnMe;
}
- (SettingBuilder*) mergeFrom:(Setting*) other {
  if (other == [Setting defaultInstance]) {
    return self;
  }
  if (other.hasRefuseStranger) {
    [self setRefuseStranger:other.refuseStranger];
  }
  if (other.hasFactoryReset) {
    [self setFactoryReset:other.factoryReset];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SettingBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SettingBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setRefuseStranger:[input readBool]];
        break;
      }
      case 16: {
        [self setFactoryReset:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasRefuseStranger {
  return resultSetting.hasRefuseStranger;
}
- (BOOL) refuseStranger {
  return resultSetting.refuseStranger;
}
- (SettingBuilder*) setRefuseStranger:(BOOL) value {
  resultSetting.hasRefuseStranger = YES;
  resultSetting.refuseStranger = value;
  return self;
}
- (SettingBuilder*) clearRefuseStranger {
  resultSetting.hasRefuseStranger = NO;
  resultSetting.refuseStranger = YES;
  return self;
}
- (BOOL) hasFactoryReset {
  return resultSetting.hasFactoryReset;
}
- (BOOL) factoryReset {
  return resultSetting.factoryReset;
}
- (SettingBuilder*) setFactoryReset:(BOOL) value {
  resultSetting.hasFactoryReset = YES;
  resultSetting.factoryReset = value;
  return self;
}
- (SettingBuilder*) clearFactoryReset {
  resultSetting.hasFactoryReset = NO;
  resultSetting.factoryReset = NO;
  return self;
}
@end

@interface Alarm ()
@property BOOL enable;
@property UInt32 weekDay;
@property UInt32 time;
@property UInt32 bell;
@end

@implementation Alarm

- (BOOL) hasEnable {
  return !!hasEnable_;
}
- (void) setHasEnable:(BOOL) _value_ {
  hasEnable_ = !!_value_;
}
- (BOOL) enable {
  return !!enable_;
}
- (void) setEnable:(BOOL) _value_ {
  enable_ = !!_value_;
}
- (BOOL) hasWeekDay {
  return !!hasWeekDay_;
}
- (void) setHasWeekDay:(BOOL) _value_ {
  hasWeekDay_ = !!_value_;
}
@synthesize weekDay;
- (BOOL) hasTime {
  return !!hasTime_;
}
- (void) setHasTime:(BOOL) _value_ {
  hasTime_ = !!_value_;
}
@synthesize time;
- (BOOL) hasBell {
  return !!hasBell_;
}
- (void) setHasBell:(BOOL) _value_ {
  hasBell_ = !!_value_;
}
@synthesize bell;
- (instancetype) init {
  if ((self = [super init])) {
    self.enable = NO;
    self.weekDay = 0;
    self.time = 0;
    self.bell = 0;
  }
  return self;
}
static Alarm* defaultAlarmInstance = nil;
+ (void) initialize {
  if (self == [Alarm class]) {
    defaultAlarmInstance = [[Alarm alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultAlarmInstance;
}
- (instancetype) defaultInstance {
  return defaultAlarmInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasEnable) {
    [output writeBool:1 value:self.enable];
  }
  if (self.hasWeekDay) {
    [output writeUInt32:2 value:self.weekDay];
  }
  if (self.hasTime) {
    [output writeUInt32:3 value:self.time];
  }
  if (self.hasBell) {
    [output writeUInt32:4 value:self.bell];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasEnable) {
    size_ += computeBoolSize(1, self.enable);
  }
  if (self.hasWeekDay) {
    size_ += computeUInt32Size(2, self.weekDay);
  }
  if (self.hasTime) {
    size_ += computeUInt32Size(3, self.time);
  }
  if (self.hasBell) {
    size_ += computeUInt32Size(4, self.bell);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Alarm*) parseFromData:(NSData*) data {
  return (Alarm*)[[[Alarm builder] mergeFromData:data] build];
}
+ (Alarm*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Alarm*)[[[Alarm builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Alarm*) parseFromInputStream:(NSInputStream*) input {
  return (Alarm*)[[[Alarm builder] mergeFromInputStream:input] build];
}
+ (Alarm*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Alarm*)[[[Alarm builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Alarm*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Alarm*)[[[Alarm builder] mergeFromCodedInputStream:input] build];
}
+ (Alarm*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Alarm*)[[[Alarm builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AlarmBuilder*) builder {
  return [[AlarmBuilder alloc] init];
}
+ (AlarmBuilder*) builderWithPrototype:(Alarm*) prototype {
  return [[Alarm builder] mergeFrom:prototype];
}
- (AlarmBuilder*) builder {
  return [Alarm builder];
}
- (AlarmBuilder*) toBuilder {
  return [Alarm builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasEnable) {
    [output appendFormat:@"%@%@: %@\n", indent, @"enable", [NSNumber numberWithBool:self.enable]];
  }
  if (self.hasWeekDay) {
    [output appendFormat:@"%@%@: %@\n", indent, @"weekDay", [NSNumber numberWithInteger:self.weekDay]];
  }
  if (self.hasTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"time", [NSNumber numberWithInteger:self.time]];
  }
  if (self.hasBell) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bell", [NSNumber numberWithInteger:self.bell]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasEnable) {
    [dictionary setObject: [NSNumber numberWithBool:self.enable] forKey: @"enable"];
  }
  if (self.hasWeekDay) {
    [dictionary setObject: [NSNumber numberWithInteger:self.weekDay] forKey: @"weekDay"];
  }
  if (self.hasTime) {
    [dictionary setObject: [NSNumber numberWithInteger:self.time] forKey: @"time"];
  }
  if (self.hasBell) {
    [dictionary setObject: [NSNumber numberWithInteger:self.bell] forKey: @"bell"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Alarm class]]) {
    return NO;
  }
  Alarm *otherMessage = other;
  return
      self.hasEnable == otherMessage.hasEnable &&
      (!self.hasEnable || self.enable == otherMessage.enable) &&
      self.hasWeekDay == otherMessage.hasWeekDay &&
      (!self.hasWeekDay || self.weekDay == otherMessage.weekDay) &&
      self.hasTime == otherMessage.hasTime &&
      (!self.hasTime || self.time == otherMessage.time) &&
      self.hasBell == otherMessage.hasBell &&
      (!self.hasBell || self.bell == otherMessage.bell) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasEnable) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.enable] hash];
  }
  if (self.hasWeekDay) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.weekDay] hash];
  }
  if (self.hasTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.time] hash];
  }
  if (self.hasBell) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.bell] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface AlarmBuilder()
@property (strong) Alarm* resultAlarm;
@end

@implementation AlarmBuilder
@synthesize resultAlarm;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultAlarm = [[Alarm alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultAlarm;
}
- (AlarmBuilder*) clear {
  self.resultAlarm = [[Alarm alloc] init];
  return self;
}
- (AlarmBuilder*) clone {
  return [Alarm builderWithPrototype:resultAlarm];
}
- (Alarm*) defaultInstance {
  return [Alarm defaultInstance];
}
- (Alarm*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Alarm*) buildPartial {
  Alarm* returnMe = resultAlarm;
  self.resultAlarm = nil;
  return returnMe;
}
- (AlarmBuilder*) mergeFrom:(Alarm*) other {
  if (other == [Alarm defaultInstance]) {
    return self;
  }
  if (other.hasEnable) {
    [self setEnable:other.enable];
  }
  if (other.hasWeekDay) {
    [self setWeekDay:other.weekDay];
  }
  if (other.hasTime) {
    [self setTime:other.time];
  }
  if (other.hasBell) {
    [self setBell:other.bell];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AlarmBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AlarmBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setEnable:[input readBool]];
        break;
      }
      case 16: {
        [self setWeekDay:[input readUInt32]];
        break;
      }
      case 24: {
        [self setTime:[input readUInt32]];
        break;
      }
      case 32: {
        [self setBell:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasEnable {
  return resultAlarm.hasEnable;
}
- (BOOL) enable {
  return resultAlarm.enable;
}
- (AlarmBuilder*) setEnable:(BOOL) value {
  resultAlarm.hasEnable = YES;
  resultAlarm.enable = value;
  return self;
}
- (AlarmBuilder*) clearEnable {
  resultAlarm.hasEnable = NO;
  resultAlarm.enable = NO;
  return self;
}
- (BOOL) hasWeekDay {
  return resultAlarm.hasWeekDay;
}
- (UInt32) weekDay {
  return resultAlarm.weekDay;
}
- (AlarmBuilder*) setWeekDay:(UInt32) value {
  resultAlarm.hasWeekDay = YES;
  resultAlarm.weekDay = value;
  return self;
}
- (AlarmBuilder*) clearWeekDay {
  resultAlarm.hasWeekDay = NO;
  resultAlarm.weekDay = 0;
  return self;
}
- (BOOL) hasTime {
  return resultAlarm.hasTime;
}
- (UInt32) time {
  return resultAlarm.time;
}
- (AlarmBuilder*) setTime:(UInt32) value {
  resultAlarm.hasTime = YES;
  resultAlarm.time = value;
  return self;
}
- (AlarmBuilder*) clearTime {
  resultAlarm.hasTime = NO;
  resultAlarm.time = 0;
  return self;
}
- (BOOL) hasBell {
  return resultAlarm.hasBell;
}
- (UInt32) bell {
  return resultAlarm.bell;
}
- (AlarmBuilder*) setBell:(UInt32) value {
  resultAlarm.hasBell = YES;
  resultAlarm.bell = value;
  return self;
}
- (AlarmBuilder*) clearBell {
  resultAlarm.hasBell = NO;
  resultAlarm.bell = 0;
  return self;
}
@end

@interface Lock ()
@property BOOL enable;
@property UInt32 weekDay;
@property UInt32 startTime;
@property UInt32 endTime;
@end

@implementation Lock

- (BOOL) hasEnable {
  return !!hasEnable_;
}
- (void) setHasEnable:(BOOL) _value_ {
  hasEnable_ = !!_value_;
}
- (BOOL) enable {
  return !!enable_;
}
- (void) setEnable:(BOOL) _value_ {
  enable_ = !!_value_;
}
- (BOOL) hasWeekDay {
  return !!hasWeekDay_;
}
- (void) setHasWeekDay:(BOOL) _value_ {
  hasWeekDay_ = !!_value_;
}
@synthesize weekDay;
- (BOOL) hasStartTime {
  return !!hasStartTime_;
}
- (void) setHasStartTime:(BOOL) _value_ {
  hasStartTime_ = !!_value_;
}
@synthesize startTime;
- (BOOL) hasEndTime {
  return !!hasEndTime_;
}
- (void) setHasEndTime:(BOOL) _value_ {
  hasEndTime_ = !!_value_;
}
@synthesize endTime;
- (instancetype) init {
  if ((self = [super init])) {
    self.enable = NO;
    self.weekDay = 0;
    self.startTime = 0;
    self.endTime = 0;
  }
  return self;
}
static Lock* defaultLockInstance = nil;
+ (void) initialize {
  if (self == [Lock class]) {
    defaultLockInstance = [[Lock alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultLockInstance;
}
- (instancetype) defaultInstance {
  return defaultLockInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasEnable) {
    [output writeBool:1 value:self.enable];
  }
  if (self.hasWeekDay) {
    [output writeUInt32:2 value:self.weekDay];
  }
  if (self.hasStartTime) {
    [output writeUInt32:3 value:self.startTime];
  }
  if (self.hasEndTime) {
    [output writeUInt32:4 value:self.endTime];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasEnable) {
    size_ += computeBoolSize(1, self.enable);
  }
  if (self.hasWeekDay) {
    size_ += computeUInt32Size(2, self.weekDay);
  }
  if (self.hasStartTime) {
    size_ += computeUInt32Size(3, self.startTime);
  }
  if (self.hasEndTime) {
    size_ += computeUInt32Size(4, self.endTime);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Lock*) parseFromData:(NSData*) data {
  return (Lock*)[[[Lock builder] mergeFromData:data] build];
}
+ (Lock*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Lock*)[[[Lock builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Lock*) parseFromInputStream:(NSInputStream*) input {
  return (Lock*)[[[Lock builder] mergeFromInputStream:input] build];
}
+ (Lock*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Lock*)[[[Lock builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Lock*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Lock*)[[[Lock builder] mergeFromCodedInputStream:input] build];
}
+ (Lock*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Lock*)[[[Lock builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LockBuilder*) builder {
  return [[LockBuilder alloc] init];
}
+ (LockBuilder*) builderWithPrototype:(Lock*) prototype {
  return [[Lock builder] mergeFrom:prototype];
}
- (LockBuilder*) builder {
  return [Lock builder];
}
- (LockBuilder*) toBuilder {
  return [Lock builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasEnable) {
    [output appendFormat:@"%@%@: %@\n", indent, @"enable", [NSNumber numberWithBool:self.enable]];
  }
  if (self.hasWeekDay) {
    [output appendFormat:@"%@%@: %@\n", indent, @"weekDay", [NSNumber numberWithInteger:self.weekDay]];
  }
  if (self.hasStartTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"startTime", [NSNumber numberWithInteger:self.startTime]];
  }
  if (self.hasEndTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"endTime", [NSNumber numberWithInteger:self.endTime]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasEnable) {
    [dictionary setObject: [NSNumber numberWithBool:self.enable] forKey: @"enable"];
  }
  if (self.hasWeekDay) {
    [dictionary setObject: [NSNumber numberWithInteger:self.weekDay] forKey: @"weekDay"];
  }
  if (self.hasStartTime) {
    [dictionary setObject: [NSNumber numberWithInteger:self.startTime] forKey: @"startTime"];
  }
  if (self.hasEndTime) {
    [dictionary setObject: [NSNumber numberWithInteger:self.endTime] forKey: @"endTime"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Lock class]]) {
    return NO;
  }
  Lock *otherMessage = other;
  return
      self.hasEnable == otherMessage.hasEnable &&
      (!self.hasEnable || self.enable == otherMessage.enable) &&
      self.hasWeekDay == otherMessage.hasWeekDay &&
      (!self.hasWeekDay || self.weekDay == otherMessage.weekDay) &&
      self.hasStartTime == otherMessage.hasStartTime &&
      (!self.hasStartTime || self.startTime == otherMessage.startTime) &&
      self.hasEndTime == otherMessage.hasEndTime &&
      (!self.hasEndTime || self.endTime == otherMessage.endTime) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasEnable) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.enable] hash];
  }
  if (self.hasWeekDay) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.weekDay] hash];
  }
  if (self.hasStartTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.startTime] hash];
  }
  if (self.hasEndTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.endTime] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface LockBuilder()
@property (strong) Lock* resultLock;
@end

@implementation LockBuilder
@synthesize resultLock;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultLock = [[Lock alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultLock;
}
- (LockBuilder*) clear {
  self.resultLock = [[Lock alloc] init];
  return self;
}
- (LockBuilder*) clone {
  return [Lock builderWithPrototype:resultLock];
}
- (Lock*) defaultInstance {
  return [Lock defaultInstance];
}
- (Lock*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Lock*) buildPartial {
  Lock* returnMe = resultLock;
  self.resultLock = nil;
  return returnMe;
}
- (LockBuilder*) mergeFrom:(Lock*) other {
  if (other == [Lock defaultInstance]) {
    return self;
  }
  if (other.hasEnable) {
    [self setEnable:other.enable];
  }
  if (other.hasWeekDay) {
    [self setWeekDay:other.weekDay];
  }
  if (other.hasStartTime) {
    [self setStartTime:other.startTime];
  }
  if (other.hasEndTime) {
    [self setEndTime:other.endTime];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (LockBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (LockBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setEnable:[input readBool]];
        break;
      }
      case 16: {
        [self setWeekDay:[input readUInt32]];
        break;
      }
      case 24: {
        [self setStartTime:[input readUInt32]];
        break;
      }
      case 32: {
        [self setEndTime:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasEnable {
  return resultLock.hasEnable;
}
- (BOOL) enable {
  return resultLock.enable;
}
- (LockBuilder*) setEnable:(BOOL) value {
  resultLock.hasEnable = YES;
  resultLock.enable = value;
  return self;
}
- (LockBuilder*) clearEnable {
  resultLock.hasEnable = NO;
  resultLock.enable = NO;
  return self;
}
- (BOOL) hasWeekDay {
  return resultLock.hasWeekDay;
}
- (UInt32) weekDay {
  return resultLock.weekDay;
}
- (LockBuilder*) setWeekDay:(UInt32) value {
  resultLock.hasWeekDay = YES;
  resultLock.weekDay = value;
  return self;
}
- (LockBuilder*) clearWeekDay {
  resultLock.hasWeekDay = NO;
  resultLock.weekDay = 0;
  return self;
}
- (BOOL) hasStartTime {
  return resultLock.hasStartTime;
}
- (UInt32) startTime {
  return resultLock.startTime;
}
- (LockBuilder*) setStartTime:(UInt32) value {
  resultLock.hasStartTime = YES;
  resultLock.startTime = value;
  return self;
}
- (LockBuilder*) clearStartTime {
  resultLock.hasStartTime = NO;
  resultLock.startTime = 0;
  return self;
}
- (BOOL) hasEndTime {
  return resultLock.hasEndTime;
}
- (UInt32) endTime {
  return resultLock.endTime;
}
- (LockBuilder*) setEndTime:(UInt32) value {
  resultLock.hasEndTime = YES;
  resultLock.endTime = value;
  return self;
}
- (LockBuilder*) clearEndTime {
  resultLock.hasEndTime = NO;
  resultLock.endTime = 0;
  return self;
}
@end

@interface PowerSwitch ()
@property BOOL openEnable;
@property UInt32 openTime;
@property BOOL closeEnable;
@property UInt32 closeTime;
@end

@implementation PowerSwitch

- (BOOL) hasOpenEnable {
  return !!hasOpenEnable_;
}
- (void) setHasOpenEnable:(BOOL) _value_ {
  hasOpenEnable_ = !!_value_;
}
- (BOOL) openEnable {
  return !!openEnable_;
}
- (void) setOpenEnable:(BOOL) _value_ {
  openEnable_ = !!_value_;
}
- (BOOL) hasOpenTime {
  return !!hasOpenTime_;
}
- (void) setHasOpenTime:(BOOL) _value_ {
  hasOpenTime_ = !!_value_;
}
@synthesize openTime;
- (BOOL) hasCloseEnable {
  return !!hasCloseEnable_;
}
- (void) setHasCloseEnable:(BOOL) _value_ {
  hasCloseEnable_ = !!_value_;
}
- (BOOL) closeEnable {
  return !!closeEnable_;
}
- (void) setCloseEnable:(BOOL) _value_ {
  closeEnable_ = !!_value_;
}
- (BOOL) hasCloseTime {
  return !!hasCloseTime_;
}
- (void) setHasCloseTime:(BOOL) _value_ {
  hasCloseTime_ = !!_value_;
}
@synthesize closeTime;
- (instancetype) init {
  if ((self = [super init])) {
    self.openEnable = NO;
    self.openTime = 0;
    self.closeEnable = NO;
    self.closeTime = 0;
  }
  return self;
}
static PowerSwitch* defaultPowerSwitchInstance = nil;
+ (void) initialize {
  if (self == [PowerSwitch class]) {
    defaultPowerSwitchInstance = [[PowerSwitch alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPowerSwitchInstance;
}
- (instancetype) defaultInstance {
  return defaultPowerSwitchInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOpenEnable) {
    [output writeBool:1 value:self.openEnable];
  }
  if (self.hasOpenTime) {
    [output writeUInt32:2 value:self.openTime];
  }
  if (self.hasCloseEnable) {
    [output writeBool:3 value:self.closeEnable];
  }
  if (self.hasCloseTime) {
    [output writeUInt32:4 value:self.closeTime];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasOpenEnable) {
    size_ += computeBoolSize(1, self.openEnable);
  }
  if (self.hasOpenTime) {
    size_ += computeUInt32Size(2, self.openTime);
  }
  if (self.hasCloseEnable) {
    size_ += computeBoolSize(3, self.closeEnable);
  }
  if (self.hasCloseTime) {
    size_ += computeUInt32Size(4, self.closeTime);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PowerSwitch*) parseFromData:(NSData*) data {
  return (PowerSwitch*)[[[PowerSwitch builder] mergeFromData:data] build];
}
+ (PowerSwitch*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PowerSwitch*)[[[PowerSwitch builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PowerSwitch*) parseFromInputStream:(NSInputStream*) input {
  return (PowerSwitch*)[[[PowerSwitch builder] mergeFromInputStream:input] build];
}
+ (PowerSwitch*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PowerSwitch*)[[[PowerSwitch builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PowerSwitch*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PowerSwitch*)[[[PowerSwitch builder] mergeFromCodedInputStream:input] build];
}
+ (PowerSwitch*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PowerSwitch*)[[[PowerSwitch builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PowerSwitchBuilder*) builder {
  return [[PowerSwitchBuilder alloc] init];
}
+ (PowerSwitchBuilder*) builderWithPrototype:(PowerSwitch*) prototype {
  return [[PowerSwitch builder] mergeFrom:prototype];
}
- (PowerSwitchBuilder*) builder {
  return [PowerSwitch builder];
}
- (PowerSwitchBuilder*) toBuilder {
  return [PowerSwitch builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasOpenEnable) {
    [output appendFormat:@"%@%@: %@\n", indent, @"openEnable", [NSNumber numberWithBool:self.openEnable]];
  }
  if (self.hasOpenTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"openTime", [NSNumber numberWithInteger:self.openTime]];
  }
  if (self.hasCloseEnable) {
    [output appendFormat:@"%@%@: %@\n", indent, @"closeEnable", [NSNumber numberWithBool:self.closeEnable]];
  }
  if (self.hasCloseTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"closeTime", [NSNumber numberWithInteger:self.closeTime]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasOpenEnable) {
    [dictionary setObject: [NSNumber numberWithBool:self.openEnable] forKey: @"openEnable"];
  }
  if (self.hasOpenTime) {
    [dictionary setObject: [NSNumber numberWithInteger:self.openTime] forKey: @"openTime"];
  }
  if (self.hasCloseEnable) {
    [dictionary setObject: [NSNumber numberWithBool:self.closeEnable] forKey: @"closeEnable"];
  }
  if (self.hasCloseTime) {
    [dictionary setObject: [NSNumber numberWithInteger:self.closeTime] forKey: @"closeTime"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PowerSwitch class]]) {
    return NO;
  }
  PowerSwitch *otherMessage = other;
  return
      self.hasOpenEnable == otherMessage.hasOpenEnable &&
      (!self.hasOpenEnable || self.openEnable == otherMessage.openEnable) &&
      self.hasOpenTime == otherMessage.hasOpenTime &&
      (!self.hasOpenTime || self.openTime == otherMessage.openTime) &&
      self.hasCloseEnable == otherMessage.hasCloseEnable &&
      (!self.hasCloseEnable || self.closeEnable == otherMessage.closeEnable) &&
      self.hasCloseTime == otherMessage.hasCloseTime &&
      (!self.hasCloseTime || self.closeTime == otherMessage.closeTime) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasOpenEnable) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.openEnable] hash];
  }
  if (self.hasOpenTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.openTime] hash];
  }
  if (self.hasCloseEnable) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.closeEnable] hash];
  }
  if (self.hasCloseTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.closeTime] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PowerSwitchBuilder()
@property (strong) PowerSwitch* resultPowerSwitch;
@end

@implementation PowerSwitchBuilder
@synthesize resultPowerSwitch;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPowerSwitch = [[PowerSwitch alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPowerSwitch;
}
- (PowerSwitchBuilder*) clear {
  self.resultPowerSwitch = [[PowerSwitch alloc] init];
  return self;
}
- (PowerSwitchBuilder*) clone {
  return [PowerSwitch builderWithPrototype:resultPowerSwitch];
}
- (PowerSwitch*) defaultInstance {
  return [PowerSwitch defaultInstance];
}
- (PowerSwitch*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PowerSwitch*) buildPartial {
  PowerSwitch* returnMe = resultPowerSwitch;
  self.resultPowerSwitch = nil;
  return returnMe;
}
- (PowerSwitchBuilder*) mergeFrom:(PowerSwitch*) other {
  if (other == [PowerSwitch defaultInstance]) {
    return self;
  }
  if (other.hasOpenEnable) {
    [self setOpenEnable:other.openEnable];
  }
  if (other.hasOpenTime) {
    [self setOpenTime:other.openTime];
  }
  if (other.hasCloseEnable) {
    [self setCloseEnable:other.closeEnable];
  }
  if (other.hasCloseTime) {
    [self setCloseTime:other.closeTime];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PowerSwitchBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PowerSwitchBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setOpenEnable:[input readBool]];
        break;
      }
      case 16: {
        [self setOpenTime:[input readUInt32]];
        break;
      }
      case 24: {
        [self setCloseEnable:[input readBool]];
        break;
      }
      case 32: {
        [self setCloseTime:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasOpenEnable {
  return resultPowerSwitch.hasOpenEnable;
}
- (BOOL) openEnable {
  return resultPowerSwitch.openEnable;
}
- (PowerSwitchBuilder*) setOpenEnable:(BOOL) value {
  resultPowerSwitch.hasOpenEnable = YES;
  resultPowerSwitch.openEnable = value;
  return self;
}
- (PowerSwitchBuilder*) clearOpenEnable {
  resultPowerSwitch.hasOpenEnable = NO;
  resultPowerSwitch.openEnable = NO;
  return self;
}
- (BOOL) hasOpenTime {
  return resultPowerSwitch.hasOpenTime;
}
- (UInt32) openTime {
  return resultPowerSwitch.openTime;
}
- (PowerSwitchBuilder*) setOpenTime:(UInt32) value {
  resultPowerSwitch.hasOpenTime = YES;
  resultPowerSwitch.openTime = value;
  return self;
}
- (PowerSwitchBuilder*) clearOpenTime {
  resultPowerSwitch.hasOpenTime = NO;
  resultPowerSwitch.openTime = 0;
  return self;
}
- (BOOL) hasCloseEnable {
  return resultPowerSwitch.hasCloseEnable;
}
- (BOOL) closeEnable {
  return resultPowerSwitch.closeEnable;
}
- (PowerSwitchBuilder*) setCloseEnable:(BOOL) value {
  resultPowerSwitch.hasCloseEnable = YES;
  resultPowerSwitch.closeEnable = value;
  return self;
}
- (PowerSwitchBuilder*) clearCloseEnable {
  resultPowerSwitch.hasCloseEnable = NO;
  resultPowerSwitch.closeEnable = NO;
  return self;
}
- (BOOL) hasCloseTime {
  return resultPowerSwitch.hasCloseTime;
}
- (UInt32) closeTime {
  return resultPowerSwitch.closeTime;
}
- (PowerSwitchBuilder*) setCloseTime:(UInt32) value {
  resultPowerSwitch.hasCloseTime = YES;
  resultPowerSwitch.closeTime = value;
  return self;
}
- (PowerSwitchBuilder*) clearCloseTime {
  resultPowerSwitch.hasCloseTime = NO;
  resultPowerSwitch.closeTime = 0;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
